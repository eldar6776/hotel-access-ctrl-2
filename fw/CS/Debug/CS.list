
CS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003358  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08003418  08003418  00013418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.__at_0x08002008 00000004  0800358c  0800358c  0001358c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08003590  08003590  00020020  2**0
                  CONTENTS
  5 .ARM          00000000  08003590  08003590  00020020  2**0
                  CONTENTS
  6 .preinit_array 00000000  08003590  08003590  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08003590  08003590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08003594  08003594  00013594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000020  20000000  08003598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000004a0  20000020  080035b8  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c0  080035b8  000204c0  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   000109dd  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002588  00000000  00000000  00030a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000074ad  00000000  00000000  00032fad  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00000b00  00000000  00000000  0003a460  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000a90  00000000  00000000  0003af60  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0000dc4c  00000000  00000000  0003b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0000c751  00000000  00000000  0004963c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0004ad4b  00000000  00000000  00055d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  000a0ad8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001c34  00000000  00000000  000a0b54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003400 	.word	0x08003400

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08003400 	.word	0x08003400

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Hex2Str>:
 * @brief
 * @param
 * @retval
 */
void Hex2Str(char *pstr, const uint8_t *phex, uint16_t str_size)
{
 8000220:	b510      	push	{r4, lr}
 8000222:	b082      	sub	sp, #8
	__IO uint32_t scnt = 0U;
 8000224:	2300      	movs	r3, #0
 8000226:	9301      	str	r3, [sp, #4]

	while (str_size) //------------------------------------------convert requested hex chars from string to integer value
 8000228:	e009      	b.n	800023e <Hex2Str+0x1e>
	{
		if (scnt == 0U)
		{
			uint32_t tmp = ((*phex >> 4) & 0x0FU);  //----------select high nibble
			if (tmp > 0x09U) *pstr = tmp + 0x37U;    //----------convert to upper ascii letter
			else *pstr = tmp + 0x30U;   //----------------------convert to char digit
 800022a:	3330      	adds	r3, #48	; 0x30
 800022c:	7003      	strb	r3, [r0, #0]
			++scnt;
 800022e:	9b01      	ldr	r3, [sp, #4]
 8000230:	3301      	adds	r3, #1
 8000232:	9301      	str	r3, [sp, #4]
			else *pstr = tmp + 0x30U;   //----------------------convert to char digit
			scnt = 0U;
			++phex;
		}

		++pstr;
 8000234:	3001      	adds	r0, #1
		*pstr = 0x00U; //----------------------------------------0x00U terminate string
 8000236:	2300      	movs	r3, #0
 8000238:	7003      	strb	r3, [r0, #0]
		--str_size;
 800023a:	3a01      	subs	r2, #1
 800023c:	b292      	uxth	r2, r2
	while (str_size) //------------------------------------------convert requested hex chars from string to integer value
 800023e:	2a00      	cmp	r2, #0
 8000240:	d017      	beq.n	8000272 <Hex2Str+0x52>
		if (scnt == 0U)
 8000242:	9b01      	ldr	r3, [sp, #4]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d106      	bne.n	8000256 <Hex2Str+0x36>
			uint32_t tmp = ((*phex >> 4) & 0x0FU);  //----------select high nibble
 8000248:	780b      	ldrb	r3, [r1, #0]
 800024a:	091b      	lsrs	r3, r3, #4
			if (tmp > 0x09U) *pstr = tmp + 0x37U;    //----------convert to upper ascii letter
 800024c:	2b09      	cmp	r3, #9
 800024e:	d9ec      	bls.n	800022a <Hex2Str+0xa>
 8000250:	3337      	adds	r3, #55	; 0x37
 8000252:	7003      	strb	r3, [r0, #0]
 8000254:	e7eb      	b.n	800022e <Hex2Str+0xe>
			uint32_t tmp = (*phex & 0x0FU); //------------------select low nibble
 8000256:	780c      	ldrb	r4, [r1, #0]
 8000258:	230f      	movs	r3, #15
 800025a:	4023      	ands	r3, r4
			if (tmp > 0x09U) *pstr = tmp + 0x37U;    //----------convert to upper ascii letter
 800025c:	2b09      	cmp	r3, #9
 800025e:	d905      	bls.n	800026c <Hex2Str+0x4c>
 8000260:	3337      	adds	r3, #55	; 0x37
 8000262:	7003      	strb	r3, [r0, #0]
			scnt = 0U;
 8000264:	2300      	movs	r3, #0
 8000266:	9301      	str	r3, [sp, #4]
			++phex;
 8000268:	3101      	adds	r1, #1
 800026a:	e7e3      	b.n	8000234 <Hex2Str+0x14>
			else *pstr = tmp + 0x30U;   //----------------------convert to char digit
 800026c:	3330      	adds	r3, #48	; 0x30
 800026e:	7003      	strb	r3, [r0, #0]
 8000270:	e7f8      	b.n	8000264 <Hex2Str+0x44>
	}
}
 8000272:	b002      	add	sp, #8
 8000274:	bd10      	pop	{r4, pc}

08000276 <mem_cpy>:
void mem_cpy(void *dst, const void *src, uint32_t cnt)
{
	uint8_t *d = (uint8_t*) dst;
	const uint8_t *s = (const uint8_t*) src;

	if (cnt)
 8000276:	2a00      	cmp	r2, #0
 8000278:	d006      	beq.n	8000288 <mem_cpy+0x12>
	{
		do
		{
			*d++ = *s++;
 800027a:	780b      	ldrb	r3, [r1, #0]
 800027c:	7003      	strb	r3, [r0, #0]
		}
		while (--cnt);
 800027e:	3a01      	subs	r2, #1
			*d++ = *s++;
 8000280:	3001      	adds	r0, #1
 8000282:	3101      	adds	r1, #1
		while (--cnt);
 8000284:	2a00      	cmp	r2, #0
 8000286:	d1f8      	bne.n	800027a <mem_cpy+0x4>
	}
}
 8000288:	4770      	bx	lr

0800028a <mem_set>:
{
	uint8_t *d = (uint8_t*) dst;

	do
	{
		*d++ = (uint8_t) val;
 800028a:	7001      	strb	r1, [r0, #0]
	}
	while (--cnt);
 800028c:	3a01      	subs	r2, #1
		*d++ = (uint8_t) val;
 800028e:	3001      	adds	r0, #1
	while (--cnt);
 8000290:	2a00      	cmp	r2, #0
 8000292:	d1fa      	bne.n	800028a <mem_set>
}
 8000294:	4770      	bx	lr
	...

08000298 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct =
 800029c:	2214      	movs	r2, #20
 800029e:	2100      	movs	r1, #0
 80002a0:	a803      	add	r0, sp, #12
 80002a2:	f003 f8a5 	bl	80033f0 <memset>
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80002a6:	4b23      	ldr	r3, [pc, #140]	; (8000334 <MX_GPIO_Init+0x9c>)
 80002a8:	6959      	ldr	r1, [r3, #20]
 80002aa:	2080      	movs	r0, #128	; 0x80
 80002ac:	03c0      	lsls	r0, r0, #15
 80002ae:	4301      	orrs	r1, r0
 80002b0:	6159      	str	r1, [r3, #20]
 80002b2:	695a      	ldr	r2, [r3, #20]
 80002b4:	4002      	ands	r2, r0
 80002b6:	9200      	str	r2, [sp, #0]
 80002b8:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002ba:	6959      	ldr	r1, [r3, #20]
 80002bc:	2080      	movs	r0, #128	; 0x80
 80002be:	0280      	lsls	r0, r0, #10
 80002c0:	4301      	orrs	r1, r0
 80002c2:	6159      	str	r1, [r3, #20]
 80002c4:	695a      	ldr	r2, [r3, #20]
 80002c6:	4002      	ands	r2, r0
 80002c8:	9201      	str	r2, [sp, #4]
 80002ca:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80002cc:	695a      	ldr	r2, [r3, #20]
 80002ce:	2180      	movs	r1, #128	; 0x80
 80002d0:	02c9      	lsls	r1, r1, #11
 80002d2:	430a      	orrs	r2, r1
 80002d4:	615a      	str	r2, [r3, #20]
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	400b      	ands	r3, r1
 80002da:	9302      	str	r3, [sp, #8]
 80002dc:	9b02      	ldr	r3, [sp, #8]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80002de:	2790      	movs	r7, #144	; 0x90
 80002e0:	05ff      	lsls	r7, r7, #23
 80002e2:	2200      	movs	r2, #0
 80002e4:	211f      	movs	r1, #31
 80002e6:	0038      	movs	r0, r7
 80002e8:	f001 faa9 	bl	800183e <HAL_GPIO_WritePin>
	LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin | SPI_NSS_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RS522_RST_GPIO_Port, RS522_RST_Pin, GPIO_PIN_RESET);
 80002ec:	4d12      	ldr	r5, [pc, #72]	; (8000338 <MX_GPIO_Init+0xa0>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	2102      	movs	r1, #2
 80002f2:	0028      	movs	r0, r5
 80002f4:	f001 faa3 	bl	800183e <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PF0 PF1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80002f8:	2303      	movs	r3, #3
 80002fa:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002fc:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fe:	2400      	movs	r4, #0
 8000300:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000302:	a903      	add	r1, sp, #12
 8000304:	480d      	ldr	r0, [pc, #52]	; (800033c <MX_GPIO_Init+0xa4>)
 8000306:	f001 f953 	bl	80015b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
	 SPI_NSS_Pin */
	GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin | SPI_NSS_Pin;
 800030a:	231f      	movs	r3, #31
 800030c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030e:	2601      	movs	r6, #1
 8000310:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000312:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000314:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000316:	a903      	add	r1, sp, #12
 8000318:	0038      	movs	r0, r7
 800031a:	f001 f949 	bl	80015b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : RS522_RST_Pin */
	GPIO_InitStruct.Pin = RS522_RST_Pin;
 800031e:	2302      	movs	r3, #2
 8000320:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000322:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(RS522_RST_GPIO_Port, &GPIO_InitStruct);
 8000328:	a903      	add	r1, sp, #12
 800032a:	0028      	movs	r0, r5
 800032c:	f001 f940 	bl	80015b0 <HAL_GPIO_Init>

}
 8000330:	b009      	add	sp, #36	; 0x24
 8000332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000334:	40021000 	.word	0x40021000
 8000338:	48000400 	.word	0x48000400
 800033c:	48001400 	.word	0x48001400

08000340 <MX_CRC_Init>:
{
 8000340:	b510      	push	{r4, lr}
	hcrc.Instance = CRC;
 8000342:	4806      	ldr	r0, [pc, #24]	; (800035c <MX_CRC_Init+0x1c>)
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <MX_CRC_Init+0x20>)
 8000346:	6003      	str	r3, [r0, #0]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000348:	2300      	movs	r3, #0
 800034a:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800034c:	60c3      	str	r3, [r0, #12]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800034e:	6103      	str	r3, [r0, #16]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000350:	3301      	adds	r3, #1
 8000352:	6183      	str	r3, [r0, #24]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000354:	f001 f8dc 	bl	8001510 <HAL_CRC_Init>
}
 8000358:	bd10      	pop	{r4, pc}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	20000274 	.word	0x20000274
 8000360:	40023000 	.word	0x40023000

08000364 <MX_RTC_Init>:
{
 8000364:	b570      	push	{r4, r5, r6, lr}
	hrtc.Instance = RTC;
 8000366:	4c12      	ldr	r4, [pc, #72]	; (80003b0 <MX_RTC_Init+0x4c>)
 8000368:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <MX_RTC_Init+0x50>)
 800036a:	6023      	str	r3, [r4, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800036c:	2500      	movs	r5, #0
 800036e:	6065      	str	r5, [r4, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000370:	237f      	movs	r3, #127	; 0x7f
 8000372:	60a3      	str	r3, [r4, #8]
	hrtc.Init.SynchPrediv = 255;
 8000374:	3380      	adds	r3, #128	; 0x80
 8000376:	60e3      	str	r3, [r4, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000378:	6125      	str	r5, [r4, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800037a:	6165      	str	r5, [r4, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800037c:	61a5      	str	r5, [r4, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800037e:	0020      	movs	r0, r4
 8000380:	f001 fe60 	bl	8002044 <HAL_RTC_Init>
	sTime.Hours = 0x0;
 8000384:	490c      	ldr	r1, [pc, #48]	; (80003b8 <MX_RTC_Init+0x54>)
 8000386:	700d      	strb	r5, [r1, #0]
	sTime.Minutes = 0x0;
 8000388:	704d      	strb	r5, [r1, #1]
	sTime.Seconds = 0x0;
 800038a:	708d      	strb	r5, [r1, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800038c:	60cd      	str	r5, [r1, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800038e:	610d      	str	r5, [r1, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000390:	2201      	movs	r2, #1
 8000392:	0020      	movs	r0, r4
 8000394:	f001 fec4 	bl	8002120 <HAL_RTC_SetTime>
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000398:	4908      	ldr	r1, [pc, #32]	; (80003bc <MX_RTC_Init+0x58>)
 800039a:	2301      	movs	r3, #1
 800039c:	700b      	strb	r3, [r1, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 800039e:	704b      	strb	r3, [r1, #1]
	sDate.Date = 0x1;
 80003a0:	708b      	strb	r3, [r1, #2]
	sDate.Year = 0x0;
 80003a2:	70cd      	strb	r5, [r1, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80003a4:	2201      	movs	r2, #1
 80003a6:	0020      	movs	r0, r4
 80003a8:	f001 ff38 	bl	800221c <HAL_RTC_SetDate>
}
 80003ac:	bd70      	pop	{r4, r5, r6, pc}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	20000310 	.word	0x20000310
 80003b4:	40002800 	.word	0x40002800
 80003b8:	20000044 	.word	0x20000044
 80003bc:	20000040 	.word	0x20000040

080003c0 <MX_SPI1_Init>:
{
 80003c0:	b510      	push	{r4, lr}
	hspi1.Instance = SPI1;
 80003c2:	480e      	ldr	r0, [pc, #56]	; (80003fc <MX_SPI1_Init+0x3c>)
 80003c4:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_SPI1_Init+0x40>)
 80003c6:	6003      	str	r3, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80003c8:	2382      	movs	r3, #130	; 0x82
 80003ca:	005b      	lsls	r3, r3, #1
 80003cc:	6043      	str	r3, [r0, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ce:	2300      	movs	r3, #0
 80003d0:	6083      	str	r3, [r0, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003d2:	22e0      	movs	r2, #224	; 0xe0
 80003d4:	00d2      	lsls	r2, r2, #3
 80003d6:	60c2      	str	r2, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003d8:	6103      	str	r3, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003da:	6143      	str	r3, [r0, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80003dc:	2280      	movs	r2, #128	; 0x80
 80003de:	0092      	lsls	r2, r2, #2
 80003e0:	6182      	str	r2, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003e2:	61c3      	str	r3, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003e4:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003e6:	6243      	str	r3, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003e8:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80003ea:	3afa      	subs	r2, #250	; 0xfa
 80003ec:	3aff      	subs	r2, #255	; 0xff
 80003ee:	62c2      	str	r2, [r0, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003f0:	6303      	str	r3, [r0, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003f2:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003f4:	f002 f854 	bl	80024a0 <HAL_SPI_Init>
}
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	20000330 	.word	0x20000330
 8000400:	40013000 	.word	0x40013000

08000404 <SystemClock_Config>:
{
 8000404:	b510      	push	{r4, lr}
 8000406:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000408:	222c      	movs	r2, #44	; 0x2c
 800040a:	2100      	movs	r1, #0
 800040c:	a809      	add	r0, sp, #36	; 0x24
 800040e:	f002 ffef 	bl	80033f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000412:	2210      	movs	r2, #16
 8000414:	2100      	movs	r1, #0
 8000416:	a804      	add	r0, sp, #16
 8000418:	f002 ffea 	bl	80033f0 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 800041c:	2210      	movs	r2, #16
 800041e:	2100      	movs	r1, #0
 8000420:	4668      	mov	r0, sp
 8000422:	f002 ffe5 	bl	80033f0 <memset>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 8000426:	230a      	movs	r3, #10
 8000428:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042a:	3b09      	subs	r3, #9
 800042c:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042e:	2210      	movs	r2, #16
 8000430:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000432:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000434:	2402      	movs	r4, #2
 8000436:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000438:	23c0      	movs	r3, #192	; 0xc0
 800043a:	035b      	lsls	r3, r3, #13
 800043c:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043e:	a808      	add	r0, sp, #32
 8000440:	f001 fa0c 	bl	800185c <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000444:	2307      	movs	r3, #7
 8000446:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000448:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044a:	2400      	movs	r4, #0
 800044c:	9406      	str	r4, [sp, #24]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044e:	9407      	str	r4, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000450:	2101      	movs	r1, #1
 8000452:	a804      	add	r0, sp, #16
 8000454:	f001 fc86 	bl	8001d64 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_RTC;
 8000458:	4b05      	ldr	r3, [pc, #20]	; (8000470 <SystemClock_Config+0x6c>)
 800045a:	9300      	str	r3, [sp, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800045c:	9402      	str	r4, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800045e:	2380      	movs	r3, #128	; 0x80
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	9301      	str	r3, [sp, #4]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000464:	4668      	mov	r0, sp
 8000466:	f001 fd2b 	bl	8001ec0 <HAL_RCCEx_PeriphCLKConfig>
}
 800046a:	b014      	add	sp, #80	; 0x50
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	00010001 	.word	0x00010001

08000474 <main>:
{
 8000474:	b510      	push	{r4, lr}
 	HAL_Init();
 8000476:	f000 ff99 	bl	80013ac <HAL_Init>
	SystemClock_Config();
 800047a:	f7ff ffc3 	bl	8000404 <SystemClock_Config>
	MX_GPIO_Init();
 800047e:	f7ff ff0b 	bl	8000298 <MX_GPIO_Init>
	MX_CRC_Init();
 8000482:	f7ff ff5d 	bl	8000340 <MX_CRC_Init>
	MX_RTC_Init();
 8000486:	f7ff ff6d 	bl	8000364 <MX_RTC_Init>
	MX_SPI1_Init();
 800048a:	f7ff ff99 	bl	80003c0 <MX_SPI1_Init>
	RC522_Init();
 800048e:	f000 fd61 	bl	8000f54 <RC522_Init>
	OW_Init();
 8000492:	f000 f855 	bl	8000540 <OW_Init>
		RC522_Service();
 8000496:	f000 fd9b 	bl	8000fd0 <RC522_Service>
		OW_Service();
 800049a:	f000 f881 	bl	80005a0 <OW_Service>
 800049e:	e7fa      	b.n	8000496 <main+0x22>

080004a0 <Error_Handler>:
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80004a0:	4770      	bx	lr
	...

080004a4 <OW_SetUsart>:
 * @brief
 * @param
 * @retval
 */
static void OW_SetUsart(uint8_t brate, uint8_t bsize)
{
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	0006      	movs	r6, r0
 80004a8:	000c      	movs	r4, r1
	huart1.Instance = USART1;
 80004aa:	4d22      	ldr	r5, [pc, #136]	; (8000534 <OW_SetUsart+0x90>)
 80004ac:	4b22      	ldr	r3, [pc, #136]	; (8000538 <OW_SetUsart+0x94>)
 80004ae:	602b      	str	r3, [r5, #0]
	HAL_UART_DeInit(&huart1);
 80004b0:	0028      	movs	r0, r5
 80004b2:	f002 fb09 	bl	8002ac8 <HAL_UART_DeInit>
	huart1.Init.BaudRate = bps[brate];
 80004b6:	00b6      	lsls	r6, r6, #2
 80004b8:	4b20      	ldr	r3, [pc, #128]	; (800053c <OW_SetUsart+0x98>)
 80004ba:	58f3      	ldr	r3, [r6, r3]
 80004bc:	606b      	str	r3, [r5, #4]
	if (bsize == WL_9BIT) huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80004be:	2c00      	cmp	r4, #0
 80004c0:	d116      	bne.n	80004f0 <OW_SetUsart+0x4c>
 80004c2:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <OW_SetUsart+0x90>)
 80004c4:	2280      	movs	r2, #128	; 0x80
 80004c6:	0152      	lsls	r2, r2, #5
 80004c8:	609a      	str	r2, [r3, #8]
	else if (bsize == WL_8BIT) huart1.Init.WordLength = UART_WORDLENGTH_8B;
	huart1.Init.StopBits = UART_STOPBITS_1;
 80004ca:	4b1a      	ldr	r3, [pc, #104]	; (8000534 <OW_SetUsart+0x90>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80004d0:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80004d2:	210c      	movs	r1, #12
 80004d4:	6159      	str	r1, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004d6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004da:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80004dc:	3208      	adds	r2, #8
 80004de:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80004e0:	2280      	movs	r2, #128	; 0x80
 80004e2:	0212      	lsls	r2, r2, #8
 80004e4:	635a      	str	r2, [r3, #52]	; 0x34
	if (bsize == WL_9BIT)
 80004e6:	2c00      	cmp	r4, #0
 80004e8:	d008      	beq.n	80004fc <OW_SetUsart+0x58>
	{
		if (HAL_MultiProcessor_Init(&huart1, STX, UART_WAKEUPMETHOD_ADDRESSMARK) != HAL_OK) Error_Handler();
		HAL_MultiProcessor_EnableMuteMode(&huart1);
		HAL_MultiProcessor_EnterMuteMode(&huart1);
	}
	else if (bsize == WL_8BIT)
 80004ea:	2c01      	cmp	r4, #1
 80004ec:	d019      	beq.n	8000522 <OW_SetUsart+0x7e>
	{
		if (HAL_UART_Init(&huart1) != HAL_OK) Error_Handler(); //(MAIN_FUNC, USART_DRV);
	}

}
 80004ee:	bd70      	pop	{r4, r5, r6, pc}
	else if (bsize == WL_8BIT) huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004f0:	2c01      	cmp	r4, #1
 80004f2:	d1ea      	bne.n	80004ca <OW_SetUsart+0x26>
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <OW_SetUsart+0x90>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	e7e6      	b.n	80004ca <OW_SetUsart+0x26>
		if (HAL_MultiProcessor_Init(&huart1, STX, UART_WAKEUPMETHOD_ADDRESSMARK) != HAL_OK) Error_Handler();
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	0112      	lsls	r2, r2, #4
 8000500:	390a      	subs	r1, #10
 8000502:	0018      	movs	r0, r3
 8000504:	f002 feec 	bl	80032e0 <HAL_MultiProcessor_Init>
 8000508:	2800      	cmp	r0, #0
 800050a:	d107      	bne.n	800051c <OW_SetUsart+0x78>
		HAL_MultiProcessor_EnableMuteMode(&huart1);
 800050c:	4c09      	ldr	r4, [pc, #36]	; (8000534 <OW_SetUsart+0x90>)
 800050e:	0020      	movs	r0, r4
 8000510:	f002 ff32 	bl	8003378 <HAL_MultiProcessor_EnableMuteMode>
		HAL_MultiProcessor_EnterMuteMode(&huart1);
 8000514:	0020      	movs	r0, r4
 8000516:	f002 fccd 	bl	8002eb4 <HAL_MultiProcessor_EnterMuteMode>
 800051a:	e7e8      	b.n	80004ee <OW_SetUsart+0x4a>
		if (HAL_MultiProcessor_Init(&huart1, STX, UART_WAKEUPMETHOD_ADDRESSMARK) != HAL_OK) Error_Handler();
 800051c:	f7ff ffc0 	bl	80004a0 <Error_Handler>
 8000520:	e7f4      	b.n	800050c <OW_SetUsart+0x68>
		if (HAL_UART_Init(&huart1) != HAL_OK) Error_Handler(); //(MAIN_FUNC, USART_DRV);
 8000522:	4804      	ldr	r0, [pc, #16]	; (8000534 <OW_SetUsart+0x90>)
 8000524:	f002 fea6 	bl	8003274 <HAL_UART_Init>
 8000528:	2800      	cmp	r0, #0
 800052a:	d0e0      	beq.n	80004ee <OW_SetUsart+0x4a>
 800052c:	f7ff ffb8 	bl	80004a0 <Error_Handler>
}
 8000530:	e7dd      	b.n	80004ee <OW_SetUsart+0x4a>
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	20000290 	.word	0x20000290
 8000538:	40013800 	.word	0x40013800
 800053c:	08003438 	.word	0x08003438

08000540 <OW_Init>:
{
 8000540:	b510      	push	{r4, lr}
	OW_SetUsart(BR_9600, WL_9BIT);
 8000542:	2100      	movs	r1, #0
 8000544:	2002      	movs	r0, #2
 8000546:	f7ff ffad 	bl	80004a4 <OW_SetUsart>
		SET_BIT(huart1.Instance->RQR, UART_RXDATA_FLUSH_REQUEST);
 800054a:	480d      	ldr	r0, [pc, #52]	; (8000580 <OW_Init+0x40>)
 800054c:	6802      	ldr	r2, [r0, #0]
 800054e:	6993      	ldr	r3, [r2, #24]
 8000550:	2108      	movs	r1, #8
 8000552:	430b      	orrs	r3, r1
 8000554:	6193      	str	r3, [r2, #24]
	HAL_UART_Receive_IT(&huart1, ow_rxbuf, 1);
 8000556:	2201      	movs	r2, #1
 8000558:	490a      	ldr	r1, [pc, #40]	; (8000584 <OW_Init+0x44>)
 800055a:	f002 fb19 	bl	8002b90 <HAL_UART_Receive_IT>
	ow_rxtmr = HAL_GetTick();
 800055e:	f000 ff41 	bl	80013e4 <HAL_GetTick>
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <OW_Init+0x48>)
 8000564:	6018      	str	r0, [r3, #0]
	ow_rxtout = REC_TOUT;
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <OW_Init+0x4c>)
 8000568:	4a09      	ldr	r2, [pc, #36]	; (8000590 <OW_Init+0x50>)
 800056a:	601a      	str	r2, [r3, #0]
	COM_State = RX_START;
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <OW_Init+0x54>)
 800056e:	2204      	movs	r2, #4
 8000570:	701a      	strb	r2, [r3, #0]
	COM_Link = NOLINK;
 8000572:	2300      	movs	r3, #0
 8000574:	4a08      	ldr	r2, [pc, #32]	; (8000598 <OW_Init+0x58>)
 8000576:	7013      	strb	r3, [r2, #0]
	ow_bcnt = 0U;
 8000578:	4a08      	ldr	r2, [pc, #32]	; (800059c <OW_Init+0x5c>)
 800057a:	8013      	strh	r3, [r2, #0]
}
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	20000290 	.word	0x20000290
 8000584:	20000058 	.word	0x20000058
 8000588:	200003b4 	.word	0x200003b4
 800058c:	200003a8 	.word	0x200003a8
 8000590:	0000162e 	.word	0x0000162e
 8000594:	2000003d 	.word	0x2000003d
 8000598:	2000003c 	.word	0x2000003c
 800059c:	200003ac 	.word	0x200003ac

080005a0 <OW_Service>:
{
 80005a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (COM_State != RX_LOCK)
 80005a2:	4bc1      	ldr	r3, [pc, #772]	; (80008a8 <OW_Service+0x308>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d10c      	bne.n	80005c4 <OW_Service+0x24>
	if (COM_State == RX_LOCK)
 80005aa:	4bbf      	ldr	r3, [pc, #764]	; (80008a8 <OW_Service+0x308>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d014      	beq.n	80005dc <OW_Service+0x3c>
	else if (COM_State == RX_READY)
 80005b2:	2b03      	cmp	r3, #3
 80005b4:	d026      	beq.n	8000604 <OW_Service+0x64>
	else if (COM_State == RX_ERROR)
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d100      	bne.n	80005bc <OW_Service+0x1c>
 80005ba:	e16f      	b.n	800089c <OW_Service+0x2fc>
	else if (COM_State == RX_INIT)
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d100      	bne.n	80005c2 <OW_Service+0x22>
 80005c0:	e16f      	b.n	80008a2 <OW_Service+0x302>
}
 80005c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((HAL_GetTick() - ow_rxtmr) >= ow_rxtout) OW_Init();
 80005c4:	f000 ff0e 	bl	80013e4 <HAL_GetTick>
 80005c8:	4bb8      	ldr	r3, [pc, #736]	; (80008ac <OW_Service+0x30c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	1ac0      	subs	r0, r0, r3
 80005ce:	4bb8      	ldr	r3, [pc, #736]	; (80008b0 <OW_Service+0x310>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d3e9      	bcc.n	80005aa <OW_Service+0xa>
 80005d6:	f7ff ffb3 	bl	8000540 <OW_Init>
 80005da:	e7e6      	b.n	80005aa <OW_Service+0xa>
		if (huart1.gState != HAL_UART_STATE_READY)
 80005dc:	4bb5      	ldr	r3, [pc, #724]	; (80008b4 <OW_Service+0x314>)
 80005de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80005e0:	2b20      	cmp	r3, #32
 80005e2:	d00c      	beq.n	80005fe <OW_Service+0x5e>
			if ((HAL_GetTick() - ow_txtmr) >= ow_txtout) COM_State = RX_ERROR;
 80005e4:	f000 fefe 	bl	80013e4 <HAL_GetTick>
 80005e8:	4bb3      	ldr	r3, [pc, #716]	; (80008b8 <OW_Service+0x318>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	1ac0      	subs	r0, r0, r3
 80005ee:	4bb3      	ldr	r3, [pc, #716]	; (80008bc <OW_Service+0x31c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d3e5      	bcc.n	80005c2 <OW_Service+0x22>
 80005f6:	4bac      	ldr	r3, [pc, #688]	; (80008a8 <OW_Service+0x308>)
 80005f8:	2202      	movs	r2, #2
 80005fa:	701a      	strb	r2, [r3, #0]
 80005fc:	e7e1      	b.n	80005c2 <OW_Service+0x22>
		else OW_Init();
 80005fe:	f7ff ff9f 	bl	8000540 <OW_Init>
 8000602:	e7de      	b.n	80005c2 <OW_Service+0x22>
		HAL_Delay(2);
 8000604:	2002      	movs	r0, #2
 8000606:	f000 fef3 	bl	80013f0 <HAL_Delay>
		ZEROFILL(ow_txbuf, COUNTOF(ow_txbuf));
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	4cac      	ldr	r4, [pc, #688]	; (80008c0 <OW_Service+0x320>)
 800060e:	0052      	lsls	r2, r2, #1
 8000610:	2100      	movs	r1, #0
 8000612:	0020      	movs	r0, r4
 8000614:	f7ff fe39 	bl	800028a <mem_set>
		ow_txbuf[3] = 2;  // set two byte response data size
 8000618:	2302      	movs	r3, #2
 800061a:	70e3      	strb	r3, [r4, #3]
		ow_txbuf[4] = NAK;  // set default response to Negativ Acknowledge
 800061c:	3313      	adds	r3, #19
 800061e:	7123      	strb	r3, [r4, #4]
		ow_txbuf[5] = ow_rxbuf[4];  // echo command as default
 8000620:	4ba8      	ldr	r3, [pc, #672]	; (80008c4 <OW_Service+0x324>)
 8000622:	791b      	ldrb	r3, [r3, #4]
 8000624:	7163      	strb	r3, [r4, #5]
		switch (ow_rxbuf[4])
 8000626:	3360      	adds	r3, #96	; 0x60
 8000628:	b2da      	uxtb	r2, r3
 800062a:	2a3e      	cmp	r2, #62	; 0x3e
 800062c:	d83f      	bhi.n	80006ae <OW_Service+0x10e>
 800062e:	0093      	lsls	r3, r2, #2
 8000630:	4aa5      	ldr	r2, [pc, #660]	; (80008c8 <OW_Service+0x328>)
 8000632:	58d3      	ldr	r3, [r2, r3]
 8000634:	469f      	mov	pc, r3
				ow_txbuf[3] = 4;
 8000636:	4ba2      	ldr	r3, [pc, #648]	; (80008c0 <OW_Service+0x320>)
 8000638:	2204      	movs	r2, #4
 800063a:	70da      	strb	r2, [r3, #3]
				ow_txbuf[4] = ow_flags & 0xFF; // new card data ready,  card in stacker, rtc time valid
 800063c:	4aa3      	ldr	r2, [pc, #652]	; (80008cc <OW_Service+0x32c>)
 800063e:	6812      	ldr	r2, [r2, #0]
 8000640:	711a      	strb	r2, [r3, #4]
				ow_txbuf[5] = 0; // all output off
 8000642:	2200      	movs	r2, #0
 8000644:	715a      	strb	r2, [r3, #5]
				if (HAL_GPIO_ReadPin(LED_1_GPIO_Port, LED_1_Pin) == GPIO_PIN_RESET) ow_txbuf[5] |= (1U << 0);
 8000646:	2090      	movs	r0, #144	; 0x90
 8000648:	2101      	movs	r1, #1
 800064a:	05c0      	lsls	r0, r0, #23
 800064c:	f001 f8f0 	bl	8001830 <HAL_GPIO_ReadPin>
 8000650:	2800      	cmp	r0, #0
 8000652:	d104      	bne.n	800065e <OW_Service+0xbe>
 8000654:	4a9a      	ldr	r2, [pc, #616]	; (80008c0 <OW_Service+0x320>)
 8000656:	7953      	ldrb	r3, [r2, #5]
 8000658:	2101      	movs	r1, #1
 800065a:	430b      	orrs	r3, r1
 800065c:	7153      	strb	r3, [r2, #5]
				if (HAL_GPIO_ReadPin(LED_2_GPIO_Port, LED_2_Pin) == GPIO_PIN_RESET) ow_txbuf[5] |= (1U << 1);
 800065e:	2090      	movs	r0, #144	; 0x90
 8000660:	2102      	movs	r1, #2
 8000662:	05c0      	lsls	r0, r0, #23
 8000664:	f001 f8e4 	bl	8001830 <HAL_GPIO_ReadPin>
 8000668:	2800      	cmp	r0, #0
 800066a:	d104      	bne.n	8000676 <OW_Service+0xd6>
 800066c:	4a94      	ldr	r2, [pc, #592]	; (80008c0 <OW_Service+0x320>)
 800066e:	7953      	ldrb	r3, [r2, #5]
 8000670:	2102      	movs	r1, #2
 8000672:	430b      	orrs	r3, r1
 8000674:	7153      	strb	r3, [r2, #5]
				if (HAL_GPIO_ReadPin(LED_3_GPIO_Port, LED_3_Pin) == GPIO_PIN_RESET) ow_txbuf[5] |= (1U << 2);
 8000676:	2090      	movs	r0, #144	; 0x90
 8000678:	2104      	movs	r1, #4
 800067a:	05c0      	lsls	r0, r0, #23
 800067c:	f001 f8d8 	bl	8001830 <HAL_GPIO_ReadPin>
 8000680:	2800      	cmp	r0, #0
 8000682:	d104      	bne.n	800068e <OW_Service+0xee>
 8000684:	4a8e      	ldr	r2, [pc, #568]	; (80008c0 <OW_Service+0x320>)
 8000686:	7953      	ldrb	r3, [r2, #5]
 8000688:	2104      	movs	r1, #4
 800068a:	430b      	orrs	r3, r1
 800068c:	7153      	strb	r3, [r2, #5]
				if (HAL_GPIO_ReadPin(LED_4_GPIO_Port, LED_4_Pin) == GPIO_PIN_RESET) ow_txbuf[5] |= (1U << 3);
 800068e:	2090      	movs	r0, #144	; 0x90
 8000690:	2108      	movs	r1, #8
 8000692:	05c0      	lsls	r0, r0, #23
 8000694:	f001 f8cc 	bl	8001830 <HAL_GPIO_ReadPin>
 8000698:	2800      	cmp	r0, #0
 800069a:	d104      	bne.n	80006a6 <OW_Service+0x106>
 800069c:	4a88      	ldr	r2, [pc, #544]	; (80008c0 <OW_Service+0x320>)
 800069e:	7953      	ldrb	r3, [r2, #5]
 80006a0:	2108      	movs	r1, #8
 80006a2:	430b      	orrs	r3, r1
 80006a4:	7153      	strb	r3, [r2, #5]
				ow_txbuf[6] = 0; // optional NTC temperature sensor LSB
 80006a6:	4b86      	ldr	r3, [pc, #536]	; (80008c0 <OW_Service+0x320>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	719a      	strb	r2, [r3, #6]
				ow_txbuf[7] = 0; // optional NTC temperature sensor LSB
 80006ac:	71da      	strb	r2, [r3, #7]
		if (COM_Link == P2P)
 80006ae:	4b88      	ldr	r3, [pc, #544]	; (80008d0 <OW_Service+0x330>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d100      	bne.n	80006b8 <OW_Service+0x118>
 80006b6:	e0d8      	b.n	800086a <OW_Service+0x2ca>
		COM_State = RX_LOCK;
 80006b8:	4b7b      	ldr	r3, [pc, #492]	; (80008a8 <OW_Service+0x308>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]
		ow_txtout = OW_PKTIME;
 80006be:	4b7f      	ldr	r3, [pc, #508]	; (80008bc <OW_Service+0x31c>)
 80006c0:	32c8      	adds	r2, #200	; 0xc8
 80006c2:	32ff      	adds	r2, #255	; 0xff
 80006c4:	601a      	str	r2, [r3, #0]
		ow_txtmr = HAL_GetTick();
 80006c6:	f000 fe8d 	bl	80013e4 <HAL_GetTick>
 80006ca:	4b7b      	ldr	r3, [pc, #492]	; (80008b8 <OW_Service+0x318>)
 80006cc:	6018      	str	r0, [r3, #0]
		if (ow_rxbuf[4] == RESTART_CTRL) NVIC_SystemReset();
 80006ce:	4b7d      	ldr	r3, [pc, #500]	; (80008c4 <OW_Service+0x324>)
 80006d0:	791b      	ldrb	r3, [r3, #4]
 80006d2:	2bc0      	cmp	r3, #192	; 0xc0
 80006d4:	d000      	beq.n	80006d8 <OW_Service+0x138>
 80006d6:	e774      	b.n	80005c2 <OW_Service+0x22>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006d8:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006dc:	4b7d      	ldr	r3, [pc, #500]	; (80008d4 <OW_Service+0x334>)
 80006de:	4a7e      	ldr	r2, [pc, #504]	; (80008d8 <OW_Service+0x338>)
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	e7fd      	b.n	80006e6 <OW_Service+0x146>
				ow_txbuf[3] = 44;
 80006ea:	4c75      	ldr	r4, [pc, #468]	; (80008c0 <OW_Service+0x320>)
 80006ec:	252c      	movs	r5, #44	; 0x2c
 80006ee:	70e5      	strb	r5, [r4, #3]
				ow_txbuf[4] = ACK;
 80006f0:	2306      	movs	r3, #6
 80006f2:	7123      	strb	r3, [r4, #4]
				mem_cpy(&ow_txbuf[6], sys_id, 2);
 80006f4:	1da0      	adds	r0, r4, #6
 80006f6:	2202      	movs	r2, #2
 80006f8:	4978      	ldr	r1, [pc, #480]	; (80008dc <OW_Service+0x33c>)
 80006fa:	f7ff fdbc 	bl	8000276 <mem_cpy>
				mem_cpy(&ow_txbuf[8], mifare_keya, 6);
 80006fe:	0020      	movs	r0, r4
 8000700:	3008      	adds	r0, #8
 8000702:	2206      	movs	r2, #6
 8000704:	4976      	ldr	r1, [pc, #472]	; (80008e0 <OW_Service+0x340>)
 8000706:	f7ff fdb6 	bl	8000276 <mem_cpy>
				mem_cpy(&ow_txbuf[14], mifare_keyb, 6);
 800070a:	0020      	movs	r0, r4
 800070c:	300e      	adds	r0, #14
 800070e:	2206      	movs	r2, #6
 8000710:	4974      	ldr	r1, [pc, #464]	; (80008e4 <OW_Service+0x344>)
 8000712:	f7ff fdb0 	bl	8000276 <mem_cpy>
				mem_cpy(&ow_txbuf[20], user_group, 16);
 8000716:	0020      	movs	r0, r4
 8000718:	3014      	adds	r0, #20
 800071a:	2210      	movs	r2, #16
 800071c:	4972      	ldr	r1, [pc, #456]	; (80008e8 <OW_Service+0x348>)
 800071e:	f7ff fdaa 	bl	8000276 <mem_cpy>
				ow_txbuf[36] = 'C';
 8000722:	2324      	movs	r3, #36	; 0x24
 8000724:	2243      	movs	r2, #67	; 0x43
 8000726:	54e2      	strb	r2, [r4, r3]
				ow_txbuf[37] = 'S';
 8000728:	3301      	adds	r3, #1
 800072a:	3210      	adds	r2, #16
 800072c:	54e2      	strb	r2, [r4, r3]
				ow_txbuf[44] = version >> 16;
 800072e:	4b6f      	ldr	r3, [pc, #444]	; (80008ec <OW_Service+0x34c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	0c1a      	lsrs	r2, r3, #16
 8000734:	5562      	strb	r2, [r4, r5]
				ow_txbuf[45] = version >> 8;
 8000736:	0a1a      	lsrs	r2, r3, #8
 8000738:	272d      	movs	r7, #45	; 0x2d
 800073a:	55e2      	strb	r2, [r4, r7]
				ow_txbuf[46] = version;
 800073c:	262e      	movs	r6, #46	; 0x2e
 800073e:	55a3      	strb	r3, [r4, r6]
				Hex2Str((char*) &ow_txbuf[38], &ow_txbuf[44], 6);
 8000740:	0021      	movs	r1, r4
 8000742:	312c      	adds	r1, #44	; 0x2c
 8000744:	0020      	movs	r0, r4
 8000746:	3026      	adds	r0, #38	; 0x26
 8000748:	2206      	movs	r2, #6
 800074a:	f7ff fd69 	bl	8000220 <Hex2Str>
				ow_txbuf[44] = '1';
 800074e:	2331      	movs	r3, #49	; 0x31
 8000750:	5563      	strb	r3, [r4, r5]
				ow_txbuf[45] = '2';
 8000752:	3301      	adds	r3, #1
 8000754:	55e3      	strb	r3, [r4, r7]
				ow_txbuf[46] = '3';
 8000756:	3301      	adds	r3, #1
 8000758:	55a3      	strb	r3, [r4, r6]
				ow_txbuf[47] = '4';
 800075a:	3b04      	subs	r3, #4
 800075c:	2234      	movs	r2, #52	; 0x34
 800075e:	54e2      	strb	r2, [r4, r3]
				ow_txbuf[48] = '\0';
 8000760:	3301      	adds	r3, #1
 8000762:	2200      	movs	r2, #0
 8000764:	54e2      	strb	r2, [r4, r3]
				break;
 8000766:	e7a2      	b.n	80006ae <OW_Service+0x10e>
				mem_cpy(sys_id, &ow_rxbuf[5], 2);
 8000768:	4c61      	ldr	r4, [pc, #388]	; (80008f0 <OW_Service+0x350>)
 800076a:	2202      	movs	r2, #2
 800076c:	0021      	movs	r1, r4
 800076e:	485b      	ldr	r0, [pc, #364]	; (80008dc <OW_Service+0x33c>)
 8000770:	f7ff fd81 	bl	8000276 <mem_cpy>
				mem_cpy(mifare_keya, &ow_rxbuf[7], 6);
 8000774:	1ca1      	adds	r1, r4, #2
 8000776:	2206      	movs	r2, #6
 8000778:	4859      	ldr	r0, [pc, #356]	; (80008e0 <OW_Service+0x340>)
 800077a:	f7ff fd7c 	bl	8000276 <mem_cpy>
				mem_cpy(mifare_keyb, &ow_rxbuf[13], 6);
 800077e:	0021      	movs	r1, r4
 8000780:	3108      	adds	r1, #8
 8000782:	2206      	movs	r2, #6
 8000784:	4857      	ldr	r0, [pc, #348]	; (80008e4 <OW_Service+0x344>)
 8000786:	f7ff fd76 	bl	8000276 <mem_cpy>
				mem_cpy(user_group, &ow_rxbuf[19], 16);
 800078a:	0021      	movs	r1, r4
 800078c:	310e      	adds	r1, #14
 800078e:	2210      	movs	r2, #16
 8000790:	4855      	ldr	r0, [pc, #340]	; (80008e8 <OW_Service+0x348>)
 8000792:	f7ff fd70 	bl	8000276 <mem_cpy>
				ow_txbuf[4] = ACK;
 8000796:	4b4a      	ldr	r3, [pc, #296]	; (80008c0 <OW_Service+0x320>)
 8000798:	2206      	movs	r2, #6
 800079a:	711a      	strb	r2, [r3, #4]
				break;
 800079c:	e787      	b.n	80006ae <OW_Service+0x10e>
				sDate.WeekDay = ow_rxbuf[5];
 800079e:	4b49      	ldr	r3, [pc, #292]	; (80008c4 <OW_Service+0x324>)
 80007a0:	795b      	ldrb	r3, [r3, #5]
 80007a2:	4a54      	ldr	r2, [pc, #336]	; (80008f4 <OW_Service+0x354>)
 80007a4:	7013      	strb	r3, [r2, #0]
				if (sDate.WeekDay == 0) sDate.WeekDay = 7;
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d102      	bne.n	80007b0 <OW_Service+0x210>
 80007aa:	0013      	movs	r3, r2
 80007ac:	2207      	movs	r2, #7
 80007ae:	701a      	strb	r2, [r3, #0]
				sDate.Date = ow_rxbuf[6];
 80007b0:	4b44      	ldr	r3, [pc, #272]	; (80008c4 <OW_Service+0x324>)
 80007b2:	799a      	ldrb	r2, [r3, #6]
 80007b4:	4c4f      	ldr	r4, [pc, #316]	; (80008f4 <OW_Service+0x354>)
 80007b6:	70a2      	strb	r2, [r4, #2]
				sDate.Month = ow_rxbuf[7];
 80007b8:	79da      	ldrb	r2, [r3, #7]
 80007ba:	7062      	strb	r2, [r4, #1]
				sDate.Year = ow_rxbuf[8];
 80007bc:	7a1a      	ldrb	r2, [r3, #8]
 80007be:	70e2      	strb	r2, [r4, #3]
				sTime.Hours = ow_rxbuf[9];
 80007c0:	7a5a      	ldrb	r2, [r3, #9]
 80007c2:	494d      	ldr	r1, [pc, #308]	; (80008f8 <OW_Service+0x358>)
 80007c4:	700a      	strb	r2, [r1, #0]
				sTime.Minutes = ow_rxbuf[10];
 80007c6:	7a9a      	ldrb	r2, [r3, #10]
 80007c8:	704a      	strb	r2, [r1, #1]
				sTime.Seconds = ow_rxbuf[11];
 80007ca:	7adb      	ldrb	r3, [r3, #11]
 80007cc:	708b      	strb	r3, [r1, #2]
				HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80007ce:	4d4b      	ldr	r5, [pc, #300]	; (80008fc <OW_Service+0x35c>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	0028      	movs	r0, r5
 80007d4:	f001 fca4 	bl	8002120 <HAL_RTC_SetTime>
				HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80007d8:	2201      	movs	r2, #1
 80007da:	0021      	movs	r1, r4
 80007dc:	0028      	movs	r0, r5
 80007de:	f001 fd1d 	bl	800221c <HAL_RTC_SetDate>
				RtcValidSet();
 80007e2:	4a3a      	ldr	r2, [pc, #232]	; (80008cc <OW_Service+0x32c>)
 80007e4:	2304      	movs	r3, #4
 80007e6:	6811      	ldr	r1, [r2, #0]
 80007e8:	430b      	orrs	r3, r1
 80007ea:	6013      	str	r3, [r2, #0]
				ow_txbuf[4] = ACK;
 80007ec:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <OW_Service+0x320>)
 80007ee:	2206      	movs	r2, #6
 80007f0:	711a      	strb	r2, [r3, #4]
				break;
 80007f2:	e75c      	b.n	80006ae <OW_Service+0x10e>
				if (RC522_ReadBlock(ow_rxbuf[5], &ow_rxbuf[6]) == 0) ow_txbuf[4] = ACK;
 80007f4:	4942      	ldr	r1, [pc, #264]	; (8000900 <OW_Service+0x360>)
 80007f6:	1f8b      	subs	r3, r1, #6
 80007f8:	7958      	ldrb	r0, [r3, #5]
 80007fa:	f000 fc5b 	bl	80010b4 <RC522_ReadBlock>
 80007fe:	2800      	cmp	r0, #0
 8000800:	d000      	beq.n	8000804 <OW_Service+0x264>
 8000802:	e754      	b.n	80006ae <OW_Service+0x10e>
 8000804:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <OW_Service+0x320>)
 8000806:	2206      	movs	r2, #6
 8000808:	711a      	strb	r2, [r3, #4]
 800080a:	e750      	b.n	80006ae <OW_Service+0x10e>
				if (RC522_WriteBlock(ow_rxbuf[5], &ow_rxbuf[6]) == 0) ow_txbuf[4] = ACK;
 800080c:	493c      	ldr	r1, [pc, #240]	; (8000900 <OW_Service+0x360>)
 800080e:	1f8b      	subs	r3, r1, #6
 8000810:	7958      	ldrb	r0, [r3, #5]
 8000812:	f000 fc77 	bl	8001104 <RC522_WriteBlock>
 8000816:	2800      	cmp	r0, #0
 8000818:	d000      	beq.n	800081c <OW_Service+0x27c>
 800081a:	e748      	b.n	80006ae <OW_Service+0x10e>
 800081c:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <OW_Service+0x320>)
 800081e:	2206      	movs	r2, #6
 8000820:	711a      	strb	r2, [r3, #4]
 8000822:	e744      	b.n	80006ae <OW_Service+0x10e>
				CardReadyReset();
 8000824:	4a29      	ldr	r2, [pc, #164]	; (80008cc <OW_Service+0x32c>)
 8000826:	2301      	movs	r3, #1
 8000828:	6811      	ldr	r1, [r2, #0]
 800082a:	4399      	bics	r1, r3
 800082c:	6011      	str	r1, [r2, #0]
				ow_txbuf[3] = 17;
 800082e:	4c24      	ldr	r4, [pc, #144]	; (80008c0 <OW_Service+0x320>)
 8000830:	2311      	movs	r3, #17
 8000832:	70e3      	strb	r3, [r4, #3]
				ow_txbuf[4] = sCard.card_status;
 8000834:	4d33      	ldr	r5, [pc, #204]	; (8000904 <OW_Service+0x364>)
 8000836:	782b      	ldrb	r3, [r5, #0]
 8000838:	7123      	strb	r3, [r4, #4]
				ow_txbuf[5] = sCard.user_group;
 800083a:	786b      	ldrb	r3, [r5, #1]
 800083c:	7163      	strb	r3, [r4, #5]
				ow_txbuf[6] = sCard.system_id >> 8;
 800083e:	886b      	ldrh	r3, [r5, #2]
 8000840:	0a1a      	lsrs	r2, r3, #8
 8000842:	71a2      	strb	r2, [r4, #6]
				ow_txbuf[7] = sCard.system_id & 0xFF;
 8000844:	71e3      	strb	r3, [r4, #7]
				ow_txbuf[8] = sCard.controller_id >> 8;
 8000846:	88ab      	ldrh	r3, [r5, #4]
 8000848:	0a1a      	lsrs	r2, r3, #8
 800084a:	7222      	strb	r2, [r4, #8]
				ow_txbuf[9] = sCard.controller_id & 0xFF;
 800084c:	7263      	strb	r3, [r4, #9]
				mem_cpy(&ow_txbuf[10], &sCard.expiry_time, 6);
 800084e:	1da9      	adds	r1, r5, #6
 8000850:	0020      	movs	r0, r4
 8000852:	300a      	adds	r0, #10
 8000854:	2206      	movs	r2, #6
 8000856:	f7ff fd0e 	bl	8000276 <mem_cpy>
				mem_cpy(&ow_txbuf[16], &sCard.card_id, 5);
 800085a:	0029      	movs	r1, r5
 800085c:	310c      	adds	r1, #12
 800085e:	0020      	movs	r0, r4
 8000860:	3010      	adds	r0, #16
 8000862:	2205      	movs	r2, #5
 8000864:	f7ff fd07 	bl	8000276 <mem_cpy>
				break;
 8000868:	e721      	b.n	80006ae <OW_Service+0x10e>
			CRC_ResetDR();
 800086a:	f000 fe4b 	bl	8001504 <CRC_ResetDR>
			ow_txbuf[0] = STX;
 800086e:	4c14      	ldr	r4, [pc, #80]	; (80008c0 <OW_Service+0x320>)
 8000870:	2302      	movs	r3, #2
 8000872:	7023      	strb	r3, [r4, #0]
			ow_txbuf[1] = ow_rxbuf[2];
 8000874:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <OW_Service+0x324>)
 8000876:	789a      	ldrb	r2, [r3, #2]
 8000878:	7062      	strb	r2, [r4, #1]
			ow_txbuf[2] = ow_rxbuf[1];
 800087a:	785b      	ldrb	r3, [r3, #1]
 800087c:	70a3      	strb	r3, [r4, #2]
			ow_txbuf[ow_txbuf[3] + 4] = (uint8_t) CRC_Calculate8(ow_txbuf, ow_txbuf[3] + 4);
 800087e:	78e1      	ldrb	r1, [r4, #3]
 8000880:	3104      	adds	r1, #4
 8000882:	0020      	movs	r0, r4
 8000884:	f000 fe30 	bl	80014e8 <CRC_Calculate8>
 8000888:	78e3      	ldrb	r3, [r4, #3]
 800088a:	3304      	adds	r3, #4
 800088c:	54e0      	strb	r0, [r4, r3]
			HAL_UART_Transmit_IT(&huart1, ow_txbuf, ow_txbuf[3] + 5);
 800088e:	78e2      	ldrb	r2, [r4, #3]
 8000890:	3205      	adds	r2, #5
 8000892:	0021      	movs	r1, r4
 8000894:	4807      	ldr	r0, [pc, #28]	; (80008b4 <OW_Service+0x314>)
 8000896:	f002 f933 	bl	8002b00 <HAL_UART_Transmit_IT>
 800089a:	e70d      	b.n	80006b8 <OW_Service+0x118>
		OW_Init();
 800089c:	f7ff fe50 	bl	8000540 <OW_Init>
 80008a0:	e68f      	b.n	80005c2 <OW_Service+0x22>
		OW_Init();
 80008a2:	f7ff fe4d 	bl	8000540 <OW_Init>
}
 80008a6:	e68c      	b.n	80005c2 <OW_Service+0x22>
 80008a8:	2000003d 	.word	0x2000003d
 80008ac:	200003b4 	.word	0x200003b4
 80008b0:	200003a8 	.word	0x200003a8
 80008b4:	20000290 	.word	0x20000290
 80008b8:	20000398 	.word	0x20000398
 80008bc:	2000039c 	.word	0x2000039c
 80008c0:	20000158 	.word	0x20000158
 80008c4:	20000058 	.word	0x20000058
 80008c8:	08003460 	.word	0x08003460
 80008cc:	200003b0 	.word	0x200003b0
 80008d0:	2000003c 	.word	0x2000003c
 80008d4:	e000ed00 	.word	0xe000ed00
 80008d8:	05fa0004 	.word	0x05fa0004
 80008dc:	20000260 	.word	0x20000260
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000264 	.word	0x20000264
 80008ec:	0800358c 	.word	0x0800358c
 80008f0:	2000005d 	.word	0x2000005d
 80008f4:	20000040 	.word	0x20000040
 80008f8:	20000044 	.word	0x20000044
 80008fc:	20000310 	.word	0x20000310
 8000900:	2000005e 	.word	0x2000005e
 8000904:	20000410 	.word	0x20000410

08000908 <HAL_UART_RxCpltCallback>:
{
 8000908:	b570      	push	{r4, r5, r6, lr}
	switch (COM_State)
 800090a:	4b40      	ldr	r3, [pc, #256]	; (8000a0c <HAL_UART_RxCpltCallback+0x104>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	3b04      	subs	r3, #4
 8000910:	b2da      	uxtb	r2, r3
 8000912:	2a05      	cmp	r2, #5
 8000914:	d839      	bhi.n	800098a <HAL_UART_RxCpltCallback+0x82>
 8000916:	0093      	lsls	r3, r2, #2
 8000918:	4a3d      	ldr	r2, [pc, #244]	; (8000a10 <HAL_UART_RxCpltCallback+0x108>)
 800091a:	58d3      	ldr	r3, [r2, r3]
 800091c:	469f      	mov	pc, r3
			OW_SetUsart(BR_9600, WL_8BIT);
 800091e:	2101      	movs	r1, #1
 8000920:	2002      	movs	r0, #2
 8000922:	f7ff fdbf 	bl	80004a4 <OW_SetUsart>
			if (ow_rxbuf[ow_bcnt] == STX) COM_State = RX_RECADDR;
 8000926:	4b3b      	ldr	r3, [pc, #236]	; (8000a14 <HAL_UART_RxCpltCallback+0x10c>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	4a3b      	ldr	r2, [pc, #236]	; (8000a18 <HAL_UART_RxCpltCallback+0x110>)
 800092c:	5cd3      	ldrb	r3, [r2, r3]
 800092e:	2b02      	cmp	r3, #2
 8000930:	d003      	beq.n	800093a <HAL_UART_RxCpltCallback+0x32>
			else COM_State = RX_INIT;
 8000932:	4b36      	ldr	r3, [pc, #216]	; (8000a0c <HAL_UART_RxCpltCallback+0x104>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	e027      	b.n	800098a <HAL_UART_RxCpltCallback+0x82>
			if (ow_rxbuf[ow_bcnt] == STX) COM_State = RX_RECADDR;
 800093a:	4b34      	ldr	r3, [pc, #208]	; (8000a0c <HAL_UART_RxCpltCallback+0x104>)
 800093c:	2205      	movs	r2, #5
 800093e:	701a      	strb	r2, [r3, #0]
 8000940:	e023      	b.n	800098a <HAL_UART_RxCpltCallback+0x82>
			if (ow_rxbuf[ow_bcnt] == DEF_CR_OWIFA) COM_Link = P2P;
 8000942:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <HAL_UART_RxCpltCallback+0x10c>)
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	4a34      	ldr	r2, [pc, #208]	; (8000a18 <HAL_UART_RxCpltCallback+0x110>)
 8000948:	5cd3      	ldrb	r3, [r2, r3]
 800094a:	2b02      	cmp	r3, #2
 800094c:	d007      	beq.n	800095e <HAL_UART_RxCpltCallback+0x56>
			else if (ow_rxbuf[ow_bcnt] == DEF_CR_OWGRA) COM_Link = GROUP;
 800094e:	2b0a      	cmp	r3, #10
 8000950:	d010      	beq.n	8000974 <HAL_UART_RxCpltCallback+0x6c>
			else if (ow_rxbuf[ow_bcnt] == DEF_OWBRA) COM_Link = BROADCAST;
 8000952:	2b7f      	cmp	r3, #127	; 0x7f
 8000954:	d106      	bne.n	8000964 <HAL_UART_RxCpltCallback+0x5c>
 8000956:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <HAL_UART_RxCpltCallback+0x114>)
 8000958:	2203      	movs	r2, #3
 800095a:	701a      	strb	r2, [r3, #0]
 800095c:	e002      	b.n	8000964 <HAL_UART_RxCpltCallback+0x5c>
			if (ow_rxbuf[ow_bcnt] == DEF_CR_OWIFA) COM_Link = P2P;
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <HAL_UART_RxCpltCallback+0x114>)
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
			if (COM_Link == NOLINK) COM_State = RX_INIT;
 8000964:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <HAL_UART_RxCpltCallback+0x114>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d107      	bne.n	800097c <HAL_UART_RxCpltCallback+0x74>
 800096c:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <HAL_UART_RxCpltCallback+0x104>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
 8000972:	e00a      	b.n	800098a <HAL_UART_RxCpltCallback+0x82>
			else if (ow_rxbuf[ow_bcnt] == DEF_CR_OWGRA) COM_Link = GROUP;
 8000974:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <HAL_UART_RxCpltCallback+0x114>)
 8000976:	2202      	movs	r2, #2
 8000978:	701a      	strb	r2, [r3, #0]
 800097a:	e7f3      	b.n	8000964 <HAL_UART_RxCpltCallback+0x5c>
			else COM_State = RX_SNDADDR;
 800097c:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <HAL_UART_RxCpltCallback+0x104>)
 800097e:	2206      	movs	r2, #6
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	e002      	b.n	800098a <HAL_UART_RxCpltCallback+0x82>
			COM_State = RX_SIZE;
 8000984:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <HAL_UART_RxCpltCallback+0x104>)
 8000986:	2207      	movs	r2, #7
 8000988:	701a      	strb	r2, [r3, #0]
	if (COM_State <= RX_READY) return;
 800098a:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <HAL_UART_RxCpltCallback+0x104>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d828      	bhi.n	80009e4 <HAL_UART_RxCpltCallback+0xdc>
}
 8000992:	bd70      	pop	{r4, r5, r6, pc}
			COM_State = RX_PAYLOAD;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <HAL_UART_RxCpltCallback+0x104>)
 8000996:	2208      	movs	r2, #8
 8000998:	701a      	strb	r2, [r3, #0]
			break;
 800099a:	e7f6      	b.n	800098a <HAL_UART_RxCpltCallback+0x82>
			if (ow_rxbuf[3] == (ow_bcnt - 3)) COM_State = RX_CRC8;
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <HAL_UART_RxCpltCallback+0x110>)
 800099e:	78da      	ldrb	r2, [r3, #3]
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <HAL_UART_RxCpltCallback+0x10c>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	3b03      	subs	r3, #3
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d1ef      	bne.n	800098a <HAL_UART_RxCpltCallback+0x82>
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_UART_RxCpltCallback+0x104>)
 80009ac:	2209      	movs	r2, #9
 80009ae:	701a      	strb	r2, [r3, #0]
 80009b0:	e7eb      	b.n	800098a <HAL_UART_RxCpltCallback+0x82>
			__HAL_CRC_DR_RESET(&hcrc);
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <HAL_UART_RxCpltCallback+0x118>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	6893      	ldr	r3, [r2, #8]
 80009b8:	2101      	movs	r1, #1
 80009ba:	430b      	orrs	r3, r1
 80009bc:	6093      	str	r3, [r2, #8]
			crc8 = CRC_Calculate8(ow_rxbuf, ow_bcnt);
 80009be:	4d15      	ldr	r5, [pc, #84]	; (8000a14 <HAL_UART_RxCpltCallback+0x10c>)
 80009c0:	8829      	ldrh	r1, [r5, #0]
 80009c2:	4c15      	ldr	r4, [pc, #84]	; (8000a18 <HAL_UART_RxCpltCallback+0x110>)
 80009c4:	0020      	movs	r0, r4
 80009c6:	f000 fd8f 	bl	80014e8 <CRC_Calculate8>
 80009ca:	b2c0      	uxtb	r0, r0
			if (crc8 == ow_rxbuf[ow_bcnt]) COM_State = RX_READY;
 80009cc:	882b      	ldrh	r3, [r5, #0]
 80009ce:	5ce3      	ldrb	r3, [r4, r3]
 80009d0:	4283      	cmp	r3, r0
 80009d2:	d003      	beq.n	80009dc <HAL_UART_RxCpltCallback+0xd4>
			else COM_State = RX_INIT;
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <HAL_UART_RxCpltCallback+0x104>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
 80009da:	e7d6      	b.n	800098a <HAL_UART_RxCpltCallback+0x82>
			if (crc8 == ow_rxbuf[ow_bcnt]) COM_State = RX_READY;
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_UART_RxCpltCallback+0x104>)
 80009de:	2203      	movs	r2, #3
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	e7d2      	b.n	800098a <HAL_UART_RxCpltCallback+0x82>
	++ow_bcnt;
 80009e4:	4c0b      	ldr	r4, [pc, #44]	; (8000a14 <HAL_UART_RxCpltCallback+0x10c>)
 80009e6:	8823      	ldrh	r3, [r4, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	8023      	strh	r3, [r4, #0]
	ow_rxtout = RX_TOUT;
 80009ec:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <HAL_UART_RxCpltCallback+0x11c>)
 80009ee:	2203      	movs	r2, #3
 80009f0:	601a      	str	r2, [r3, #0]
	ow_rxtmr = HAL_GetTick();
 80009f2:	f000 fcf7 	bl	80013e4 <HAL_GetTick>
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_UART_RxCpltCallback+0x120>)
 80009f8:	6018      	str	r0, [r3, #0]
	HAL_UART_Receive_IT(&huart1, &ow_rxbuf[ow_bcnt], 1);
 80009fa:	8821      	ldrh	r1, [r4, #0]
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_UART_RxCpltCallback+0x110>)
 80009fe:	18c9      	adds	r1, r1, r3
 8000a00:	2201      	movs	r2, #1
 8000a02:	480a      	ldr	r0, [pc, #40]	; (8000a2c <HAL_UART_RxCpltCallback+0x124>)
 8000a04:	f002 f8c4 	bl	8002b90 <HAL_UART_Receive_IT>
 8000a08:	e7c3      	b.n	8000992 <HAL_UART_RxCpltCallback+0x8a>
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	2000003d 	.word	0x2000003d
 8000a10:	0800355c 	.word	0x0800355c
 8000a14:	200003ac 	.word	0x200003ac
 8000a18:	20000058 	.word	0x20000058
 8000a1c:	2000003c 	.word	0x2000003c
 8000a20:	20000274 	.word	0x20000274
 8000a24:	200003a8 	.word	0x200003a8
 8000a28:	200003b4 	.word	0x200003b4
 8000a2c:	20000290 	.word	0x20000290

08000a30 <HAL_UART_ErrorCallback>:
{
 8000a30:	b510      	push	{r4, lr}
	__HAL_UART_CLEAR_PEFLAG(huart);
 8000a32:	6803      	ldr	r3, [r0, #0]
 8000a34:	2201      	movs	r2, #1
 8000a36:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FEFLAG(huart);
 8000a38:	6803      	ldr	r3, [r0, #0]
 8000a3a:	3201      	adds	r2, #1
 8000a3c:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8000a3e:	6803      	ldr	r3, [r0, #0]
 8000a40:	2104      	movs	r1, #4
 8000a42:	6219      	str	r1, [r3, #32]
	__HAL_UART_CLEAR_IDLEFLAG(huart);
 8000a44:	6803      	ldr	r3, [r0, #0]
 8000a46:	310c      	adds	r1, #12
 8000a48:	6219      	str	r1, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8000a4a:	6803      	ldr	r3, [r0, #0]
 8000a4c:	2408      	movs	r4, #8
 8000a4e:	621c      	str	r4, [r3, #32]
		SET_BIT(huart->Instance->RQR, UART_RXDATA_FLUSH_REQUEST);
 8000a50:	6801      	ldr	r1, [r0, #0]
 8000a52:	698b      	ldr	r3, [r1, #24]
 8000a54:	4323      	orrs	r3, r4
 8000a56:	618b      	str	r3, [r1, #24]
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	67c3      	str	r3, [r0, #124]	; 0x7c
	COM_State = RX_ERROR;
 8000a5c:	4b01      	ldr	r3, [pc, #4]	; (8000a64 <HAL_UART_ErrorCallback+0x34>)
 8000a5e:	701a      	strb	r2, [r3, #0]
}
 8000a60:	bd10      	pop	{r4, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	2000003d 	.word	0x2000003d

08000a68 <RC522_WriteRegister>:
 * @brief
 * @param
 * @retval
 */
static void RC522_WriteRegister(uint8_t addr, uint8_t val)
{
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	0005      	movs	r5, r0
 8000a6e:	000e      	movs	r6, r1
	uint8_t tx[2];
	
	mRC522_ChipSelect();
 8000a70:	2490      	movs	r4, #144	; 0x90
 8000a72:	05e4      	lsls	r4, r4, #23
 8000a74:	2200      	movs	r2, #0
 8000a76:	2110      	movs	r1, #16
 8000a78:	0020      	movs	r0, r4
 8000a7a:	f000 fee0 	bl	800183e <HAL_GPIO_WritePin>
	tx[0] = (addr << 1) & 0x7E;
 8000a7e:	006d      	lsls	r5, r5, #1
 8000a80:	207e      	movs	r0, #126	; 0x7e
 8000a82:	4028      	ands	r0, r5
 8000a84:	a901      	add	r1, sp, #4
 8000a86:	7008      	strb	r0, [r1, #0]
	tx[1] = val;
 8000a88:	704e      	strb	r6, [r1, #1]
	HAL_SPI_Transmit(&hspi1, tx, 2, 10);
 8000a8a:	230a      	movs	r3, #10
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <RC522_WriteRegister+0x3c>)
 8000a90:	f001 fd6c 	bl	800256c <HAL_SPI_Transmit>
	mRC522_ChipRelease();
 8000a94:	2201      	movs	r2, #1
 8000a96:	2110      	movs	r1, #16
 8000a98:	0020      	movs	r0, r4
 8000a9a:	f000 fed0 	bl	800183e <HAL_GPIO_WritePin>
}
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd70      	pop	{r4, r5, r6, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	20000330 	.word	0x20000330

08000aa8 <RC522_ReadRegister>:
{
 8000aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	0007      	movs	r7, r0
	uint8_t tx[2] =
 8000aae:	ad03      	add	r5, sp, #12
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	702b      	strb	r3, [r5, #0]
 8000ab4:	706b      	strb	r3, [r5, #1]
	uint8_t rx[2] =
 8000ab6:	ac02      	add	r4, sp, #8
 8000ab8:	7023      	strb	r3, [r4, #0]
 8000aba:	7063      	strb	r3, [r4, #1]
	mRC522_ChipSelect();
 8000abc:	2690      	movs	r6, #144	; 0x90
 8000abe:	05f6      	lsls	r6, r6, #23
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	0030      	movs	r0, r6
 8000ac6:	f000 feba 	bl	800183e <HAL_GPIO_WritePin>
	tx[0] = ((addr << 1) & 0x7E) | 0x80;
 8000aca:	007f      	lsls	r7, r7, #1
 8000acc:	237e      	movs	r3, #126	; 0x7e
 8000ace:	403b      	ands	r3, r7
 8000ad0:	2080      	movs	r0, #128	; 0x80
 8000ad2:	4240      	negs	r0, r0
 8000ad4:	4318      	orrs	r0, r3
 8000ad6:	7028      	strb	r0, [r5, #0]
	HAL_SPI_TransmitReceive(&hspi1, tx, rx, 2, 10);
 8000ad8:	230a      	movs	r3, #10
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	3b08      	subs	r3, #8
 8000ade:	0022      	movs	r2, r4
 8000ae0:	0029      	movs	r1, r5
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <RC522_ReadRegister+0x50>)
 8000ae4:	f001 fe32 	bl	800274c <HAL_SPI_TransmitReceive>
	mRC522_ChipRelease();
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2110      	movs	r1, #16
 8000aec:	0030      	movs	r0, r6
 8000aee:	f000 fea6 	bl	800183e <HAL_GPIO_WritePin>
	return (rx[1]);
 8000af2:	7860      	ldrb	r0, [r4, #1]
}
 8000af4:	b005      	add	sp, #20
 8000af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000af8:	20000330 	.word	0x20000330

08000afc <RC522_SetBitMask>:
 * @brief
 * @param
 * @retval
 */
static void RC522_SetBitMask(uint8_t reg, uint8_t mask)
{
 8000afc:	b570      	push	{r4, r5, r6, lr}
 8000afe:	0004      	movs	r4, r0
 8000b00:	000d      	movs	r5, r1
	RC522_WriteRegister(reg, RC522_ReadRegister(reg) | mask);
 8000b02:	f7ff ffd1 	bl	8000aa8 <RC522_ReadRegister>
 8000b06:	4328      	orrs	r0, r5
 8000b08:	b2c1      	uxtb	r1, r0
 8000b0a:	0020      	movs	r0, r4
 8000b0c:	f7ff ffac 	bl	8000a68 <RC522_WriteRegister>
}
 8000b10:	bd70      	pop	{r4, r5, r6, pc}

08000b12 <RC522_AntennaOn>:
 * @brief
 * @param
 * @retval
 */
static void RC522_AntennaOn(void)
{
 8000b12:	b510      	push	{r4, lr}
	uint8_t temp;

	temp = RC522_ReadRegister(RC522_REG_TX_CONTROL);
 8000b14:	2014      	movs	r0, #20
 8000b16:	f7ff ffc7 	bl	8000aa8 <RC522_ReadRegister>
	if ((temp & 0x03U) == 0U) RC522_SetBitMask(RC522_REG_TX_CONTROL, 0x03U);
 8000b1a:	0783      	lsls	r3, r0, #30
 8000b1c:	d000      	beq.n	8000b20 <RC522_AntennaOn+0xe>
}
 8000b1e:	bd10      	pop	{r4, pc}
	if ((temp & 0x03U) == 0U) RC522_SetBitMask(RC522_REG_TX_CONTROL, 0x03U);
 8000b20:	2103      	movs	r1, #3
 8000b22:	2014      	movs	r0, #20
 8000b24:	f7ff ffea 	bl	8000afc <RC522_SetBitMask>
}
 8000b28:	e7f9      	b.n	8000b1e <RC522_AntennaOn+0xc>

08000b2a <RC522_ClearBitMask>:
{
 8000b2a:	b570      	push	{r4, r5, r6, lr}
 8000b2c:	0004      	movs	r4, r0
 8000b2e:	000d      	movs	r5, r1
	RC522_WriteRegister(reg, RC522_ReadRegister(reg) & (~mask));
 8000b30:	f7ff ffba 	bl	8000aa8 <RC522_ReadRegister>
 8000b34:	b241      	sxtb	r1, r0
 8000b36:	43a9      	bics	r1, r5
 8000b38:	b2c9      	uxtb	r1, r1
 8000b3a:	0020      	movs	r0, r4
 8000b3c:	f7ff ff94 	bl	8000a68 <RC522_WriteRegister>
}
 8000b40:	bd70      	pop	{r4, r5, r6, pc}
	...

08000b44 <RC522_ToCard>:
 * @param
 * @retval
 */
static RC522_StatusTypeDef RC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData,
        uint16_t *backLen)
{
 8000b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b46:	46ce      	mov	lr, r9
 8000b48:	4647      	mov	r7, r8
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	4680      	mov	r8, r0
 8000b50:	000d      	movs	r5, r1
 8000b52:	0016      	movs	r6, r2
 8000b54:	9301      	str	r3, [sp, #4]
	uint8_t irqEn = 0U;
	uint8_t waitIRq = 0U;
	uint32_t n, i, lastBits;
	RC522_StatusTypeDef status = MI_ERR;

	switch (command)
 8000b56:	280c      	cmp	r0, #12
 8000b58:	d021      	beq.n	8000b9e <RC522_ToCard+0x5a>
 8000b5a:	280e      	cmp	r0, #14
 8000b5c:	d023      	beq.n	8000ba6 <RC522_ToCard+0x62>
	uint8_t waitIRq = 0U;
 8000b5e:	2700      	movs	r7, #0
	uint8_t irqEn = 0U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	4699      	mov	r9, r3
			waitIRq = 0x30U;
			break;
		default:
			break;
	}
	RC522_WriteRegister(RC522_REG_COMM_IE_N, irqEn | 0x80U);
 8000b64:	2180      	movs	r1, #128	; 0x80
 8000b66:	4249      	negs	r1, r1
 8000b68:	464b      	mov	r3, r9
 8000b6a:	4319      	orrs	r1, r3
 8000b6c:	b2c9      	uxtb	r1, r1
 8000b6e:	2002      	movs	r0, #2
 8000b70:	f7ff ff7a 	bl	8000a68 <RC522_WriteRegister>
	RC522_ClearBitMask(RC522_REG_COMM_IRQ, 0x80U);
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	2004      	movs	r0, #4
 8000b78:	f7ff ffd7 	bl	8000b2a <RC522_ClearBitMask>
	RC522_SetBitMask(RC522_REG_FIFO_LEVEL, 0x80U);
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	200a      	movs	r0, #10
 8000b80:	f7ff ffbc 	bl	8000afc <RC522_SetBitMask>
	RC522_WriteRegister(RC522_REG_COMMAND, PCD_IDLE);
 8000b84:	2100      	movs	r1, #0
 8000b86:	2001      	movs	r0, #1
 8000b88:	f7ff ff6e 	bl	8000a68 <RC522_WriteRegister>

	for (i = 0U; i < sendLen; i++)
 8000b8c:	2400      	movs	r4, #0
 8000b8e:	42a6      	cmp	r6, r4
 8000b90:	d90d      	bls.n	8000bae <RC522_ToCard+0x6a>
	{
		RC522_WriteRegister(RC522_REG_FIFO_DATA, sendData[i]);   //Writing data to the FIFO
 8000b92:	5d29      	ldrb	r1, [r5, r4]
 8000b94:	2009      	movs	r0, #9
 8000b96:	f7ff ff67 	bl	8000a68 <RC522_WriteRegister>
	for (i = 0U; i < sendLen; i++)
 8000b9a:	3401      	adds	r4, #1
 8000b9c:	e7f7      	b.n	8000b8e <RC522_ToCard+0x4a>
			waitIRq = 0x30U;
 8000b9e:	2730      	movs	r7, #48	; 0x30
			irqEn = 0x77U;
 8000ba0:	2377      	movs	r3, #119	; 0x77
 8000ba2:	4699      	mov	r9, r3
			break;
 8000ba4:	e7de      	b.n	8000b64 <RC522_ToCard+0x20>
			waitIRq = 0x10U;
 8000ba6:	2710      	movs	r7, #16
			irqEn = 0x12U;
 8000ba8:	2312      	movs	r3, #18
 8000baa:	4699      	mov	r9, r3
 8000bac:	e7da      	b.n	8000b64 <RC522_ToCard+0x20>
	}

	RC522_WriteRegister(RC522_REG_COMMAND, command);            //Execute the command
 8000bae:	4641      	mov	r1, r8
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f7ff ff59 	bl	8000a68 <RC522_WriteRegister>

	if (command == PCD_TRANSCEIVE)
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	2b0c      	cmp	r3, #12
 8000bba:	d018      	beq.n	8000bee <RC522_ToCard+0xaa>
	for (i = 0U; i < sendLen; i++)
 8000bbc:	24c8      	movs	r4, #200	; 0xc8
		/**
		 *   CommIrqReg[7..0]
		 *   Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		 */
//        if (eComState == COM_PACKET_RECEIVED) RS485_Service();
		n = RC522_ReadRegister(RC522_REG_COMM_IRQ);
 8000bbe:	2004      	movs	r0, #4
 8000bc0:	f7ff ff72 	bl	8000aa8 <RC522_ReadRegister>
 8000bc4:	0006      	movs	r6, r0
		--i;
 8000bc6:	3c01      	subs	r4, #1
	}
	while ((i != 0U) && ((n & 0x01U) == 0U) && ((n & waitIRq) == 0U));          // End of do...while loop
 8000bc8:	2c00      	cmp	r4, #0
 8000bca:	d003      	beq.n	8000bd4 <RC522_ToCard+0x90>
 8000bcc:	07c3      	lsls	r3, r0, #31
 8000bce:	d401      	bmi.n	8000bd4 <RC522_ToCard+0x90>
 8000bd0:	4207      	tst	r7, r0
 8000bd2:	d0f4      	beq.n	8000bbe <RC522_ToCard+0x7a>
	/**
	 *   StartSend=0
	 */
	RC522_ClearBitMask(RC522_REG_BIT_FRAMING, 0x80U);
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	200d      	movs	r0, #13
 8000bd8:	f7ff ffa7 	bl	8000b2a <RC522_ClearBitMask>
	
	if (i != 0U)
 8000bdc:	2c00      	cmp	r4, #0
 8000bde:	d10b      	bne.n	8000bf8 <RC522_ToCard+0xb4>
	RC522_StatusTypeDef status = MI_ERR;
 8000be0:	2401      	movs	r4, #1
			}
		}
		else status = MI_ERR;
	}
	return (status);
}
 8000be2:	0020      	movs	r0, r4
 8000be4:	b003      	add	sp, #12
 8000be6:	bc0c      	pop	{r2, r3}
 8000be8:	4690      	mov	r8, r2
 8000bea:	4699      	mov	r9, r3
 8000bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		RC522_SetBitMask(RC522_REG_BIT_FRAMING, 0x80U);     //StartSend=1,transmission of data starts
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	200d      	movs	r0, #13
 8000bf2:	f7ff ff83 	bl	8000afc <RC522_SetBitMask>
 8000bf6:	e7e1      	b.n	8000bbc <RC522_ToCard+0x78>
		if ((RC522_ReadRegister(RC522_REG_ERROR) & 0x1BU) == 0U)
 8000bf8:	2006      	movs	r0, #6
 8000bfa:	f7ff ff55 	bl	8000aa8 <RC522_ReadRegister>
 8000bfe:	231b      	movs	r3, #27
 8000c00:	4203      	tst	r3, r0
 8000c02:	d136      	bne.n	8000c72 <RC522_ToCard+0x12e>
			if (n & irqEn & 0x01U) status = MI_NOTAGERR;
 8000c04:	464b      	mov	r3, r9
 8000c06:	4033      	ands	r3, r6
 8000c08:	001e      	movs	r6, r3
 8000c0a:	07f3      	lsls	r3, r6, #31
 8000c0c:	d41d      	bmi.n	8000c4a <RC522_ToCard+0x106>
			status = MI_OK;
 8000c0e:	2400      	movs	r4, #0
			if (command == PCD_TRANSCEIVE)
 8000c10:	4643      	mov	r3, r8
 8000c12:	2b0c      	cmp	r3, #12
 8000c14:	d1e5      	bne.n	8000be2 <RC522_ToCard+0x9e>
				n = RC522_ReadRegister(RC522_REG_FIFO_LEVEL);
 8000c16:	200a      	movs	r0, #10
 8000c18:	f7ff ff46 	bl	8000aa8 <RC522_ReadRegister>
 8000c1c:	0006      	movs	r6, r0
 8000c1e:	4680      	mov	r8, r0
				lastBits = (RC522_ReadRegister(RC522_REG_CONTROL) & 0x07U);
 8000c20:	200c      	movs	r0, #12
 8000c22:	f7ff ff41 	bl	8000aa8 <RC522_ReadRegister>
 8000c26:	2307      	movs	r3, #7
 8000c28:	4018      	ands	r0, r3
				if (lastBits != 0U) *backLen = ((n - 1U) * 8U + lastBits);
 8000c2a:	d010      	beq.n	8000c4e <RC522_ToCard+0x10a>
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <RC522_ToCard+0x134>)
 8000c2e:	469c      	mov	ip, r3
 8000c30:	4466      	add	r6, ip
 8000c32:	00f6      	lsls	r6, r6, #3
 8000c34:	1830      	adds	r0, r6, r0
 8000c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c38:	8018      	strh	r0, [r3, #0]
				if (n == 0U) n = 1U;
 8000c3a:	4643      	mov	r3, r8
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d00a      	beq.n	8000c56 <RC522_ToCard+0x112>
				if (n > RC522_BSIZE) n = RC522_BSIZE;
 8000c40:	2b10      	cmp	r3, #16
 8000c42:	d90a      	bls.n	8000c5a <RC522_ToCard+0x116>
 8000c44:	2310      	movs	r3, #16
 8000c46:	4698      	mov	r8, r3
 8000c48:	e007      	b.n	8000c5a <RC522_ToCard+0x116>
			if (n & irqEn & 0x01U) status = MI_NOTAGERR;
 8000c4a:	2402      	movs	r4, #2
 8000c4c:	e7e0      	b.n	8000c10 <RC522_ToCard+0xcc>
				else *backLen = (n * 8U);
 8000c4e:	00f6      	lsls	r6, r6, #3
 8000c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c52:	801e      	strh	r6, [r3, #0]
 8000c54:	e7f1      	b.n	8000c3a <RC522_ToCard+0xf6>
				if (n == 0U) n = 1U;
 8000c56:	2301      	movs	r3, #1
 8000c58:	4698      	mov	r8, r3
				for (i = 0U; i < n; i++)
 8000c5a:	2600      	movs	r6, #0
 8000c5c:	e006      	b.n	8000c6c <RC522_ToCard+0x128>
					backData[i] = RC522_ReadRegister(RC522_REG_FIFO_DATA);
 8000c5e:	9b01      	ldr	r3, [sp, #4]
 8000c60:	199f      	adds	r7, r3, r6
 8000c62:	2009      	movs	r0, #9
 8000c64:	f7ff ff20 	bl	8000aa8 <RC522_ReadRegister>
 8000c68:	7038      	strb	r0, [r7, #0]
				for (i = 0U; i < n; i++)
 8000c6a:	3601      	adds	r6, #1
 8000c6c:	45b0      	cmp	r8, r6
 8000c6e:	d8f6      	bhi.n	8000c5e <RC522_ToCard+0x11a>
 8000c70:	e7b7      	b.n	8000be2 <RC522_ToCard+0x9e>
		else status = MI_ERR;
 8000c72:	2401      	movs	r4, #1
 8000c74:	e7b5      	b.n	8000be2 <RC522_ToCard+0x9e>
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	1fffffff 	.word	0x1fffffff

08000c7c <RC522_Request>:
{
 8000c7c:	b530      	push	{r4, r5, lr}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	0005      	movs	r5, r0
 8000c82:	000c      	movs	r4, r1
	RC522_WriteRegister(RC522_REG_BIT_FRAMING, 0x07U);	// TxLastBits = BitFramingReg[2..0]	???
 8000c84:	2107      	movs	r1, #7
 8000c86:	200d      	movs	r0, #13
 8000c88:	f7ff feee 	bl	8000a68 <RC522_WriteRegister>
	TagType[0] = reqMode;
 8000c8c:	7025      	strb	r5, [r4, #0]
	status = RC522_ToCard(PCD_TRANSCEIVE, TagType, 1U, TagType, &backBits);
 8000c8e:	230e      	movs	r3, #14
 8000c90:	446b      	add	r3, sp
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	0023      	movs	r3, r4
 8000c96:	2201      	movs	r2, #1
 8000c98:	0021      	movs	r1, r4
 8000c9a:	200c      	movs	r0, #12
 8000c9c:	f7ff ff52 	bl	8000b44 <RC522_ToCard>
	if ((status != MI_OK) || (backBits != 0x10U)) status = MI_ERR;
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d106      	bne.n	8000cb2 <RC522_Request+0x36>
 8000ca4:	230e      	movs	r3, #14
 8000ca6:	446b      	add	r3, sp
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	2b10      	cmp	r3, #16
 8000cac:	d002      	beq.n	8000cb4 <RC522_Request+0x38>
 8000cae:	2001      	movs	r0, #1
 8000cb0:	e000      	b.n	8000cb4 <RC522_Request+0x38>
 8000cb2:	2001      	movs	r0, #1
}
 8000cb4:	b005      	add	sp, #20
 8000cb6:	bd30      	pop	{r4, r5, pc}

08000cb8 <RC522_Anticoll>:
 * @brief
 * @param
 * @retval
 */
static RC522_StatusTypeDef RC522_Anticoll(uint8_t *serNum)
{
 8000cb8:	b510      	push	{r4, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	0004      	movs	r4, r0
	uint32_t bcnt;
	uint16_t blen;
	uint8_t snum = 0U;
	RC522_StatusTypeDef status;
	
	RC522_WriteRegister(RC522_REG_BIT_FRAMING, 0U);   // TxLastBists = BitFramingReg[2..0]
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	200d      	movs	r0, #13
 8000cc2:	f7ff fed1 	bl	8000a68 <RC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8000cc6:	2393      	movs	r3, #147	; 0x93
 8000cc8:	7023      	strb	r3, [r4, #0]
	serNum[1] = 0x20U;
 8000cca:	3b73      	subs	r3, #115	; 0x73
 8000ccc:	7063      	strb	r3, [r4, #1]
	status = RC522_ToCard(PCD_TRANSCEIVE, serNum, 2U, serNum, &blen);
 8000cce:	3b12      	subs	r3, #18
 8000cd0:	446b      	add	r3, sp
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	0023      	movs	r3, r4
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	0021      	movs	r1, r4
 8000cda:	200c      	movs	r0, #12
 8000cdc:	f7ff ff32 	bl	8000b44 <RC522_ToCard>
	
	if (status == MI_OK)
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d10b      	bne.n	8000cfc <RC522_Anticoll+0x44>
	uint8_t snum = 0U;
 8000ce4:	2200      	movs	r2, #0
	{
		/**
		 *   Check card serial number
		 */
		for (bcnt = 0U; bcnt < 4U; bcnt++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e002      	b.n	8000cf0 <RC522_Anticoll+0x38>
		{
			snum ^= serNum[bcnt];
 8000cea:	5ce1      	ldrb	r1, [r4, r3]
 8000cec:	404a      	eors	r2, r1
		for (bcnt = 0U; bcnt < 4U; bcnt++)
 8000cee:	3301      	adds	r3, #1
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d9fa      	bls.n	8000cea <RC522_Anticoll+0x32>
		}
		if (snum != serNum[bcnt]) status = MI_ERR;
 8000cf4:	5ce3      	ldrb	r3, [r4, r3]
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d000      	beq.n	8000cfc <RC522_Anticoll+0x44>
 8000cfa:	2001      	movs	r0, #1
	}
	return (status);
}
 8000cfc:	b004      	add	sp, #16
 8000cfe:	bd10      	pop	{r4, pc}

08000d00 <RC522_CalculateCRC>:
 * @brief
 * @param
 * @retval
 */
static void RC522_CalculateCRC(uint8_t *pIndata, uint8_t len, uint8_t *pOutData)
{
 8000d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d02:	0006      	movs	r6, r0
 8000d04:	000d      	movs	r5, r1
 8000d06:	0017      	movs	r7, r2
	uint32_t i, n;
	
	RC522_ClearBitMask(RC522_REG_DIV_IRQ, 0x04U);       // CRCIrq = 0
 8000d08:	2104      	movs	r1, #4
 8000d0a:	2005      	movs	r0, #5
 8000d0c:	f7ff ff0d 	bl	8000b2a <RC522_ClearBitMask>
	RC522_SetBitMask(RC522_REG_FIFO_LEVEL, 0x80U);      // Clear the FIFO pointer
 8000d10:	2180      	movs	r1, #128	; 0x80
 8000d12:	200a      	movs	r0, #10
 8000d14:	f7ff fef2 	bl	8000afc <RC522_SetBitMask>
//	RC522_WriteRegister(RC522_REG_COMMAND, PCDLE);
	/**
	 *   Write_RC522(CommandReg, PCDLE);
	 *   Writing data to the FIFO
	 */
	for (i = 0U; i < len; i++)
 8000d18:	2400      	movs	r4, #0
 8000d1a:	e004      	b.n	8000d26 <RC522_CalculateCRC+0x26>
	{
		RC522_WriteRegister(RC522_REG_FIFO_DATA, *(pIndata + i));
 8000d1c:	5d31      	ldrb	r1, [r6, r4]
 8000d1e:	2009      	movs	r0, #9
 8000d20:	f7ff fea2 	bl	8000a68 <RC522_WriteRegister>
	for (i = 0U; i < len; i++)
 8000d24:	3401      	adds	r4, #1
 8000d26:	42a5      	cmp	r5, r4
 8000d28:	d8f8      	bhi.n	8000d1c <RC522_CalculateCRC+0x1c>
	}
	/**
	 *   Start CRC calculation
	 */
	RC522_WriteRegister(RC522_REG_COMMAND, PCD_CALCCRC);
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff fe9b 	bl	8000a68 <RC522_WriteRegister>
	/**
	 *   Wait for CRC calculation to complete
	 */
	i = 0xFFU;
 8000d32:	24ff      	movs	r4, #255	; 0xff
	
	do
	{
//        if (eComState == COM_PACKET_RECEIVED) RS485_Service();
		n = RC522_ReadRegister(RC522_REG_DIV_IRQ);
 8000d34:	2005      	movs	r0, #5
 8000d36:	f7ff feb7 	bl	8000aa8 <RC522_ReadRegister>
		--i;
 8000d3a:	3c01      	subs	r4, #1
	}
	while ((i != 0U) && ((n & 0x04U) == 0U));              // wait for CRCIrq = 1
 8000d3c:	2c00      	cmp	r4, #0
 8000d3e:	d001      	beq.n	8000d44 <RC522_CalculateCRC+0x44>
 8000d40:	0743      	lsls	r3, r0, #29
 8000d42:	d5f7      	bpl.n	8000d34 <RC522_CalculateCRC+0x34>
	
//	RC522_WriteRegister(RC522_REG_COMMAND, PCDLE);
	/**
	 *   Read CRC calculation result
	 */
	pOutData[0] = RC522_ReadRegister(RC522_REG_CRC_RESULT_L);
 8000d44:	2022      	movs	r0, #34	; 0x22
 8000d46:	f7ff feaf 	bl	8000aa8 <RC522_ReadRegister>
 8000d4a:	7038      	strb	r0, [r7, #0]
	pOutData[1] = RC522_ReadRegister(RC522_REG_CRC_RESULT_M);
 8000d4c:	2021      	movs	r0, #33	; 0x21
 8000d4e:	f7ff feab 	bl	8000aa8 <RC522_ReadRegister>
 8000d52:	7078      	strb	r0, [r7, #1]
}
 8000d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000d56 <RC522_Halt>:
 * @brief
 * @param
 * @retval
 */
static void RC522_Halt(void)
{
 8000d56:	b510      	push	{r4, lr}
 8000d58:	b084      	sub	sp, #16
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8000d5a:	ac02      	add	r4, sp, #8
 8000d5c:	2350      	movs	r3, #80	; 0x50
 8000d5e:	7023      	strb	r3, [r4, #0]
	buff[1] = 0U;
 8000d60:	2300      	movs	r3, #0
 8000d62:	7063      	strb	r3, [r4, #1]
	RC522_CalculateCRC(buff, 2U, &buff[2]);
 8000d64:	220a      	movs	r2, #10
 8000d66:	446a      	add	r2, sp
 8000d68:	2102      	movs	r1, #2
 8000d6a:	0020      	movs	r0, r4
 8000d6c:	f7ff ffc8 	bl	8000d00 <RC522_CalculateCRC>
	RC522_ToCard(PCD_TRANSCEIVE, buff, 4U, buff, &unLen);
 8000d70:	230e      	movs	r3, #14
 8000d72:	446b      	add	r3, sp
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	0023      	movs	r3, r4
 8000d78:	2204      	movs	r2, #4
 8000d7a:	0021      	movs	r1, r4
 8000d7c:	200c      	movs	r0, #12
 8000d7e:	f7ff fee1 	bl	8000b44 <RC522_ToCard>
	RC522_ClearBitMask(0x08U, 0x08U);
 8000d82:	2108      	movs	r1, #8
 8000d84:	2008      	movs	r0, #8
 8000d86:	f7ff fed0 	bl	8000b2a <RC522_ClearBitMask>
}
 8000d8a:	b004      	add	sp, #16
 8000d8c:	bd10      	pop	{r4, pc}

08000d8e <RC522_Check>:
{
 8000d8e:	b570      	push	{r4, r5, r6, lr}
 8000d90:	0005      	movs	r5, r0
	status = RC522_Request(PICC_REQIDL, id);			// Find cards, return card type
 8000d92:	0001      	movs	r1, r0
 8000d94:	2026      	movs	r0, #38	; 0x26
 8000d96:	f7ff ff71 	bl	8000c7c <RC522_Request>
 8000d9a:	1e04      	subs	r4, r0, #0
	if (status == MI_OK) status = RC522_Anticoll(id);// Card detected. Anti-collision, return card serial number 4 bytes
 8000d9c:	d003      	beq.n	8000da6 <RC522_Check+0x18>
	RC522_Halt();										// Command card into hibernation
 8000d9e:	f7ff ffda 	bl	8000d56 <RC522_Halt>
}
 8000da2:	0020      	movs	r0, r4
 8000da4:	bd70      	pop	{r4, r5, r6, pc}
	if (status == MI_OK) status = RC522_Anticoll(id);// Card detected. Anti-collision, return card serial number 4 bytes
 8000da6:	0028      	movs	r0, r5
 8000da8:	f7ff ff86 	bl	8000cb8 <RC522_Anticoll>
 8000dac:	0004      	movs	r4, r0
 8000dae:	e7f6      	b.n	8000d9e <RC522_Check+0x10>

08000db0 <RC522_SelectTag>:
{
 8000db0:	b510      	push	{r4, lr}
 8000db2:	b086      	sub	sp, #24
	buffer[0] = PICC_SELECTTAG;
 8000db4:	ab03      	add	r3, sp, #12
 8000db6:	2293      	movs	r2, #147	; 0x93
 8000db8:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x70U;
 8000dba:	3a23      	subs	r2, #35	; 0x23
 8000dbc:	705a      	strb	r2, [r3, #1]
	for (bcnt = 0U; bcnt < 5U; bcnt++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e004      	b.n	8000dcc <RC522_SelectTag+0x1c>
		buffer[bcnt + 2U] = *(serNum + bcnt);
 8000dc2:	1c9a      	adds	r2, r3, #2
 8000dc4:	5cc4      	ldrb	r4, [r0, r3]
 8000dc6:	a903      	add	r1, sp, #12
 8000dc8:	548c      	strb	r4, [r1, r2]
	for (bcnt = 0U; bcnt < 5U; bcnt++)
 8000dca:	3301      	adds	r3, #1
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d9f8      	bls.n	8000dc2 <RC522_SelectTag+0x12>
	RC522_CalculateCRC(buffer, 7U, &buffer[7]);		//??
 8000dd0:	2213      	movs	r2, #19
 8000dd2:	446a      	add	r2, sp
 8000dd4:	2107      	movs	r1, #7
 8000dd6:	a803      	add	r0, sp, #12
 8000dd8:	f7ff ff92 	bl	8000d00 <RC522_CalculateCRC>
	status = RC522_ToCard(PCD_TRANSCEIVE, buffer, 9U, buffer, &recb);
 8000ddc:	2316      	movs	r3, #22
 8000dde:	446b      	add	r3, sp
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	ab03      	add	r3, sp, #12
 8000de4:	2209      	movs	r2, #9
 8000de6:	0019      	movs	r1, r3
 8000de8:	200c      	movs	r0, #12
 8000dea:	f7ff feab 	bl	8000b44 <RC522_ToCard>
	if ((status == MI_OK) && (recb == 0x18U)) size = buffer[0];
 8000dee:	2800      	cmp	r0, #0
 8000df0:	d109      	bne.n	8000e06 <RC522_SelectTag+0x56>
 8000df2:	2316      	movs	r3, #22
 8000df4:	446b      	add	r3, sp
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	2b18      	cmp	r3, #24
 8000dfa:	d001      	beq.n	8000e00 <RC522_SelectTag+0x50>
	else size = 0U;
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	e003      	b.n	8000e08 <RC522_SelectTag+0x58>
	if ((status == MI_OK) && (recb == 0x18U)) size = buffer[0];
 8000e00:	ab03      	add	r3, sp, #12
 8000e02:	7818      	ldrb	r0, [r3, #0]
 8000e04:	e000      	b.n	8000e08 <RC522_SelectTag+0x58>
	else size = 0U;
 8000e06:	2000      	movs	r0, #0
}
 8000e08:	b006      	add	sp, #24
 8000e0a:	bd10      	pop	{r4, pc}

08000e0c <RC522_Read>:
{
 8000e0c:	b530      	push	{r4, r5, lr}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	000d      	movs	r5, r1
	sendData[0] = PICC_READ;
 8000e12:	ac03      	add	r4, sp, #12
 8000e14:	2330      	movs	r3, #48	; 0x30
 8000e16:	7023      	strb	r3, [r4, #0]
	sendData[1] = blockAddr;
 8000e18:	7060      	strb	r0, [r4, #1]
	RC522_CalculateCRC(sendData, 2U, &sendData[2]);
 8000e1a:	220e      	movs	r2, #14
 8000e1c:	446a      	add	r2, sp
 8000e1e:	2102      	movs	r1, #2
 8000e20:	0020      	movs	r0, r4
 8000e22:	f7ff ff6d 	bl	8000d00 <RC522_CalculateCRC>
	status = RC522_ToCard(PCD_TRANSCEIVE, sendData, 4U, recvData, &unLen);
 8000e26:	2316      	movs	r3, #22
 8000e28:	446b      	add	r3, sp
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	002b      	movs	r3, r5
 8000e2e:	2204      	movs	r2, #4
 8000e30:	0021      	movs	r1, r4
 8000e32:	200c      	movs	r0, #12
 8000e34:	f7ff fe86 	bl	8000b44 <RC522_ToCard>
	if ((status != MI_OK) || (unLen != 0x90U)) status = MI_ERR;
 8000e38:	2800      	cmp	r0, #0
 8000e3a:	d106      	bne.n	8000e4a <RC522_Read+0x3e>
 8000e3c:	2316      	movs	r3, #22
 8000e3e:	446b      	add	r3, sp
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	2b90      	cmp	r3, #144	; 0x90
 8000e44:	d002      	beq.n	8000e4c <RC522_Read+0x40>
 8000e46:	2001      	movs	r0, #1
 8000e48:	e000      	b.n	8000e4c <RC522_Read+0x40>
 8000e4a:	2001      	movs	r0, #1
}
 8000e4c:	b007      	add	sp, #28
 8000e4e:	bd30      	pop	{r4, r5, pc}

08000e50 <RC522_Write>:
{
 8000e50:	b530      	push	{r4, r5, lr}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	000d      	movs	r5, r1
	buff[0] = PICC_WRITE;
 8000e56:	ac03      	add	r4, sp, #12
 8000e58:	23a0      	movs	r3, #160	; 0xa0
 8000e5a:	7023      	strb	r3, [r4, #0]
	buff[1] = blockAddr;
 8000e5c:	7060      	strb	r0, [r4, #1]
	RC522_CalculateCRC(buff, 2, &buff[2]);
 8000e5e:	220e      	movs	r2, #14
 8000e60:	446a      	add	r2, sp
 8000e62:	2102      	movs	r1, #2
 8000e64:	0020      	movs	r0, r4
 8000e66:	f7ff ff4b 	bl	8000d00 <RC522_CalculateCRC>
	status = RC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &recvBits);
 8000e6a:	231e      	movs	r3, #30
 8000e6c:	446b      	add	r3, sp
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	0023      	movs	r3, r4
 8000e72:	2204      	movs	r2, #4
 8000e74:	0021      	movs	r1, r4
 8000e76:	200c      	movs	r0, #12
 8000e78:	f7ff fe64 	bl	8000b44 <RC522_ToCard>
	if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0f) != 0x0a))
 8000e7c:	2800      	cmp	r0, #0
 8000e7e:	d136      	bne.n	8000eee <RC522_Write+0x9e>
 8000e80:	231e      	movs	r3, #30
 8000e82:	446b      	add	r3, sp
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	d001      	beq.n	8000e8e <RC522_Write+0x3e>
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	e030      	b.n	8000ef0 <RC522_Write+0xa0>
 8000e8e:	ab03      	add	r3, sp, #12
 8000e90:	781a      	ldrb	r2, [r3, #0]
 8000e92:	230f      	movs	r3, #15
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b0a      	cmp	r3, #10
 8000e98:	d001      	beq.n	8000e9e <RC522_Write+0x4e>
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	e028      	b.n	8000ef0 <RC522_Write+0xa0>
		for (i = 0; i < 16; i++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e004      	b.n	8000eac <RC522_Write+0x5c>
			buff[i] = *(writeData + i);
 8000ea2:	5ce9      	ldrb	r1, [r5, r3]
 8000ea4:	aa03      	add	r2, sp, #12
 8000ea6:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < 16; i++)
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d9f8      	bls.n	8000ea2 <RC522_Write+0x52>
		RC522_CalculateCRC(buff, 16, &buff[16]);
 8000eb0:	aa07      	add	r2, sp, #28
 8000eb2:	2110      	movs	r1, #16
 8000eb4:	a803      	add	r0, sp, #12
 8000eb6:	f7ff ff23 	bl	8000d00 <RC522_CalculateCRC>
		status = RC522_ToCard(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);
 8000eba:	231e      	movs	r3, #30
 8000ebc:	446b      	add	r3, sp
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	ab03      	add	r3, sp, #12
 8000ec2:	2212      	movs	r2, #18
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	200c      	movs	r0, #12
 8000ec8:	f7ff fe3c 	bl	8000b44 <RC522_ToCard>
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0f) != 0x0a))
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d111      	bne.n	8000ef4 <RC522_Write+0xa4>
 8000ed0:	231e      	movs	r3, #30
 8000ed2:	446b      	add	r3, sp
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d001      	beq.n	8000ede <RC522_Write+0x8e>
			status = MI_ERR;
 8000eda:	2001      	movs	r0, #1
 8000edc:	e008      	b.n	8000ef0 <RC522_Write+0xa0>
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0f) != 0x0a))
 8000ede:	ab03      	add	r3, sp, #12
 8000ee0:	781a      	ldrb	r2, [r3, #0]
 8000ee2:	230f      	movs	r3, #15
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	2b0a      	cmp	r3, #10
 8000ee8:	d002      	beq.n	8000ef0 <RC522_Write+0xa0>
			status = MI_ERR;
 8000eea:	2001      	movs	r0, #1
 8000eec:	e000      	b.n	8000ef0 <RC522_Write+0xa0>
 8000eee:	2001      	movs	r0, #1
}		// End of write function
 8000ef0:	b009      	add	sp, #36	; 0x24
 8000ef2:	bd30      	pop	{r4, r5, pc}
			status = MI_ERR;
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	e7fb      	b.n	8000ef0 <RC522_Write+0xa0>

08000ef8 <RC522_Auth>:
{
 8000ef8:	b530      	push	{r4, r5, lr}
 8000efa:	b087      	sub	sp, #28
	buff[0] = authMode;
 8000efc:	ac02      	add	r4, sp, #8
 8000efe:	7020      	strb	r0, [r4, #0]
	buff[1] = BlockAddr;
 8000f00:	7061      	strb	r1, [r4, #1]
	for (bcnt = 0U; bcnt < 6U; bcnt++)
 8000f02:	2100      	movs	r1, #0
 8000f04:	e004      	b.n	8000f10 <RC522_Auth+0x18>
		buff[bcnt + 2U] = *(Sectorkey + bcnt);
 8000f06:	1c88      	adds	r0, r1, #2
 8000f08:	5c55      	ldrb	r5, [r2, r1]
 8000f0a:	ac02      	add	r4, sp, #8
 8000f0c:	5425      	strb	r5, [r4, r0]
	for (bcnt = 0U; bcnt < 6U; bcnt++)
 8000f0e:	3101      	adds	r1, #1
 8000f10:	2905      	cmp	r1, #5
 8000f12:	d9f8      	bls.n	8000f06 <RC522_Auth+0xe>
	for (bcnt = 0U; bcnt < 4U; bcnt++)
 8000f14:	2200      	movs	r2, #0
 8000f16:	e005      	b.n	8000f24 <RC522_Auth+0x2c>
		buff[bcnt + 8U] = *(serNum + bcnt);
 8000f18:	0011      	movs	r1, r2
 8000f1a:	3108      	adds	r1, #8
 8000f1c:	5c9c      	ldrb	r4, [r3, r2]
 8000f1e:	a802      	add	r0, sp, #8
 8000f20:	5444      	strb	r4, [r0, r1]
	for (bcnt = 0U; bcnt < 4U; bcnt++)
 8000f22:	3201      	adds	r2, #1
 8000f24:	2a03      	cmp	r2, #3
 8000f26:	d9f7      	bls.n	8000f18 <RC522_Auth+0x20>
	status = RC522_ToCard(PCD_AUTHENT, buff, 12U, buff, &recb);
 8000f28:	2316      	movs	r3, #22
 8000f2a:	446b      	add	r3, sp
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	ab02      	add	r3, sp, #8
 8000f30:	220c      	movs	r2, #12
 8000f32:	0019      	movs	r1, r3
 8000f34:	200e      	movs	r0, #14
 8000f36:	f7ff fe05 	bl	8000b44 <RC522_ToCard>
 8000f3a:	1e04      	subs	r4, r0, #0
	if ((status != MI_OK) || ((RC522_ReadRegister(RC522_REG_STATUS2) & 0x08U) == 0U)) status = MI_ERR;
 8000f3c:	d003      	beq.n	8000f46 <RC522_Auth+0x4e>
 8000f3e:	2401      	movs	r4, #1
}
 8000f40:	0020      	movs	r0, r4
 8000f42:	b007      	add	sp, #28
 8000f44:	bd30      	pop	{r4, r5, pc}
	if ((status != MI_OK) || ((RC522_ReadRegister(RC522_REG_STATUS2) & 0x08U) == 0U)) status = MI_ERR;
 8000f46:	2008      	movs	r0, #8
 8000f48:	f7ff fdae 	bl	8000aa8 <RC522_ReadRegister>
 8000f4c:	0703      	lsls	r3, r0, #28
 8000f4e:	d4f7      	bmi.n	8000f40 <RC522_Auth+0x48>
 8000f50:	2401      	movs	r4, #1
 8000f52:	e7f5      	b.n	8000f40 <RC522_Auth+0x48>

08000f54 <RC522_Init>:
{
 8000f54:	b510      	push	{r4, lr}
	mRC522_ChipRelease();
 8000f56:	2090      	movs	r0, #144	; 0x90
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2110      	movs	r1, #16
 8000f5c:	05c0      	lsls	r0, r0, #23
 8000f5e:	f000 fc6e 	bl	800183e <HAL_GPIO_WritePin>
	mRC522_ResetAssert();
 8000f62:	4c1a      	ldr	r4, [pc, #104]	; (8000fcc <RC522_Init+0x78>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	2102      	movs	r1, #2
 8000f68:	0020      	movs	r0, r4
 8000f6a:	f000 fc68 	bl	800183e <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f6e:	200a      	movs	r0, #10
 8000f70:	f000 fa3e 	bl	80013f0 <HAL_Delay>
	mRC522_ResetRelease();
 8000f74:	2201      	movs	r2, #1
 8000f76:	2102      	movs	r1, #2
 8000f78:	0020      	movs	r0, r4
 8000f7a:	f000 fc60 	bl	800183e <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000f7e:	2064      	movs	r0, #100	; 0x64
 8000f80:	f000 fa36 	bl	80013f0 <HAL_Delay>
	RC522_WriteRegister(RC522_REG_COMMAND, PCD_RESETPHASE);
 8000f84:	210f      	movs	r1, #15
 8000f86:	2001      	movs	r0, #1
 8000f88:	f7ff fd6e 	bl	8000a68 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_T_MODE, 0x8D);
 8000f8c:	218d      	movs	r1, #141	; 0x8d
 8000f8e:	202a      	movs	r0, #42	; 0x2a
 8000f90:	f7ff fd6a 	bl	8000a68 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_T_PRESCALER, 0x3E);
 8000f94:	213e      	movs	r1, #62	; 0x3e
 8000f96:	202b      	movs	r0, #43	; 0x2b
 8000f98:	f7ff fd66 	bl	8000a68 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_T_RELOAD_L, 30);
 8000f9c:	211e      	movs	r1, #30
 8000f9e:	202d      	movs	r0, #45	; 0x2d
 8000fa0:	f7ff fd62 	bl	8000a68 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_T_RELOAD_H, 0);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	202c      	movs	r0, #44	; 0x2c
 8000fa8:	f7ff fd5e 	bl	8000a68 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_RF_CFG, 0x70);
 8000fac:	2170      	movs	r1, #112	; 0x70
 8000fae:	2026      	movs	r0, #38	; 0x26
 8000fb0:	f7ff fd5a 	bl	8000a68 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_TX_AUTO, 0x40);
 8000fb4:	2140      	movs	r1, #64	; 0x40
 8000fb6:	2015      	movs	r0, #21
 8000fb8:	f7ff fd56 	bl	8000a68 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_MODE, 0x3D);
 8000fbc:	213d      	movs	r1, #61	; 0x3d
 8000fbe:	2011      	movs	r0, #17
 8000fc0:	f7ff fd52 	bl	8000a68 <RC522_WriteRegister>
	RC522_AntennaOn(); // Open the antenna
 8000fc4:	f7ff fda5 	bl	8000b12 <RC522_AntennaOn>
}
 8000fc8:	bd10      	pop	{r4, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	48000400 	.word	0x48000400

08000fd0 <RC522_Service>:
{
 8000fd0:	b510      	push	{r4, lr}
	if ((HAL_GetTick() - mifare_timer) >= mifare_tout)
 8000fd2:	f000 fa07 	bl	80013e4 <HAL_GetTick>
 8000fd6:	4b32      	ldr	r3, [pc, #200]	; (80010a0 <RC522_Service+0xd0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	1ac0      	subs	r0, r0, r3
 8000fdc:	4b31      	ldr	r3, [pc, #196]	; (80010a4 <RC522_Service+0xd4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4298      	cmp	r0, r3
 8000fe2:	d200      	bcs.n	8000fe6 <RC522_Service+0x16>
}
 8000fe4:	bd10      	pop	{r4, pc}
		mifare_tout = 50;
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <RC522_Service+0xd4>)
 8000fe8:	2232      	movs	r2, #50	; 0x32
 8000fea:	601a      	str	r2, [r3, #0]
		mifare_timer = HAL_GetTick();
 8000fec:	f000 f9fa 	bl	80013e4 <HAL_GetTick>
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <RC522_Service+0xd0>)
 8000ff2:	6018      	str	r0, [r3, #0]
		mem_set(card_serial, 0, 5);
 8000ff4:	4c2c      	ldr	r4, [pc, #176]	; (80010a8 <RC522_Service+0xd8>)
 8000ff6:	2205      	movs	r2, #5
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	0020      	movs	r0, r4
 8000ffc:	f7ff f945 	bl	800028a <mem_set>
		if (RC522_Check(card_serial) == MI_OK)                              // check is MIFARE card in field range
 8001000:	0020      	movs	r0, r4
 8001002:	f7ff fec4 	bl	8000d8e <RC522_Check>
 8001006:	2800      	cmp	r0, #0
 8001008:	d025      	beq.n	8001056 <RC522_Service+0x86>
		else if (++clr > 10)
 800100a:	4a28      	ldr	r2, [pc, #160]	; (80010ac <RC522_Service+0xdc>)
 800100c:	6813      	ldr	r3, [r2, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	2b0a      	cmp	r3, #10
 8001014:	d9e6      	bls.n	8000fe4 <RC522_Service+0x14>
			clr = 0;
 8001016:	0013      	movs	r3, r2
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
			CardReadyReset();
 800101c:	4a24      	ldr	r2, [pc, #144]	; (80010b0 <RC522_Service+0xe0>)
 800101e:	2301      	movs	r3, #1
 8001020:	6811      	ldr	r1, [r2, #0]
 8001022:	4399      	bics	r1, r3
 8001024:	000b      	movs	r3, r1
			CardInStackerReset();
 8001026:	2102      	movs	r1, #2
 8001028:	438b      	bics	r3, r1
 800102a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800102c:	2490      	movs	r4, #144	; 0x90
 800102e:	05e4      	lsls	r4, r4, #23
 8001030:	2201      	movs	r2, #1
 8001032:	3901      	subs	r1, #1
 8001034:	0020      	movs	r0, r4
 8001036:	f000 fc02 	bl	800183e <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800103a:	2102      	movs	r1, #2
 800103c:	0020      	movs	r0, r4
 800103e:	f000 fc04 	bl	800184a <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2104      	movs	r1, #4
 8001046:	0020      	movs	r0, r4
 8001048:	f000 fbf9 	bl	800183e <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 800104c:	2108      	movs	r1, #8
 800104e:	0020      	movs	r0, r4
 8001050:	f000 fbfb 	bl	800184a <HAL_GPIO_TogglePin>
}
 8001054:	e7c6      	b.n	8000fe4 <RC522_Service+0x14>
			mifare_tout = 1000;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <RC522_Service+0xd4>)
 8001058:	22fa      	movs	r2, #250	; 0xfa
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800105e:	2490      	movs	r4, #144	; 0x90
 8001060:	05e4      	lsls	r4, r4, #23
 8001062:	2200      	movs	r2, #0
 8001064:	2101      	movs	r1, #1
 8001066:	0020      	movs	r0, r4
 8001068:	f000 fbe9 	bl	800183e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2102      	movs	r1, #2
 8001070:	0020      	movs	r0, r4
 8001072:	f000 fbe4 	bl	800183e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2104      	movs	r1, #4
 800107a:	0020      	movs	r0, r4
 800107c:	f000 fbdf 	bl	800183e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	2108      	movs	r1, #8
 8001084:	0020      	movs	r0, r4
 8001086:	f000 fbda 	bl	800183e <HAL_GPIO_WritePin>
			CardReadySet();
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <RC522_Service+0xe0>)
 800108c:	2301      	movs	r3, #1
 800108e:	6811      	ldr	r1, [r2, #0]
 8001090:	430b      	orrs	r3, r1
			CardInStackerSet();
 8001092:	2102      	movs	r1, #2
 8001094:	430b      	orrs	r3, r1
 8001096:	6013      	str	r3, [r2, #0]
			clr = 0;
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <RC522_Service+0xdc>)
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e7a1      	b.n	8000fe4 <RC522_Service+0x14>
 80010a0:	2000025c 	.word	0x2000025c
 80010a4:	20000010 	.word	0x20000010
 80010a8:	20000434 	.word	0x20000434
 80010ac:	20000258 	.word	0x20000258
 80010b0:	200003b0 	.word	0x200003b0

080010b4 <RC522_ReadBlock>:
{
 80010b4:	b570      	push	{r4, r5, r6, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	0005      	movs	r5, r0
 80010ba:	000e      	movs	r6, r1
	status = RC522_Request(PICC_REQIDL, str);
 80010bc:	4669      	mov	r1, sp
 80010be:	2026      	movs	r0, #38	; 0x26
 80010c0:	f7ff fddc 	bl	8000c7c <RC522_Request>
 80010c4:	0004      	movs	r4, r0
	status += RC522_Anticoll(str);
 80010c6:	4668      	mov	r0, sp
 80010c8:	f7ff fdf6 	bl	8000cb8 <RC522_Anticoll>
 80010cc:	1824      	adds	r4, r4, r0
 80010ce:	b2e4      	uxtb	r4, r4
	RC522_SelectTag(str);
 80010d0:	4668      	mov	r0, sp
 80010d2:	f7ff fe6d 	bl	8000db0 <RC522_SelectTag>
	if (!RC522_Auth(PICC_AUTHENT1A, block, mifare_keya, str) && !status)
 80010d6:	466b      	mov	r3, sp
 80010d8:	4a09      	ldr	r2, [pc, #36]	; (8001100 <RC522_ReadBlock+0x4c>)
 80010da:	0029      	movs	r1, r5
 80010dc:	2060      	movs	r0, #96	; 0x60
 80010de:	f7ff ff0b 	bl	8000ef8 <RC522_Auth>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	d101      	bne.n	80010ea <RC522_ReadBlock+0x36>
 80010e6:	2c00      	cmp	r4, #0
 80010e8:	d004      	beq.n	80010f4 <RC522_ReadBlock+0x40>
	RC522_Halt();
 80010ea:	f7ff fe34 	bl	8000d56 <RC522_Halt>
}
 80010ee:	0020      	movs	r0, r4
 80010f0:	b004      	add	sp, #16
 80010f2:	bd70      	pop	{r4, r5, r6, pc}
		status = RC522_Read(block, rbuf);
 80010f4:	0031      	movs	r1, r6
 80010f6:	0028      	movs	r0, r5
 80010f8:	f7ff fe88 	bl	8000e0c <RC522_Read>
 80010fc:	0004      	movs	r4, r0
 80010fe:	e7f4      	b.n	80010ea <RC522_ReadBlock+0x36>
 8001100:	20000000 	.word	0x20000000

08001104 <RC522_WriteBlock>:
{
 8001104:	b570      	push	{r4, r5, r6, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	0005      	movs	r5, r0
 800110a:	000e      	movs	r6, r1
	status = RC522_Request(PICC_REQIDL, str);
 800110c:	4669      	mov	r1, sp
 800110e:	2026      	movs	r0, #38	; 0x26
 8001110:	f7ff fdb4 	bl	8000c7c <RC522_Request>
 8001114:	0004      	movs	r4, r0
	status += RC522_Anticoll(str);
 8001116:	4668      	mov	r0, sp
 8001118:	f7ff fdce 	bl	8000cb8 <RC522_Anticoll>
 800111c:	1824      	adds	r4, r4, r0
 800111e:	b2e4      	uxtb	r4, r4
	RC522_SelectTag(str);
 8001120:	4668      	mov	r0, sp
 8001122:	f7ff fe45 	bl	8000db0 <RC522_SelectTag>
	if (!RC522_Auth(PICC_AUTHENT1A, block, mifare_keya, str) && !status)
 8001126:	466b      	mov	r3, sp
 8001128:	4a09      	ldr	r2, [pc, #36]	; (8001150 <RC522_WriteBlock+0x4c>)
 800112a:	0029      	movs	r1, r5
 800112c:	2060      	movs	r0, #96	; 0x60
 800112e:	f7ff fee3 	bl	8000ef8 <RC522_Auth>
 8001132:	2800      	cmp	r0, #0
 8001134:	d101      	bne.n	800113a <RC522_WriteBlock+0x36>
 8001136:	2c00      	cmp	r4, #0
 8001138:	d004      	beq.n	8001144 <RC522_WriteBlock+0x40>
	RC522_Halt();
 800113a:	f7ff fe0c 	bl	8000d56 <RC522_Halt>
}
 800113e:	0020      	movs	r0, r4
 8001140:	b004      	add	sp, #16
 8001142:	bd70      	pop	{r4, r5, r6, pc}
		status = RC522_Write(block, wbuf);
 8001144:	0031      	movs	r1, r6
 8001146:	0028      	movs	r0, r5
 8001148:	f7ff fe82 	bl	8000e50 <RC522_Write>
 800114c:	0004      	movs	r4, r0
 800114e:	e7f4      	b.n	800113a <RC522_WriteBlock+0x36>
 8001150:	20000000 	.word	0x20000000

08001154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_MspInit+0x2c>)
 8001158:	6999      	ldr	r1, [r3, #24]
 800115a:	2201      	movs	r2, #1
 800115c:	4311      	orrs	r1, r2
 800115e:	6199      	str	r1, [r3, #24]
 8001160:	6999      	ldr	r1, [r3, #24]
 8001162:	400a      	ands	r2, r1
 8001164:	9200      	str	r2, [sp, #0]
 8001166:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001168:	69da      	ldr	r2, [r3, #28]
 800116a:	2180      	movs	r1, #128	; 0x80
 800116c:	0549      	lsls	r1, r1, #21
 800116e:	430a      	orrs	r2, r1
 8001170:	61da      	str	r2, [r3, #28]
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	400b      	ands	r3, r1
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	b002      	add	sp, #8
 800117c:	4770      	bx	lr
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	40021000 	.word	0x40021000

08001184 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001184:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001186:	6802      	ldr	r2, [r0, #0]
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <HAL_CRC_MspInit+0x24>)
 800118a:	429a      	cmp	r2, r3
 800118c:	d001      	beq.n	8001192 <HAL_CRC_MspInit+0xe>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800118e:	b002      	add	sp, #8
 8001190:	4770      	bx	lr
    __HAL_RCC_CRC_CLK_ENABLE();
 8001192:	4a06      	ldr	r2, [pc, #24]	; (80011ac <HAL_CRC_MspInit+0x28>)
 8001194:	6951      	ldr	r1, [r2, #20]
 8001196:	2340      	movs	r3, #64	; 0x40
 8001198:	4319      	orrs	r1, r3
 800119a:	6151      	str	r1, [r2, #20]
 800119c:	6952      	ldr	r2, [r2, #20]
 800119e:	4013      	ands	r3, r2
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	9b01      	ldr	r3, [sp, #4]
}
 80011a4:	e7f3      	b.n	800118e <HAL_CRC_MspInit+0xa>
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	40023000 	.word	0x40023000
 80011ac:	40021000 	.word	0x40021000

080011b0 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80011b0:	6802      	ldr	r2, [r0, #0]
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_RTC_MspInit+0x18>)
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d000      	beq.n	80011ba <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011b8:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 80011ba:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_RTC_MspInit+0x1c>)
 80011bc:	6a11      	ldr	r1, [r2, #32]
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	430b      	orrs	r3, r1
 80011c4:	6213      	str	r3, [r2, #32]
}
 80011c6:	e7f7      	b.n	80011b8 <HAL_RTC_MspInit+0x8>
 80011c8:	40002800 	.word	0x40002800
 80011cc:	40021000 	.word	0x40021000

080011d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011d0:	b510      	push	{r4, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d6:	2214      	movs	r2, #20
 80011d8:	2100      	movs	r1, #0
 80011da:	a803      	add	r0, sp, #12
 80011dc:	f002 f908 	bl	80033f0 <memset>
  if(hspi->Instance==SPI1)
 80011e0:	6822      	ldr	r2, [r4, #0]
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_SPI_MspInit+0x5c>)
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d001      	beq.n	80011ec <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011e8:	b008      	add	sp, #32
 80011ea:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ec:	4b10      	ldr	r3, [pc, #64]	; (8001230 <HAL_SPI_MspInit+0x60>)
 80011ee:	6999      	ldr	r1, [r3, #24]
 80011f0:	2080      	movs	r0, #128	; 0x80
 80011f2:	0140      	lsls	r0, r0, #5
 80011f4:	4301      	orrs	r1, r0
 80011f6:	6199      	str	r1, [r3, #24]
 80011f8:	699a      	ldr	r2, [r3, #24]
 80011fa:	4002      	ands	r2, r0
 80011fc:	9201      	str	r2, [sp, #4]
 80011fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	695a      	ldr	r2, [r3, #20]
 8001202:	2180      	movs	r1, #128	; 0x80
 8001204:	0289      	lsls	r1, r1, #10
 8001206:	430a      	orrs	r2, r1
 8001208:	615a      	str	r2, [r3, #20]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	400b      	ands	r3, r1
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001212:	23e0      	movs	r3, #224	; 0xe0
 8001214:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	3bde      	subs	r3, #222	; 0xde
 8001218:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800121a:	3301      	adds	r3, #1
 800121c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	2090      	movs	r0, #144	; 0x90
 8001220:	a903      	add	r1, sp, #12
 8001222:	05c0      	lsls	r0, r0, #23
 8001224:	f000 f9c4 	bl	80015b0 <HAL_GPIO_Init>
}
 8001228:	e7de      	b.n	80011e8 <HAL_SPI_MspInit+0x18>
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	40013000 	.word	0x40013000
 8001230:	40021000 	.word	0x40021000

08001234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001234:	b510      	push	{r4, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123a:	2214      	movs	r2, #20
 800123c:	2100      	movs	r1, #0
 800123e:	a803      	add	r0, sp, #12
 8001240:	f002 f8d6 	bl	80033f0 <memset>
  if(huart->Instance==USART1)
 8001244:	6822      	ldr	r2, [r4, #0]
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <HAL_UART_MspInit+0x70>)
 8001248:	429a      	cmp	r2, r3
 800124a:	d001      	beq.n	8001250 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800124c:	b008      	add	sp, #32
 800124e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001250:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_UART_MspInit+0x74>)
 8001252:	6999      	ldr	r1, [r3, #24]
 8001254:	2080      	movs	r0, #128	; 0x80
 8001256:	01c0      	lsls	r0, r0, #7
 8001258:	4301      	orrs	r1, r0
 800125a:	6199      	str	r1, [r3, #24]
 800125c:	699a      	ldr	r2, [r3, #24]
 800125e:	4002      	ands	r2, r0
 8001260:	9201      	str	r2, [sp, #4]
 8001262:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	695a      	ldr	r2, [r3, #20]
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	0289      	lsls	r1, r1, #10
 800126a:	430a      	orrs	r2, r1
 800126c:	615a      	str	r2, [r3, #20]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	400b      	ands	r3, r1
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001276:	23c0      	movs	r3, #192	; 0xc0
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001280:	3301      	adds	r3, #1
 8001282:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001284:	3b02      	subs	r3, #2
 8001286:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	2090      	movs	r0, #144	; 0x90
 800128a:	a903      	add	r1, sp, #12
 800128c:	05c0      	lsls	r0, r0, #23
 800128e:	f000 f98f 	bl	80015b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	201b      	movs	r0, #27
 8001298:	f000 f8bc 	bl	8001414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800129c:	201b      	movs	r0, #27
 800129e:	f000 f8eb 	bl	8001478 <HAL_NVIC_EnableIRQ>
}
 80012a2:	e7d3      	b.n	800124c <HAL_UART_MspInit+0x18>
 80012a4:	40013800 	.word	0x40013800
 80012a8:	40021000 	.word	0x40021000

080012ac <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80012ac:	b510      	push	{r4, lr}
  if(huart->Instance==USART1)
 80012ae:	6802      	ldr	r2, [r0, #0]
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_UART_MspDeInit+0x2c>)
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d000      	beq.n	80012b8 <HAL_UART_MspDeInit+0xc>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80012b6:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_DISABLE();
 80012b8:	4a08      	ldr	r2, [pc, #32]	; (80012dc <HAL_UART_MspDeInit+0x30>)
 80012ba:	6993      	ldr	r3, [r2, #24]
 80012bc:	4908      	ldr	r1, [pc, #32]	; (80012e0 <HAL_UART_MspDeInit+0x34>)
 80012be:	400b      	ands	r3, r1
 80012c0:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80012c2:	21c0      	movs	r1, #192	; 0xc0
 80012c4:	2090      	movs	r0, #144	; 0x90
 80012c6:	00c9      	lsls	r1, r1, #3
 80012c8:	05c0      	lsls	r0, r0, #23
 80012ca:	f000 fa37 	bl	800173c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80012ce:	201b      	movs	r0, #27
 80012d0:	f000 f8de 	bl	8001490 <HAL_NVIC_DisableIRQ>
}
 80012d4:	e7ef      	b.n	80012b6 <HAL_UART_MspDeInit+0xa>
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	40013800 	.word	0x40013800
 80012dc:	40021000 	.word	0x40021000
 80012e0:	ffffbfff 	.word	0xffffbfff

080012e4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012e4:	4770      	bx	lr

080012e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e6:	e7fe      	b.n	80012e6 <HardFault_Handler>

080012e8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012e8:	4770      	bx	lr

080012ea <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ea:	4770      	bx	lr

080012ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ee:	f000 f86d 	bl	80013cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f2:	bd10      	pop	{r4, pc}

080012f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012f6:	4802      	ldr	r0, [pc, #8]	; (8001300 <USART1_IRQHandler+0xc>)
 80012f8:	f001 fd2c 	bl	8002d54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012fc:	bd10      	pop	{r4, pc}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	20000290 	.word	0x20000290

08001304 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001304:	4770      	bx	lr
	...

08001308 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800130a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <LoopForever+0x6>)
  ldr r1, =_edata
 800130e:	490e      	ldr	r1, [pc, #56]	; (8001348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001310:	4a0e      	ldr	r2, [pc, #56]	; (800134c <LoopForever+0xe>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001314:	e002      	b.n	800131c <LoopCopyDataInit>

08001316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131a:	3304      	adds	r3, #4

0800131c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800131c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001320:	d3f9      	bcc.n	8001316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001324:	4c0b      	ldr	r4, [pc, #44]	; (8001354 <LoopForever+0x16>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001328:	e001      	b.n	800132e <LoopFillZerobss>

0800132a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800132c:	3204      	adds	r2, #4

0800132e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001330:	d3fb      	bcc.n	800132a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001332:	f7ff ffe7 	bl	8001304 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001336:	f002 f837 	bl	80033a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800133a:	f7ff f89b 	bl	8000474 <main>

0800133e <LoopForever>:

LoopForever:
    b LoopForever
 800133e:	e7fe      	b.n	800133e <LoopForever>
  ldr   r0, =_estack
 8001340:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001348:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800134c:	08003598 	.word	0x08003598
  ldr r2, =_sbss
 8001350:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001354:	200004c0 	.word	0x200004c0

08001358 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC1_IRQHandler>
	...

0800135c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b510      	push	{r4, lr}
 800135e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_InitTick+0x44>)
 8001362:	7819      	ldrb	r1, [r3, #0]
 8001364:	20fa      	movs	r0, #250	; 0xfa
 8001366:	0080      	lsls	r0, r0, #2
 8001368:	f7fe fece 	bl	8000108 <__udivsi3>
 800136c:	0001      	movs	r1, r0
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_InitTick+0x48>)
 8001370:	6818      	ldr	r0, [r3, #0]
 8001372:	f7fe fec9 	bl	8000108 <__udivsi3>
 8001376:	f000 f89b 	bl	80014b0 <HAL_SYSTICK_Config>
 800137a:	2800      	cmp	r0, #0
 800137c:	d10d      	bne.n	800139a <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137e:	2c03      	cmp	r4, #3
 8001380:	d901      	bls.n	8001386 <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001382:	2001      	movs	r0, #1
 8001384:	e00a      	b.n	800139c <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001386:	3001      	adds	r0, #1
 8001388:	2200      	movs	r2, #0
 800138a:	0021      	movs	r1, r4
 800138c:	4240      	negs	r0, r0
 800138e:	f000 f841 	bl	8001414 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_InitTick+0x4c>)
 8001394:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 8001396:	2000      	movs	r0, #0
 8001398:	e000      	b.n	800139c <HAL_InitTick+0x40>
    return HAL_ERROR;
 800139a:	2001      	movs	r0, #1
}
 800139c:	bd10      	pop	{r4, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	20000018 	.word	0x20000018
 80013a4:	20000014 	.word	0x20000014
 80013a8:	2000001c 	.word	0x2000001c

080013ac <HAL_Init>:
{
 80013ac:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ae:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <HAL_Init+0x1c>)
 80013b0:	6813      	ldr	r3, [r2, #0]
 80013b2:	2110      	movs	r1, #16
 80013b4:	430b      	orrs	r3, r1
 80013b6:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff ffcf 	bl	800135c <HAL_InitTick>
  HAL_MspInit();
 80013be:	f7ff fec9 	bl	8001154 <HAL_MspInit>
}
 80013c2:	2000      	movs	r0, #0
 80013c4:	bd10      	pop	{r4, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	40022000 	.word	0x40022000

080013cc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80013cc:	4a03      	ldr	r2, [pc, #12]	; (80013dc <HAL_IncTick+0x10>)
 80013ce:	6811      	ldr	r1, [r2, #0]
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <HAL_IncTick+0x14>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	185b      	adds	r3, r3, r1
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	4770      	bx	lr
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	200004bc 	.word	0x200004bc
 80013e0:	20000018 	.word	0x20000018

080013e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80013e4:	4b01      	ldr	r3, [pc, #4]	; (80013ec <HAL_GetTick+0x8>)
 80013e6:	6818      	ldr	r0, [r3, #0]
}
 80013e8:	4770      	bx	lr
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	200004bc 	.word	0x200004bc

080013f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f0:	b570      	push	{r4, r5, r6, lr}
 80013f2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013f4:	f7ff fff6 	bl	80013e4 <HAL_GetTick>
 80013f8:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fa:	1c63      	adds	r3, r4, #1
 80013fc:	d002      	beq.n	8001404 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <HAL_Delay+0x20>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001404:	f7ff ffee 	bl	80013e4 <HAL_GetTick>
 8001408:	1b40      	subs	r0, r0, r5
 800140a:	42a0      	cmp	r0, r4
 800140c:	d3fa      	bcc.n	8001404 <HAL_Delay+0x14>
  {
  }
}
 800140e:	bd70      	pop	{r4, r5, r6, pc}
 8001410:	20000018 	.word	0x20000018

08001414 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001414:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8001416:	2800      	cmp	r0, #0
 8001418:	db11      	blt.n	800143e <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800141a:	0883      	lsrs	r3, r0, #2
 800141c:	4d14      	ldr	r5, [pc, #80]	; (8001470 <HAL_NVIC_SetPriority+0x5c>)
 800141e:	33c0      	adds	r3, #192	; 0xc0
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	595c      	ldr	r4, [r3, r5]
 8001424:	2203      	movs	r2, #3
 8001426:	4010      	ands	r0, r2
 8001428:	00c0      	lsls	r0, r0, #3
 800142a:	32fc      	adds	r2, #252	; 0xfc
 800142c:	0016      	movs	r6, r2
 800142e:	4086      	lsls	r6, r0
 8001430:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001432:	0189      	lsls	r1, r1, #6
 8001434:	400a      	ands	r2, r1
 8001436:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001438:	4322      	orrs	r2, r4
 800143a:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800143c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800143e:	b2c0      	uxtb	r0, r0
 8001440:	230f      	movs	r3, #15
 8001442:	4003      	ands	r3, r0
 8001444:	3b08      	subs	r3, #8
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	3306      	adds	r3, #6
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4a09      	ldr	r2, [pc, #36]	; (8001474 <HAL_NVIC_SetPriority+0x60>)
 800144e:	4694      	mov	ip, r2
 8001450:	4463      	add	r3, ip
 8001452:	685d      	ldr	r5, [r3, #4]
 8001454:	2403      	movs	r4, #3
 8001456:	4020      	ands	r0, r4
 8001458:	00c0      	lsls	r0, r0, #3
 800145a:	22ff      	movs	r2, #255	; 0xff
 800145c:	0014      	movs	r4, r2
 800145e:	4084      	lsls	r4, r0
 8001460:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001462:	0189      	lsls	r1, r1, #6
 8001464:	4011      	ands	r1, r2
 8001466:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001468:	4329      	orrs	r1, r5
 800146a:	6059      	str	r1, [r3, #4]
 800146c:	e7e6      	b.n	800143c <HAL_NVIC_SetPriority+0x28>
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001478:	2800      	cmp	r0, #0
 800147a:	db05      	blt.n	8001488 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147c:	231f      	movs	r3, #31
 800147e:	4018      	ands	r0, r3
 8001480:	3b1e      	subs	r3, #30
 8001482:	4083      	lsls	r3, r0
 8001484:	4a01      	ldr	r2, [pc, #4]	; (800148c <HAL_NVIC_EnableIRQ+0x14>)
 8001486:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001488:	4770      	bx	lr
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	e000e100 	.word	0xe000e100

08001490 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001490:	2800      	cmp	r0, #0
 8001492:	db0a      	blt.n	80014aa <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001494:	231f      	movs	r3, #31
 8001496:	4018      	ands	r0, r3
 8001498:	3b1e      	subs	r3, #30
 800149a:	4083      	lsls	r3, r0
 800149c:	4903      	ldr	r1, [pc, #12]	; (80014ac <HAL_NVIC_DisableIRQ+0x1c>)
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	508b      	str	r3, [r1, r2]
 80014a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80014a6:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100

080014b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b0:	3801      	subs	r0, #1
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HAL_SYSTICK_Config+0x2c>)
 80014b4:	4298      	cmp	r0, r3
 80014b6:	d80f      	bhi.n	80014d8 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b8:	4a09      	ldr	r2, [pc, #36]	; (80014e0 <HAL_SYSTICK_Config+0x30>)
 80014ba:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014bc:	4809      	ldr	r0, [pc, #36]	; (80014e4 <HAL_SYSTICK_Config+0x34>)
 80014be:	6a03      	ldr	r3, [r0, #32]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	0a1b      	lsrs	r3, r3, #8
 80014c4:	21c0      	movs	r1, #192	; 0xc0
 80014c6:	0609      	lsls	r1, r1, #24
 80014c8:	430b      	orrs	r3, r1
 80014ca:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	2300      	movs	r3, #0
 80014ce:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d0:	3307      	adds	r3, #7
 80014d2:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80014d6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80014d8:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 80014da:	e7fc      	b.n	80014d6 <HAL_SYSTICK_Config+0x26>
 80014dc:	00ffffff 	.word	0x00ffffff
 80014e0:	e000e010 	.word	0xe000e010
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <CRC_Calculate8>:
  * @{
  */
uint32_t CRC_Calculate8(uint8_t* arr, uint32_t count) {

	/* Calculate CRC */
	while (count--) {
 80014e8:	e004      	b.n	80014f4 <CRC_Calculate8+0xc>
		/* Set new value */
		CRC->DR = *arr++;
 80014ea:	7801      	ldrb	r1, [r0, #0]
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <CRC_Calculate8+0x18>)
 80014ee:	6011      	str	r1, [r2, #0]
	while (count--) {
 80014f0:	0019      	movs	r1, r3
		CRC->DR = *arr++;
 80014f2:	3001      	adds	r0, #1
	while (count--) {
 80014f4:	1e4b      	subs	r3, r1, #1
 80014f6:	2900      	cmp	r1, #0
 80014f8:	d1f7      	bne.n	80014ea <CRC_Calculate8+0x2>
	}

	/* Return data */
	return CRC->DR;
 80014fa:	4b01      	ldr	r3, [pc, #4]	; (8001500 <CRC_Calculate8+0x18>)
 80014fc:	6818      	ldr	r0, [r3, #0]
}
 80014fe:	4770      	bx	lr
 8001500:	40023000 	.word	0x40023000

08001504 <CRC_ResetDR>:

void CRC_ResetDR(void)
{
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8001504:	4b01      	ldr	r3, [pc, #4]	; (800150c <CRC_ResetDR+0x8>)
 8001506:	2201      	movs	r2, #1
 8001508:	609a      	str	r2, [r3, #8]
}
 800150a:	4770      	bx	lr
 800150c:	40023000 	.word	0x40023000

08001510 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001510:	b510      	push	{r4, lr}
 8001512:	1e04      	subs	r4, r0, #0
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001514:	d025      	beq.n	8001562 <HAL_CRC_Init+0x52>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001516:	7d43      	ldrb	r3, [r0, #21]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d01a      	beq.n	8001552 <HAL_CRC_Init+0x42>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800151c:	2302      	movs	r3, #2
 800151e:	7563      	strb	r3, [r4, #21]
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001520:	7923      	ldrb	r3, [r4, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d119      	bne.n	800155a <HAL_CRC_Init+0x4a>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	4252      	negs	r2, r2
 800152c:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800152e:	6822      	ldr	r2, [r4, #0]
 8001530:	6893      	ldr	r3, [r2, #8]
 8001532:	2160      	movs	r1, #96	; 0x60
 8001534:	438b      	bics	r3, r1
 8001536:	68e1      	ldr	r1, [r4, #12]
 8001538:	430b      	orrs	r3, r1
 800153a:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800153c:	6822      	ldr	r2, [r4, #0]
 800153e:	6893      	ldr	r3, [r2, #8]
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	438b      	bics	r3, r1
 8001544:	6921      	ldr	r1, [r4, #16]
 8001546:	430b      	orrs	r3, r1
 8001548:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800154a:	2301      	movs	r3, #1
 800154c:	7563      	strb	r3, [r4, #21]

  /* Return function status */
  return HAL_OK;
 800154e:	2000      	movs	r0, #0
}
 8001550:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8001552:	7503      	strb	r3, [r0, #20]
    HAL_CRC_MspInit(hcrc);
 8001554:	f7ff fe16 	bl	8001184 <HAL_CRC_MspInit>
 8001558:	e7e0      	b.n	800151c <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800155a:	6823      	ldr	r3, [r4, #0]
 800155c:	68a2      	ldr	r2, [r4, #8]
 800155e:	611a      	str	r2, [r3, #16]
 8001560:	e7e5      	b.n	800152e <HAL_CRC_Init+0x1e>
    return HAL_ERROR;
 8001562:	2001      	movs	r0, #1
 8001564:	e7f4      	b.n	8001550 <HAL_CRC_Init+0x40>

08001566 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001566:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001568:	2321      	movs	r3, #33	; 0x21
 800156a:	5cc3      	ldrb	r3, [r0, r3]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d003      	beq.n	8001578 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001570:	2304      	movs	r3, #4
 8001572:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001574:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001576:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001578:	6802      	ldr	r2, [r0, #0]
 800157a:	6813      	ldr	r3, [r2, #0]
 800157c:	210e      	movs	r1, #14
 800157e:	438b      	bics	r3, r1
 8001580:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001582:	6801      	ldr	r1, [r0, #0]
 8001584:	680a      	ldr	r2, [r1, #0]
 8001586:	2301      	movs	r3, #1
 8001588:	439a      	bics	r2, r3
 800158a:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800158c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800158e:	0019      	movs	r1, r3
 8001590:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001592:	40a1      	lsls	r1, r4
 8001594:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001596:	2221      	movs	r2, #33	; 0x21
 8001598:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800159a:	331f      	adds	r3, #31
 800159c:	2200      	movs	r2, #0
 800159e:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 80015a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d002      	beq.n	80015ac <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 80015a6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80015a8:	2000      	movs	r0, #0
 80015aa:	e7e4      	b.n	8001576 <HAL_DMA_Abort_IT+0x10>
 80015ac:	2000      	movs	r0, #0
 80015ae:	e7e2      	b.n	8001576 <HAL_DMA_Abort_IT+0x10>

080015b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80015b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b2:	46c6      	mov	lr, r8
 80015b4:	b500      	push	{lr}
 80015b6:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 80015b8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ba:	e038      	b.n	800162e <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015bc:	2603      	movs	r6, #3
 80015be:	e000      	b.n	80015c2 <HAL_GPIO_Init+0x12>
 80015c0:	2600      	movs	r6, #0
 80015c2:	40ae      	lsls	r6, r5
 80015c4:	0035      	movs	r5, r6
 80015c6:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015c8:	3402      	adds	r4, #2
 80015ca:	00a4      	lsls	r4, r4, #2
 80015cc:	4e55      	ldr	r6, [pc, #340]	; (8001724 <HAL_GPIO_Init+0x174>)
 80015ce:	51a5      	str	r5, [r4, r6]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d0:	4c55      	ldr	r4, [pc, #340]	; (8001728 <HAL_GPIO_Init+0x178>)
 80015d2:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80015d4:	4642      	mov	r2, r8
 80015d6:	43d4      	mvns	r4, r2
 80015d8:	002e      	movs	r6, r5
 80015da:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015dc:	684a      	ldr	r2, [r1, #4]
 80015de:	03d2      	lsls	r2, r2, #15
 80015e0:	d502      	bpl.n	80015e8 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 80015e2:	4642      	mov	r2, r8
 80015e4:	4315      	orrs	r5, r2
 80015e6:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 80015e8:	4d4f      	ldr	r5, [pc, #316]	; (8001728 <HAL_GPIO_Init+0x178>)
 80015ea:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 80015ec:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80015ee:	002e      	movs	r6, r5
 80015f0:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015f2:	684a      	ldr	r2, [r1, #4]
 80015f4:	0392      	lsls	r2, r2, #14
 80015f6:	d502      	bpl.n	80015fe <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 80015f8:	4642      	mov	r2, r8
 80015fa:	4315      	orrs	r5, r2
 80015fc:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 80015fe:	4d4a      	ldr	r5, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x178>)
 8001600:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001602:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8001604:	002e      	movs	r6, r5
 8001606:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001608:	684a      	ldr	r2, [r1, #4]
 800160a:	02d2      	lsls	r2, r2, #11
 800160c:	d502      	bpl.n	8001614 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 800160e:	4642      	mov	r2, r8
 8001610:	4315      	orrs	r5, r2
 8001612:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 8001614:	4d44      	ldr	r5, [pc, #272]	; (8001728 <HAL_GPIO_Init+0x178>)
 8001616:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001618:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 800161a:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800161c:	684a      	ldr	r2, [r1, #4]
 800161e:	0292      	lsls	r2, r2, #10
 8001620:	d502      	bpl.n	8001628 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8001622:	4642      	mov	r2, r8
 8001624:	432a      	orrs	r2, r5
 8001626:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8001628:	4a3f      	ldr	r2, [pc, #252]	; (8001728 <HAL_GPIO_Init+0x178>)
 800162a:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 800162c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162e:	680a      	ldr	r2, [r1, #0]
 8001630:	0014      	movs	r4, r2
 8001632:	40dc      	lsrs	r4, r3
 8001634:	d071      	beq.n	800171a <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001636:	2501      	movs	r5, #1
 8001638:	409d      	lsls	r5, r3
 800163a:	402a      	ands	r2, r5
 800163c:	4690      	mov	r8, r2
    if (iocurrent != 0x00u)
 800163e:	d0f5      	beq.n	800162c <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001640:	684c      	ldr	r4, [r1, #4]
 8001642:	2c02      	cmp	r4, #2
 8001644:	d001      	beq.n	800164a <HAL_GPIO_Init+0x9a>
 8001646:	2c12      	cmp	r4, #18
 8001648:	d10e      	bne.n	8001668 <HAL_GPIO_Init+0xb8>
        temp = GPIOx->AFR[position >> 3u];
 800164a:	08dc      	lsrs	r4, r3, #3
 800164c:	3408      	adds	r4, #8
 800164e:	00a4      	lsls	r4, r4, #2
 8001650:	5827      	ldr	r7, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001652:	2607      	movs	r6, #7
 8001654:	401e      	ands	r6, r3
 8001656:	00b6      	lsls	r6, r6, #2
 8001658:	220f      	movs	r2, #15
 800165a:	40b2      	lsls	r2, r6
 800165c:	4397      	bics	r7, r2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800165e:	690a      	ldr	r2, [r1, #16]
 8001660:	40b2      	lsls	r2, r6
 8001662:	0016      	movs	r6, r2
 8001664:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3u] = temp;
 8001666:	5026      	str	r6, [r4, r0]
      temp = GPIOx->MODER;
 8001668:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800166a:	005f      	lsls	r7, r3, #1
 800166c:	2403      	movs	r4, #3
 800166e:	0026      	movs	r6, r4
 8001670:	40be      	lsls	r6, r7
 8001672:	43f6      	mvns	r6, r6
 8001674:	4032      	ands	r2, r6
 8001676:	4694      	mov	ip, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001678:	684a      	ldr	r2, [r1, #4]
 800167a:	4014      	ands	r4, r2
 800167c:	40bc      	lsls	r4, r7
 800167e:	4662      	mov	r2, ip
 8001680:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8001682:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001684:	684c      	ldr	r4, [r1, #4]
 8001686:	1e62      	subs	r2, r4, #1
 8001688:	2a01      	cmp	r2, #1
 800168a:	d903      	bls.n	8001694 <HAL_GPIO_Init+0xe4>
 800168c:	2c11      	cmp	r4, #17
 800168e:	d001      	beq.n	8001694 <HAL_GPIO_Init+0xe4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001690:	2c12      	cmp	r4, #18
 8001692:	d110      	bne.n	80016b6 <HAL_GPIO_Init+0x106>
        temp = GPIOx->OSPEEDR;
 8001694:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001696:	4034      	ands	r4, r6
 8001698:	46a4      	mov	ip, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800169a:	68cc      	ldr	r4, [r1, #12]
 800169c:	40bc      	lsls	r4, r7
 800169e:	4662      	mov	r2, ip
 80016a0:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 80016a2:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80016a4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a6:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016a8:	684a      	ldr	r2, [r1, #4]
 80016aa:	0912      	lsrs	r2, r2, #4
 80016ac:	2501      	movs	r5, #1
 80016ae:	4015      	ands	r5, r2
 80016b0:	409d      	lsls	r5, r3
 80016b2:	4325      	orrs	r5, r4
        GPIOx->OTYPER = temp;
 80016b4:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80016b6:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016b8:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016ba:	688c      	ldr	r4, [r1, #8]
 80016bc:	40bc      	lsls	r4, r7
 80016be:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 80016c0:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016c2:	684a      	ldr	r2, [r1, #4]
 80016c4:	00d2      	lsls	r2, r2, #3
 80016c6:	d5b1      	bpl.n	800162c <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c8:	4d18      	ldr	r5, [pc, #96]	; (800172c <HAL_GPIO_Init+0x17c>)
 80016ca:	69ae      	ldr	r6, [r5, #24]
 80016cc:	2401      	movs	r4, #1
 80016ce:	4326      	orrs	r6, r4
 80016d0:	61ae      	str	r6, [r5, #24]
 80016d2:	69ad      	ldr	r5, [r5, #24]
 80016d4:	402c      	ands	r4, r5
 80016d6:	9401      	str	r4, [sp, #4]
 80016d8:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80016da:	089c      	lsrs	r4, r3, #2
 80016dc:	1ca5      	adds	r5, r4, #2
 80016de:	00ad      	lsls	r5, r5, #2
 80016e0:	4e10      	ldr	r6, [pc, #64]	; (8001724 <HAL_GPIO_Init+0x174>)
 80016e2:	59af      	ldr	r7, [r5, r6]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016e4:	2503      	movs	r5, #3
 80016e6:	401d      	ands	r5, r3
 80016e8:	00ad      	lsls	r5, r5, #2
 80016ea:	260f      	movs	r6, #15
 80016ec:	40ae      	lsls	r6, r5
 80016ee:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016f0:	2690      	movs	r6, #144	; 0x90
 80016f2:	05f6      	lsls	r6, r6, #23
 80016f4:	42b0      	cmp	r0, r6
 80016f6:	d100      	bne.n	80016fa <HAL_GPIO_Init+0x14a>
 80016f8:	e762      	b.n	80015c0 <HAL_GPIO_Init+0x10>
 80016fa:	4e0d      	ldr	r6, [pc, #52]	; (8001730 <HAL_GPIO_Init+0x180>)
 80016fc:	42b0      	cmp	r0, r6
 80016fe:	d008      	beq.n	8001712 <HAL_GPIO_Init+0x162>
 8001700:	4e0c      	ldr	r6, [pc, #48]	; (8001734 <HAL_GPIO_Init+0x184>)
 8001702:	42b0      	cmp	r0, r6
 8001704:	d007      	beq.n	8001716 <HAL_GPIO_Init+0x166>
 8001706:	4e0c      	ldr	r6, [pc, #48]	; (8001738 <HAL_GPIO_Init+0x188>)
 8001708:	42b0      	cmp	r0, r6
 800170a:	d100      	bne.n	800170e <HAL_GPIO_Init+0x15e>
 800170c:	e756      	b.n	80015bc <HAL_GPIO_Init+0xc>
 800170e:	2605      	movs	r6, #5
 8001710:	e757      	b.n	80015c2 <HAL_GPIO_Init+0x12>
 8001712:	2601      	movs	r6, #1
 8001714:	e755      	b.n	80015c2 <HAL_GPIO_Init+0x12>
 8001716:	2602      	movs	r6, #2
 8001718:	e753      	b.n	80015c2 <HAL_GPIO_Init+0x12>
  } 
}
 800171a:	b002      	add	sp, #8
 800171c:	bc04      	pop	{r2}
 800171e:	4690      	mov	r8, r2
 8001720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	40010000 	.word	0x40010000
 8001728:	40010400 	.word	0x40010400
 800172c:	40021000 	.word	0x40021000
 8001730:	48000400 	.word	0x48000400
 8001734:	48000800 	.word	0x48000800
 8001738:	48000c00 	.word	0x48000c00

0800173c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800173c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800173e:	46ce      	mov	lr, r9
 8001740:	4647      	mov	r7, r8
 8001742:	b580      	push	{r7, lr}
 8001744:	4689      	mov	r9, r1
  uint32_t position = 0x00u;
 8001746:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001748:	e024      	b.n	8001794 <HAL_GPIO_DeInit+0x58>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800174a:	2103      	movs	r1, #3
 800174c:	4688      	mov	r8, r1
 800174e:	e001      	b.n	8001754 <HAL_GPIO_DeInit+0x18>
 8001750:	2100      	movs	r1, #0
 8001752:	4688      	mov	r8, r1
 8001754:	4641      	mov	r1, r8
 8001756:	40a1      	lsls	r1, r4
 8001758:	42a9      	cmp	r1, r5
 800175a:	d045      	beq.n	80017e8 <HAL_GPIO_DeInit+0xac>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800175c:	6805      	ldr	r5, [r0, #0]
 800175e:	005e      	lsls	r6, r3, #1
 8001760:	2403      	movs	r4, #3
 8001762:	40b4      	lsls	r4, r6
 8001764:	43e4      	mvns	r4, r4
 8001766:	4025      	ands	r5, r4
 8001768:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 800176a:	08dd      	lsrs	r5, r3, #3
 800176c:	3508      	adds	r5, #8
 800176e:	00ad      	lsls	r5, r5, #2
 8001770:	582f      	ldr	r7, [r5, r0]
 8001772:	2607      	movs	r6, #7
 8001774:	401e      	ands	r6, r3
 8001776:	00b6      	lsls	r6, r6, #2
 8001778:	210f      	movs	r1, #15
 800177a:	40b1      	lsls	r1, r6
 800177c:	438f      	bics	r7, r1
 800177e:	502f      	str	r7, [r5, r0]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001780:	6885      	ldr	r5, [r0, #8]
 8001782:	4025      	ands	r5, r4
 8001784:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001786:	6845      	ldr	r5, [r0, #4]
 8001788:	4395      	bics	r5, r2
 800178a:	6045      	str	r5, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800178c:	68c2      	ldr	r2, [r0, #12]
 800178e:	4014      	ands	r4, r2
 8001790:	60c4      	str	r4, [r0, #12]
    }

    position++;
 8001792:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8001794:	464a      	mov	r2, r9
 8001796:	40da      	lsrs	r2, r3
 8001798:	d03c      	beq.n	8001814 <HAL_GPIO_DeInit+0xd8>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800179a:	2201      	movs	r2, #1
 800179c:	409a      	lsls	r2, r3
 800179e:	464e      	mov	r6, r9
 80017a0:	4016      	ands	r6, r2
    if (iocurrent != 0x00u)
 80017a2:	d0f6      	beq.n	8001792 <HAL_GPIO_DeInit+0x56>
      tmp = SYSCFG->EXTICR[position >> 2u];
 80017a4:	0899      	lsrs	r1, r3, #2
 80017a6:	468c      	mov	ip, r1
 80017a8:	1c8c      	adds	r4, r1, #2
 80017aa:	00a4      	lsls	r4, r4, #2
 80017ac:	4d1b      	ldr	r5, [pc, #108]	; (800181c <HAL_GPIO_DeInit+0xe0>)
 80017ae:	5965      	ldr	r5, [r4, r5]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80017b0:	2403      	movs	r4, #3
 80017b2:	401c      	ands	r4, r3
 80017b4:	00a4      	lsls	r4, r4, #2
 80017b6:	270f      	movs	r7, #15
 80017b8:	40a7      	lsls	r7, r4
 80017ba:	403d      	ands	r5, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80017bc:	2190      	movs	r1, #144	; 0x90
 80017be:	05c9      	lsls	r1, r1, #23
 80017c0:	4288      	cmp	r0, r1
 80017c2:	d0c5      	beq.n	8001750 <HAL_GPIO_DeInit+0x14>
 80017c4:	4916      	ldr	r1, [pc, #88]	; (8001820 <HAL_GPIO_DeInit+0xe4>)
 80017c6:	4288      	cmp	r0, r1
 80017c8:	d008      	beq.n	80017dc <HAL_GPIO_DeInit+0xa0>
 80017ca:	4916      	ldr	r1, [pc, #88]	; (8001824 <HAL_GPIO_DeInit+0xe8>)
 80017cc:	4288      	cmp	r0, r1
 80017ce:	d008      	beq.n	80017e2 <HAL_GPIO_DeInit+0xa6>
 80017d0:	4915      	ldr	r1, [pc, #84]	; (8001828 <HAL_GPIO_DeInit+0xec>)
 80017d2:	4288      	cmp	r0, r1
 80017d4:	d0b9      	beq.n	800174a <HAL_GPIO_DeInit+0xe>
 80017d6:	2105      	movs	r1, #5
 80017d8:	4688      	mov	r8, r1
 80017da:	e7bb      	b.n	8001754 <HAL_GPIO_DeInit+0x18>
 80017dc:	2101      	movs	r1, #1
 80017de:	4688      	mov	r8, r1
 80017e0:	e7b8      	b.n	8001754 <HAL_GPIO_DeInit+0x18>
 80017e2:	2102      	movs	r1, #2
 80017e4:	4688      	mov	r8, r1
 80017e6:	e7b5      	b.n	8001754 <HAL_GPIO_DeInit+0x18>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80017e8:	4c10      	ldr	r4, [pc, #64]	; (800182c <HAL_GPIO_DeInit+0xf0>)
 80017ea:	6825      	ldr	r5, [r4, #0]
 80017ec:	43f6      	mvns	r6, r6
 80017ee:	4035      	ands	r5, r6
 80017f0:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80017f2:	6865      	ldr	r5, [r4, #4]
 80017f4:	4035      	ands	r5, r6
 80017f6:	6065      	str	r5, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80017f8:	68a5      	ldr	r5, [r4, #8]
 80017fa:	4035      	ands	r5, r6
 80017fc:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80017fe:	68e5      	ldr	r5, [r4, #12]
 8001800:	402e      	ands	r6, r5
 8001802:	60e6      	str	r6, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001804:	4e05      	ldr	r6, [pc, #20]	; (800181c <HAL_GPIO_DeInit+0xe0>)
 8001806:	4664      	mov	r4, ip
 8001808:	3402      	adds	r4, #2
 800180a:	00a4      	lsls	r4, r4, #2
 800180c:	59a5      	ldr	r5, [r4, r6]
 800180e:	43bd      	bics	r5, r7
 8001810:	51a5      	str	r5, [r4, r6]
 8001812:	e7a3      	b.n	800175c <HAL_GPIO_DeInit+0x20>
  }
}
 8001814:	bc0c      	pop	{r2, r3}
 8001816:	4690      	mov	r8, r2
 8001818:	4699      	mov	r9, r3
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181c:	40010000 	.word	0x40010000
 8001820:	48000400 	.word	0x48000400
 8001824:	48000800 	.word	0x48000800
 8001828:	48000c00 	.word	0x48000c00
 800182c:	40010400 	.word	0x40010400

08001830 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001830:	6903      	ldr	r3, [r0, #16]
 8001832:	420b      	tst	r3, r1
 8001834:	d101      	bne.n	800183a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001836:	2000      	movs	r0, #0
  }
  return bitstatus;
  }
 8001838:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800183a:	2001      	movs	r0, #1
 800183c:	e7fc      	b.n	8001838 <HAL_GPIO_ReadPin+0x8>

0800183e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800183e:	2a00      	cmp	r2, #0
 8001840:	d101      	bne.n	8001846 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001842:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001844:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001846:	6181      	str	r1, [r0, #24]
 8001848:	e7fc      	b.n	8001844 <HAL_GPIO_WritePin+0x6>

0800184a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800184a:	6943      	ldr	r3, [r0, #20]
 800184c:	4219      	tst	r1, r3
 800184e:	d101      	bne.n	8001854 <HAL_GPIO_TogglePin+0xa>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001850:	6181      	str	r1, [r0, #24]
  }
}
 8001852:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001854:	0409      	lsls	r1, r1, #16
 8001856:	6181      	str	r1, [r0, #24]
 8001858:	e7fb      	b.n	8001852 <HAL_GPIO_TogglePin+0x8>
	...

0800185c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800185c:	b570      	push	{r4, r5, r6, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001862:	d100      	bne.n	8001866 <HAL_RCC_OscConfig+0xa>
 8001864:	e232      	b.n	8001ccc <HAL_RCC_OscConfig+0x470>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001866:	6803      	ldr	r3, [r0, #0]
 8001868:	07db      	lsls	r3, r3, #31
 800186a:	d526      	bpl.n	80018ba <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800186c:	4bae      	ldr	r3, [pc, #696]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	230c      	movs	r3, #12
 8001872:	4013      	ands	r3, r2
 8001874:	2b04      	cmp	r3, #4
 8001876:	d018      	beq.n	80018aa <HAL_RCC_OscConfig+0x4e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001878:	4bab      	ldr	r3, [pc, #684]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	230c      	movs	r3, #12
 800187e:	4013      	ands	r3, r2
 8001880:	2b08      	cmp	r3, #8
 8001882:	d00e      	beq.n	80018a2 <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001884:	6863      	ldr	r3, [r4, #4]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d03c      	beq.n	8001904 <HAL_RCC_OscConfig+0xa8>
 800188a:	2b00      	cmp	r3, #0
 800188c:	d151      	bne.n	8001932 <HAL_RCC_OscConfig+0xd6>
 800188e:	4ba6      	ldr	r3, [pc, #664]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	49a6      	ldr	r1, [pc, #664]	; (8001b2c <HAL_RCC_OscConfig+0x2d0>)
 8001894:	400a      	ands	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	49a5      	ldr	r1, [pc, #660]	; (8001b30 <HAL_RCC_OscConfig+0x2d4>)
 800189c:	400a      	ands	r2, r1
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e036      	b.n	8001910 <HAL_RCC_OscConfig+0xb4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018a2:	4ba1      	ldr	r3, [pc, #644]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	03db      	lsls	r3, r3, #15
 80018a8:	d5ec      	bpl.n	8001884 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018aa:	4b9f      	ldr	r3, [pc, #636]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	039b      	lsls	r3, r3, #14
 80018b0:	d503      	bpl.n	80018ba <HAL_RCC_OscConfig+0x5e>
 80018b2:	6863      	ldr	r3, [r4, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d100      	bne.n	80018ba <HAL_RCC_OscConfig+0x5e>
 80018b8:	e20b      	b.n	8001cd2 <HAL_RCC_OscConfig+0x476>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	079b      	lsls	r3, r3, #30
 80018be:	d573      	bpl.n	80019a8 <HAL_RCC_OscConfig+0x14c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018c0:	4b99      	ldr	r3, [pc, #612]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	220c      	movs	r2, #12
 80018c6:	421a      	tst	r2, r3
 80018c8:	d05d      	beq.n	8001986 <HAL_RCC_OscConfig+0x12a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018ca:	4b97      	ldr	r3, [pc, #604]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	230c      	movs	r3, #12
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d053      	beq.n	800197e <HAL_RCC_OscConfig+0x122>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d6:	68e3      	ldr	r3, [r4, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d100      	bne.n	80018de <HAL_RCC_OscConfig+0x82>
 80018dc:	e086      	b.n	80019ec <HAL_RCC_OscConfig+0x190>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018de:	4a92      	ldr	r2, [pc, #584]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 80018e0:	6813      	ldr	r3, [r2, #0]
 80018e2:	2101      	movs	r1, #1
 80018e4:	430b      	orrs	r3, r1
 80018e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff fd7c 	bl	80013e4 <HAL_GetTick>
 80018ec:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ee:	4b8e      	ldr	r3, [pc, #568]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	079b      	lsls	r3, r3, #30
 80018f4:	d471      	bmi.n	80019da <HAL_RCC_OscConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f6:	f7ff fd75 	bl	80013e4 <HAL_GetTick>
 80018fa:	1b40      	subs	r0, r0, r5
 80018fc:	2802      	cmp	r0, #2
 80018fe:	d9f6      	bls.n	80018ee <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8001900:	2003      	movs	r0, #3
 8001902:	e1e4      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001904:	4a88      	ldr	r2, [pc, #544]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 8001906:	6811      	ldr	r1, [r2, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	025b      	lsls	r3, r3, #9
 800190c:	430b      	orrs	r3, r1
 800190e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001910:	6863      	ldr	r3, [r4, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d025      	beq.n	8001962 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8001916:	f7ff fd65 	bl	80013e4 <HAL_GetTick>
 800191a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191c:	4b82      	ldr	r3, [pc, #520]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	039b      	lsls	r3, r3, #14
 8001922:	d4ca      	bmi.n	80018ba <HAL_RCC_OscConfig+0x5e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fd5e 	bl	80013e4 <HAL_GetTick>
 8001928:	1b40      	subs	r0, r0, r5
 800192a:	2864      	cmp	r0, #100	; 0x64
 800192c:	d9f6      	bls.n	800191c <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 800192e:	2003      	movs	r0, #3
 8001930:	e1cd      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001932:	2b05      	cmp	r3, #5
 8001934:	d009      	beq.n	800194a <HAL_RCC_OscConfig+0xee>
 8001936:	4b7c      	ldr	r3, [pc, #496]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	497c      	ldr	r1, [pc, #496]	; (8001b2c <HAL_RCC_OscConfig+0x2d0>)
 800193c:	400a      	ands	r2, r1
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	497b      	ldr	r1, [pc, #492]	; (8001b30 <HAL_RCC_OscConfig+0x2d4>)
 8001944:	400a      	ands	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e7e2      	b.n	8001910 <HAL_RCC_OscConfig+0xb4>
 800194a:	4b77      	ldr	r3, [pc, #476]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 800194c:	6819      	ldr	r1, [r3, #0]
 800194e:	2280      	movs	r2, #128	; 0x80
 8001950:	02d2      	lsls	r2, r2, #11
 8001952:	430a      	orrs	r2, r1
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	6819      	ldr	r1, [r3, #0]
 8001958:	2280      	movs	r2, #128	; 0x80
 800195a:	0252      	lsls	r2, r2, #9
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	e7d6      	b.n	8001910 <HAL_RCC_OscConfig+0xb4>
        tickstart = HAL_GetTick();
 8001962:	f7ff fd3f 	bl	80013e4 <HAL_GetTick>
 8001966:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001968:	4b6f      	ldr	r3, [pc, #444]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	039b      	lsls	r3, r3, #14
 800196e:	d5a4      	bpl.n	80018ba <HAL_RCC_OscConfig+0x5e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff fd38 	bl	80013e4 <HAL_GetTick>
 8001974:	1b40      	subs	r0, r0, r5
 8001976:	2864      	cmp	r0, #100	; 0x64
 8001978:	d9f6      	bls.n	8001968 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 800197a:	2003      	movs	r0, #3
 800197c:	e1a7      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800197e:	4b6a      	ldr	r3, [pc, #424]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	03db      	lsls	r3, r3, #15
 8001984:	d4a7      	bmi.n	80018d6 <HAL_RCC_OscConfig+0x7a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001986:	4b68      	ldr	r3, [pc, #416]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	079b      	lsls	r3, r3, #30
 800198c:	d504      	bpl.n	8001998 <HAL_RCC_OscConfig+0x13c>
 800198e:	68e3      	ldr	r3, [r4, #12]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d001      	beq.n	8001998 <HAL_RCC_OscConfig+0x13c>
        return HAL_ERROR;
 8001994:	2001      	movs	r0, #1
 8001996:	e19a      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001998:	4963      	ldr	r1, [pc, #396]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 800199a:	680b      	ldr	r3, [r1, #0]
 800199c:	22f8      	movs	r2, #248	; 0xf8
 800199e:	4393      	bics	r3, r2
 80019a0:	6922      	ldr	r2, [r4, #16]
 80019a2:	00d2      	lsls	r2, r2, #3
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	071b      	lsls	r3, r3, #28
 80019ac:	d544      	bpl.n	8001a38 <HAL_RCC_OscConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ae:	69e3      	ldr	r3, [r4, #28]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d02e      	beq.n	8001a12 <HAL_RCC_OscConfig+0x1b6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b4:	4a5c      	ldr	r2, [pc, #368]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 80019b6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80019b8:	2101      	movs	r1, #1
 80019ba:	430b      	orrs	r3, r1
 80019bc:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019be:	f7ff fd11 	bl	80013e4 <HAL_GetTick>
 80019c2:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c4:	4b58      	ldr	r3, [pc, #352]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	079b      	lsls	r3, r3, #30
 80019ca:	d435      	bmi.n	8001a38 <HAL_RCC_OscConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019cc:	f7ff fd0a 	bl	80013e4 <HAL_GetTick>
 80019d0:	1b40      	subs	r0, r0, r5
 80019d2:	2802      	cmp	r0, #2
 80019d4:	d9f6      	bls.n	80019c4 <HAL_RCC_OscConfig+0x168>
        {
          return HAL_TIMEOUT;
 80019d6:	2003      	movs	r0, #3
 80019d8:	e179      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019da:	4953      	ldr	r1, [pc, #332]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 80019dc:	680b      	ldr	r3, [r1, #0]
 80019de:	22f8      	movs	r2, #248	; 0xf8
 80019e0:	4393      	bics	r3, r2
 80019e2:	6922      	ldr	r2, [r4, #16]
 80019e4:	00d2      	lsls	r2, r2, #3
 80019e6:	4313      	orrs	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]
 80019ea:	e7dd      	b.n	80019a8 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 80019ec:	4a4e      	ldr	r2, [pc, #312]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 80019ee:	6813      	ldr	r3, [r2, #0]
 80019f0:	2101      	movs	r1, #1
 80019f2:	438b      	bics	r3, r1
 80019f4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80019f6:	f7ff fcf5 	bl	80013e4 <HAL_GetTick>
 80019fa:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fc:	4b4a      	ldr	r3, [pc, #296]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	079b      	lsls	r3, r3, #30
 8001a02:	d5d1      	bpl.n	80019a8 <HAL_RCC_OscConfig+0x14c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a04:	f7ff fcee 	bl	80013e4 <HAL_GetTick>
 8001a08:	1b40      	subs	r0, r0, r5
 8001a0a:	2802      	cmp	r0, #2
 8001a0c:	d9f6      	bls.n	80019fc <HAL_RCC_OscConfig+0x1a0>
            return HAL_TIMEOUT;
 8001a0e:	2003      	movs	r0, #3
 8001a10:	e15d      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a12:	4a45      	ldr	r2, [pc, #276]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 8001a14:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001a16:	2101      	movs	r1, #1
 8001a18:	438b      	bics	r3, r1
 8001a1a:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fce2 	bl	80013e4 <HAL_GetTick>
 8001a20:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a22:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	079b      	lsls	r3, r3, #30
 8001a28:	d506      	bpl.n	8001a38 <HAL_RCC_OscConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a2a:	f7ff fcdb 	bl	80013e4 <HAL_GetTick>
 8001a2e:	1b40      	subs	r0, r0, r5
 8001a30:	2802      	cmp	r0, #2
 8001a32:	d9f6      	bls.n	8001a22 <HAL_RCC_OscConfig+0x1c6>
        {
          return HAL_TIMEOUT;
 8001a34:	2003      	movs	r0, #3
 8001a36:	e14a      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a38:	6823      	ldr	r3, [r4, #0]
 8001a3a:	075b      	lsls	r3, r3, #29
 8001a3c:	d400      	bmi.n	8001a40 <HAL_RCC_OscConfig+0x1e4>
 8001a3e:	e07f      	b.n	8001b40 <HAL_RCC_OscConfig+0x2e4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a40:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	d41d      	bmi.n	8001a84 <HAL_RCC_OscConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a48:	4a37      	ldr	r2, [pc, #220]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 8001a4a:	69d1      	ldr	r1, [r2, #28]
 8001a4c:	2080      	movs	r0, #128	; 0x80
 8001a4e:	0540      	lsls	r0, r0, #21
 8001a50:	4301      	orrs	r1, r0
 8001a52:	61d1      	str	r1, [r2, #28]
 8001a54:	69d3      	ldr	r3, [r2, #28]
 8001a56:	4003      	ands	r3, r0
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a5c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5e:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <HAL_RCC_OscConfig+0x2d8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	05db      	lsls	r3, r3, #23
 8001a64:	d510      	bpl.n	8001a88 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a66:	68a3      	ldr	r3, [r4, #8]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d021      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x254>
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d136      	bne.n	8001ade <HAL_RCC_OscConfig+0x282>
 8001a70:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 8001a72:	6a1a      	ldr	r2, [r3, #32]
 8001a74:	2101      	movs	r1, #1
 8001a76:	438a      	bics	r2, r1
 8001a78:	621a      	str	r2, [r3, #32]
 8001a7a:	6a1a      	ldr	r2, [r3, #32]
 8001a7c:	3103      	adds	r1, #3
 8001a7e:	438a      	bics	r2, r1
 8001a80:	621a      	str	r2, [r3, #32]
 8001a82:	e01a      	b.n	8001aba <HAL_RCC_OscConfig+0x25e>
    FlagStatus       pwrclkchanged = RESET;
 8001a84:	2500      	movs	r5, #0
 8001a86:	e7ea      	b.n	8001a5e <HAL_RCC_OscConfig+0x202>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a88:	4a2a      	ldr	r2, [pc, #168]	; (8001b34 <HAL_RCC_OscConfig+0x2d8>)
 8001a8a:	6811      	ldr	r1, [r2, #0]
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	430b      	orrs	r3, r1
 8001a92:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001a94:	f7ff fca6 	bl	80013e4 <HAL_GetTick>
 8001a98:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <HAL_RCC_OscConfig+0x2d8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	05db      	lsls	r3, r3, #23
 8001aa0:	d4e1      	bmi.n	8001a66 <HAL_RCC_OscConfig+0x20a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa2:	f7ff fc9f 	bl	80013e4 <HAL_GetTick>
 8001aa6:	1b80      	subs	r0, r0, r6
 8001aa8:	2864      	cmp	r0, #100	; 0x64
 8001aaa:	d9f6      	bls.n	8001a9a <HAL_RCC_OscConfig+0x23e>
          return HAL_TIMEOUT;
 8001aac:	2003      	movs	r0, #3
 8001aae:	e10e      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab0:	4a1d      	ldr	r2, [pc, #116]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 8001ab2:	6a13      	ldr	r3, [r2, #32]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	430b      	orrs	r3, r1
 8001ab8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aba:	68a3      	ldr	r3, [r4, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d024      	beq.n	8001b0a <HAL_RCC_OscConfig+0x2ae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac0:	f7ff fc90 	bl	80013e4 <HAL_GetTick>
 8001ac4:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	079b      	lsls	r3, r3, #30
 8001acc:	d436      	bmi.n	8001b3c <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ace:	f7ff fc89 	bl	80013e4 <HAL_GetTick>
 8001ad2:	1b80      	subs	r0, r0, r6
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_RCC_OscConfig+0x2dc>)
 8001ad6:	4298      	cmp	r0, r3
 8001ad8:	d9f5      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x26a>
        {
          return HAL_TIMEOUT;
 8001ada:	2003      	movs	r0, #3
 8001adc:	e0f7      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ade:	2b05      	cmp	r3, #5
 8001ae0:	d009      	beq.n	8001af6 <HAL_RCC_OscConfig+0x29a>
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 8001ae4:	6a1a      	ldr	r2, [r3, #32]
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	438a      	bics	r2, r1
 8001aea:	621a      	str	r2, [r3, #32]
 8001aec:	6a1a      	ldr	r2, [r3, #32]
 8001aee:	3103      	adds	r1, #3
 8001af0:	438a      	bics	r2, r1
 8001af2:	621a      	str	r2, [r3, #32]
 8001af4:	e7e1      	b.n	8001aba <HAL_RCC_OscConfig+0x25e>
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 8001af8:	6a1a      	ldr	r2, [r3, #32]
 8001afa:	2104      	movs	r1, #4
 8001afc:	430a      	orrs	r2, r1
 8001afe:	621a      	str	r2, [r3, #32]
 8001b00:	6a1a      	ldr	r2, [r3, #32]
 8001b02:	3903      	subs	r1, #3
 8001b04:	430a      	orrs	r2, r1
 8001b06:	621a      	str	r2, [r3, #32]
 8001b08:	e7d7      	b.n	8001aba <HAL_RCC_OscConfig+0x25e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fc6b 	bl	80013e4 <HAL_GetTick>
 8001b0e:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_OscConfig+0x2cc>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	079b      	lsls	r3, r3, #30
 8001b16:	d511      	bpl.n	8001b3c <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b18:	f7ff fc64 	bl	80013e4 <HAL_GetTick>
 8001b1c:	1b80      	subs	r0, r0, r6
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_RCC_OscConfig+0x2dc>)
 8001b20:	4298      	cmp	r0, r3
 8001b22:	d9f5      	bls.n	8001b10 <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_TIMEOUT;
 8001b24:	2003      	movs	r0, #3
 8001b26:	e0d2      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	fffeffff 	.word	0xfffeffff
 8001b30:	fffbffff 	.word	0xfffbffff
 8001b34:	40007000 	.word	0x40007000
 8001b38:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b3c:	2d01      	cmp	r5, #1
 8001b3e:	d033      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x34c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	06db      	lsls	r3, r3, #27
 8001b44:	d510      	bpl.n	8001b68 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b46:	6963      	ldr	r3, [r4, #20]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d033      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x358>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b4c:	3305      	adds	r3, #5
 8001b4e:	d151      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x398>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b50:	4a64      	ldr	r2, [pc, #400]	; (8001ce4 <HAL_RCC_OscConfig+0x488>)
 8001b52:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001b54:	2104      	movs	r1, #4
 8001b56:	438b      	bics	r3, r1
 8001b58:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b5a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001b5c:	31f4      	adds	r1, #244	; 0xf4
 8001b5e:	438b      	bics	r3, r1
 8001b60:	69a1      	ldr	r1, [r4, #24]
 8001b62:	00c9      	lsls	r1, r1, #3
 8001b64:	430b      	orrs	r3, r1
 8001b66:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b68:	6a23      	ldr	r3, [r4, #32]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d100      	bne.n	8001b70 <HAL_RCC_OscConfig+0x314>
 8001b6e:	e0b2      	b.n	8001cd6 <HAL_RCC_OscConfig+0x47a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b70:	4a5c      	ldr	r2, [pc, #368]	; (8001ce4 <HAL_RCC_OscConfig+0x488>)
 8001b72:	6851      	ldr	r1, [r2, #4]
 8001b74:	220c      	movs	r2, #12
 8001b76:	400a      	ands	r2, r1
 8001b78:	2a08      	cmp	r2, #8
 8001b7a:	d100      	bne.n	8001b7e <HAL_RCC_OscConfig+0x322>
 8001b7c:	e08a      	b.n	8001c94 <HAL_RCC_OscConfig+0x438>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d04f      	beq.n	8001c22 <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b82:	4a58      	ldr	r2, [pc, #352]	; (8001ce4 <HAL_RCC_OscConfig+0x488>)
 8001b84:	6813      	ldr	r3, [r2, #0]
 8001b86:	4958      	ldr	r1, [pc, #352]	; (8001ce8 <HAL_RCC_OscConfig+0x48c>)
 8001b88:	400b      	ands	r3, r1
 8001b8a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fc2a 	bl	80013e4 <HAL_GetTick>
 8001b90:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b92:	4b54      	ldr	r3, [pc, #336]	; (8001ce4 <HAL_RCC_OscConfig+0x488>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	019b      	lsls	r3, r3, #6
 8001b98:	d57a      	bpl.n	8001c90 <HAL_RCC_OscConfig+0x434>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7ff fc23 	bl	80013e4 <HAL_GetTick>
 8001b9e:	1b00      	subs	r0, r0, r4
 8001ba0:	2802      	cmp	r0, #2
 8001ba2:	d9f6      	bls.n	8001b92 <HAL_RCC_OscConfig+0x336>
          {
            return HAL_TIMEOUT;
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	e092      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba8:	4a4e      	ldr	r2, [pc, #312]	; (8001ce4 <HAL_RCC_OscConfig+0x488>)
 8001baa:	69d3      	ldr	r3, [r2, #28]
 8001bac:	494f      	ldr	r1, [pc, #316]	; (8001cec <HAL_RCC_OscConfig+0x490>)
 8001bae:	400b      	ands	r3, r1
 8001bb0:	61d3      	str	r3, [r2, #28]
 8001bb2:	e7c5      	b.n	8001b40 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bb4:	4b4b      	ldr	r3, [pc, #300]	; (8001ce4 <HAL_RCC_OscConfig+0x488>)
 8001bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bb8:	2104      	movs	r1, #4
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc0:	3903      	subs	r1, #3
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001bc6:	f7ff fc0d 	bl	80013e4 <HAL_GetTick>
 8001bca:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bcc:	4b45      	ldr	r3, [pc, #276]	; (8001ce4 <HAL_RCC_OscConfig+0x488>)
 8001bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd0:	079b      	lsls	r3, r3, #30
 8001bd2:	d406      	bmi.n	8001be2 <HAL_RCC_OscConfig+0x386>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bd4:	f7ff fc06 	bl	80013e4 <HAL_GetTick>
 8001bd8:	1b40      	subs	r0, r0, r5
 8001bda:	2802      	cmp	r0, #2
 8001bdc:	d9f6      	bls.n	8001bcc <HAL_RCC_OscConfig+0x370>
          return HAL_TIMEOUT;
 8001bde:	2003      	movs	r0, #3
 8001be0:	e075      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001be2:	4940      	ldr	r1, [pc, #256]	; (8001ce4 <HAL_RCC_OscConfig+0x488>)
 8001be4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001be6:	22f8      	movs	r2, #248	; 0xf8
 8001be8:	4393      	bics	r3, r2
 8001bea:	69a2      	ldr	r2, [r4, #24]
 8001bec:	00d2      	lsls	r2, r2, #3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	634b      	str	r3, [r1, #52]	; 0x34
 8001bf2:	e7b9      	b.n	8001b68 <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bf4:	4b3b      	ldr	r3, [pc, #236]	; (8001ce4 <HAL_RCC_OscConfig+0x488>)
 8001bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c00:	3903      	subs	r1, #3
 8001c02:	438a      	bics	r2, r1
 8001c04:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001c06:	f7ff fbed 	bl	80013e4 <HAL_GetTick>
 8001c0a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c0c:	4b35      	ldr	r3, [pc, #212]	; (8001ce4 <HAL_RCC_OscConfig+0x488>)
 8001c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c10:	079b      	lsls	r3, r3, #30
 8001c12:	d5a9      	bpl.n	8001b68 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c14:	f7ff fbe6 	bl	80013e4 <HAL_GetTick>
 8001c18:	1b40      	subs	r0, r0, r5
 8001c1a:	2802      	cmp	r0, #2
 8001c1c:	d9f6      	bls.n	8001c0c <HAL_RCC_OscConfig+0x3b0>
          return HAL_TIMEOUT;
 8001c1e:	2003      	movs	r0, #3
 8001c20:	e055      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_PLL_DISABLE();
 8001c22:	4a30      	ldr	r2, [pc, #192]	; (8001ce4 <HAL_RCC_OscConfig+0x488>)
 8001c24:	6813      	ldr	r3, [r2, #0]
 8001c26:	4930      	ldr	r1, [pc, #192]	; (8001ce8 <HAL_RCC_OscConfig+0x48c>)
 8001c28:	400b      	ands	r3, r1
 8001c2a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fbda 	bl	80013e4 <HAL_GetTick>
 8001c30:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c32:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <HAL_RCC_OscConfig+0x488>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	019b      	lsls	r3, r3, #6
 8001c38:	d506      	bpl.n	8001c48 <HAL_RCC_OscConfig+0x3ec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3a:	f7ff fbd3 	bl	80013e4 <HAL_GetTick>
 8001c3e:	1b40      	subs	r0, r0, r5
 8001c40:	2802      	cmp	r0, #2
 8001c42:	d9f6      	bls.n	8001c32 <HAL_RCC_OscConfig+0x3d6>
            return HAL_TIMEOUT;
 8001c44:	2003      	movs	r0, #3
 8001c46:	e042      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c48:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <HAL_RCC_OscConfig+0x488>)
 8001c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c4c:	210f      	movs	r1, #15
 8001c4e:	438a      	bics	r2, r1
 8001c50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c52:	430a      	orrs	r2, r1
 8001c54:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4925      	ldr	r1, [pc, #148]	; (8001cf0 <HAL_RCC_OscConfig+0x494>)
 8001c5a:	400a      	ands	r2, r1
 8001c5c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001c5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001c60:	4301      	orrs	r1, r0
 8001c62:	430a      	orrs	r2, r1
 8001c64:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c66:	6819      	ldr	r1, [r3, #0]
 8001c68:	2280      	movs	r2, #128	; 0x80
 8001c6a:	0452      	lsls	r2, r2, #17
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c70:	f7ff fbb8 	bl	80013e4 <HAL_GetTick>
 8001c74:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <HAL_RCC_OscConfig+0x488>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	019b      	lsls	r3, r3, #6
 8001c7c:	d406      	bmi.n	8001c8c <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff fbb1 	bl	80013e4 <HAL_GetTick>
 8001c82:	1b00      	subs	r0, r0, r4
 8001c84:	2802      	cmp	r0, #2
 8001c86:	d9f6      	bls.n	8001c76 <HAL_RCC_OscConfig+0x41a>
            return HAL_TIMEOUT;
 8001c88:	2003      	movs	r0, #3
 8001c8a:	e020      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
        }
      }
    }
  }

  return HAL_OK;
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	e01e      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
 8001c90:	2000      	movs	r0, #0
 8001c92:	e01c      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d020      	beq.n	8001cda <HAL_RCC_OscConfig+0x47e>
        pll_config  = RCC->CFGR;
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_RCC_OscConfig+0x488>)
 8001c9a:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 8001c9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	025b      	lsls	r3, r3, #9
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001ca6:	4283      	cmp	r3, r0
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0x452>
          return HAL_ERROR;
 8001caa:	2001      	movs	r0, #1
 8001cac:	e00f      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cae:	230f      	movs	r3, #15
 8001cb0:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001cb4:	428b      	cmp	r3, r1
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_OscConfig+0x460>
          return HAL_ERROR;
 8001cb8:	2001      	movs	r0, #1
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001cbc:	23f0      	movs	r3, #240	; 0xf0
 8001cbe:	039b      	lsls	r3, r3, #14
 8001cc0:	401a      	ands	r2, r3
 8001cc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d00a      	beq.n	8001cde <HAL_RCC_OscConfig+0x482>
          return HAL_ERROR;
 8001cc8:	2001      	movs	r0, #1
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
    return HAL_ERROR;
 8001ccc:	2001      	movs	r0, #1
}
 8001cce:	b002      	add	sp, #8
 8001cd0:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	e7fb      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	e7f9      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
        return HAL_ERROR;
 8001cda:	2001      	movs	r0, #1
 8001cdc:	e7f7      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 8001cde:	2000      	movs	r0, #0
 8001ce0:	e7f5      	b.n	8001cce <HAL_RCC_OscConfig+0x472>
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	feffffff 	.word	0xfeffffff
 8001cec:	efffffff 	.word	0xefffffff
 8001cf0:	ffc2ffff 	.word	0xffc2ffff

08001cf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf4:	b530      	push	{r4, r5, lr}
 8001cf6:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001cf8:	aa04      	add	r2, sp, #16
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x64>)
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	c832      	ldmia	r0!, {r1, r4, r5}
 8001d00:	c232      	stmia	r2!, {r1, r4, r5}
 8001d02:	0011      	movs	r1, r2
 8001d04:	6802      	ldr	r2, [r0, #0]
 8001d06:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d08:	466a      	mov	r2, sp
 8001d0a:	3310      	adds	r3, #16
 8001d0c:	cb13      	ldmia	r3!, {r0, r1, r4}
 8001d0e:	c213      	stmia	r2!, {r0, r1, r4}
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x68>)
 8001d16:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d18:	230c      	movs	r3, #12
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d119      	bne.n	8001d54 <HAL_RCC_GetSysClockFreq+0x60>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d20:	0c91      	lsrs	r1, r2, #18
 8001d22:	3307      	adds	r3, #7
 8001d24:	4019      	ands	r1, r3
 8001d26:	a804      	add	r0, sp, #16
 8001d28:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d2a:	490c      	ldr	r1, [pc, #48]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x68>)
 8001d2c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001d2e:	400b      	ands	r3, r1
 8001d30:	4669      	mov	r1, sp
 8001d32:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d34:	03d3      	lsls	r3, r2, #15
 8001d36:	d408      	bmi.n	8001d4a <HAL_RCC_GetSysClockFreq+0x56>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d38:	0163      	lsls	r3, r4, #5
 8001d3a:	1b1b      	subs	r3, r3, r4
 8001d3c:	0198      	lsls	r0, r3, #6
 8001d3e:	1ac0      	subs	r0, r0, r3
 8001d40:	00c0      	lsls	r0, r0, #3
 8001d42:	1904      	adds	r4, r0, r4
 8001d44:	0220      	lsls	r0, r4, #8
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d46:	b009      	add	sp, #36	; 0x24
 8001d48:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001d4c:	f7fe f9dc 	bl	8000108 <__udivsi3>
 8001d50:	4360      	muls	r0, r4
 8001d52:	e7f8      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x52>
      sysclockfreq = HSE_VALUE;
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001d56:	e7f6      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x52>
 8001d58:	08003418 	.word	0x08003418
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	007a1200 	.word	0x007a1200

08001d64 <HAL_RCC_ClockConfig>:
{
 8001d64:	b570      	push	{r4, r5, r6, lr}
 8001d66:	0004      	movs	r4, r0
 8001d68:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	d100      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xc>
 8001d6e:	e081      	b.n	8001e74 <HAL_RCC_ClockConfig+0x110>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d70:	4b42      	ldr	r3, [pc, #264]	; (8001e7c <HAL_RCC_ClockConfig+0x118>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2301      	movs	r3, #1
 8001d76:	4013      	ands	r3, r2
 8001d78:	428b      	cmp	r3, r1
 8001d7a:	d20b      	bcs.n	8001d94 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7c:	493f      	ldr	r1, [pc, #252]	; (8001e7c <HAL_RCC_ClockConfig+0x118>)
 8001d7e:	680b      	ldr	r3, [r1, #0]
 8001d80:	2201      	movs	r2, #1
 8001d82:	4393      	bics	r3, r2
 8001d84:	432b      	orrs	r3, r5
 8001d86:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d88:	680b      	ldr	r3, [r1, #0]
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	42aa      	cmp	r2, r5
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8001d90:	2001      	movs	r0, #1
 8001d92:	e070      	b.n	8001e76 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	079a      	lsls	r2, r3, #30
 8001d98:	d50e      	bpl.n	8001db8 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9a:	075b      	lsls	r3, r3, #29
 8001d9c:	d505      	bpl.n	8001daa <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d9e:	4a38      	ldr	r2, [pc, #224]	; (8001e80 <HAL_RCC_ClockConfig+0x11c>)
 8001da0:	6851      	ldr	r1, [r2, #4]
 8001da2:	23e0      	movs	r3, #224	; 0xe0
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	430b      	orrs	r3, r1
 8001da8:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001daa:	4a35      	ldr	r2, [pc, #212]	; (8001e80 <HAL_RCC_ClockConfig+0x11c>)
 8001dac:	6853      	ldr	r3, [r2, #4]
 8001dae:	21f0      	movs	r1, #240	; 0xf0
 8001db0:	438b      	bics	r3, r1
 8001db2:	68a1      	ldr	r1, [r4, #8]
 8001db4:	430b      	orrs	r3, r1
 8001db6:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	07db      	lsls	r3, r3, #31
 8001dbc:	d52d      	bpl.n	8001e1a <HAL_RCC_ClockConfig+0xb6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dbe:	6863      	ldr	r3, [r4, #4]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d01e      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d022      	beq.n	8001e0e <HAL_RCC_ClockConfig+0xaa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc8:	4a2d      	ldr	r2, [pc, #180]	; (8001e80 <HAL_RCC_ClockConfig+0x11c>)
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	0792      	lsls	r2, r2, #30
 8001dce:	d553      	bpl.n	8001e78 <HAL_RCC_ClockConfig+0x114>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd0:	492b      	ldr	r1, [pc, #172]	; (8001e80 <HAL_RCC_ClockConfig+0x11c>)
 8001dd2:	684a      	ldr	r2, [r1, #4]
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	4382      	bics	r2, r0
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001ddc:	f7ff fb02 	bl	80013e4 <HAL_GetTick>
 8001de0:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de2:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <HAL_RCC_ClockConfig+0x11c>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	220c      	movs	r2, #12
 8001de8:	401a      	ands	r2, r3
 8001dea:	6863      	ldr	r3, [r4, #4]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d013      	beq.n	8001e1a <HAL_RCC_ClockConfig+0xb6>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df2:	f7ff faf7 	bl	80013e4 <HAL_GetTick>
 8001df6:	1b80      	subs	r0, r0, r6
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <HAL_RCC_ClockConfig+0x120>)
 8001dfa:	4298      	cmp	r0, r3
 8001dfc:	d9f1      	bls.n	8001de2 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8001dfe:	2003      	movs	r0, #3
 8001e00:	e039      	b.n	8001e76 <HAL_RCC_ClockConfig+0x112>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e02:	4a1f      	ldr	r2, [pc, #124]	; (8001e80 <HAL_RCC_ClockConfig+0x11c>)
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	0392      	lsls	r2, r2, #14
 8001e08:	d4e2      	bmi.n	8001dd0 <HAL_RCC_ClockConfig+0x6c>
        return HAL_ERROR;
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	e033      	b.n	8001e76 <HAL_RCC_ClockConfig+0x112>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <HAL_RCC_ClockConfig+0x11c>)
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	0192      	lsls	r2, r2, #6
 8001e14:	d4dc      	bmi.n	8001dd0 <HAL_RCC_ClockConfig+0x6c>
        return HAL_ERROR;
 8001e16:	2001      	movs	r0, #1
 8001e18:	e02d      	b.n	8001e76 <HAL_RCC_ClockConfig+0x112>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_RCC_ClockConfig+0x118>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	2301      	movs	r3, #1
 8001e20:	4013      	ands	r3, r2
 8001e22:	42ab      	cmp	r3, r5
 8001e24:	d90b      	bls.n	8001e3e <HAL_RCC_ClockConfig+0xda>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4915      	ldr	r1, [pc, #84]	; (8001e7c <HAL_RCC_ClockConfig+0x118>)
 8001e28:	680b      	ldr	r3, [r1, #0]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4393      	bics	r3, r2
 8001e2e:	432b      	orrs	r3, r5
 8001e30:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	680b      	ldr	r3, [r1, #0]
 8001e34:	401a      	ands	r2, r3
 8001e36:	42aa      	cmp	r2, r5
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_ClockConfig+0xda>
      return HAL_ERROR;
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	e01b      	b.n	8001e76 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	075b      	lsls	r3, r3, #29
 8001e42:	d506      	bpl.n	8001e52 <HAL_RCC_ClockConfig+0xee>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e44:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <HAL_RCC_ClockConfig+0x11c>)
 8001e46:	6853      	ldr	r3, [r2, #4]
 8001e48:	490f      	ldr	r1, [pc, #60]	; (8001e88 <HAL_RCC_ClockConfig+0x124>)
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	68e1      	ldr	r1, [r4, #12]
 8001e4e:	430b      	orrs	r3, r1
 8001e50:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e52:	f7ff ff4f 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_RCC_ClockConfig+0x11c>)
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	0912      	lsrs	r2, r2, #4
 8001e5c:	230f      	movs	r3, #15
 8001e5e:	4013      	ands	r3, r2
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_RCC_ClockConfig+0x128>)
 8001e62:	5cd3      	ldrb	r3, [r2, r3]
 8001e64:	40d8      	lsrs	r0, r3
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_RCC_ClockConfig+0x12c>)
 8001e68:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f7ff fa76 	bl	800135c <HAL_InitTick>
  return HAL_OK;
 8001e70:	2000      	movs	r0, #0
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_ClockConfig+0x112>
    return HAL_ERROR;
 8001e74:	2001      	movs	r0, #1
}
 8001e76:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001e78:	2001      	movs	r0, #1
 8001e7a:	e7fc      	b.n	8001e76 <HAL_RCC_ClockConfig+0x112>
 8001e7c:	40022000 	.word	0x40022000
 8001e80:	40021000 	.word	0x40021000
 8001e84:	00001388 	.word	0x00001388
 8001e88:	fffff8ff 	.word	0xfffff8ff
 8001e8c:	08003574 	.word	0x08003574
 8001e90:	20000014 	.word	0x20000014

08001e94 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001e94:	4b01      	ldr	r3, [pc, #4]	; (8001e9c <HAL_RCC_GetHCLKFreq+0x8>)
 8001e96:	6818      	ldr	r0, [r3, #0]
}
 8001e98:	4770      	bx	lr
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	20000014 	.word	0x20000014

08001ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea0:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ea2:	f7ff fff7 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001ea6:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	0a12      	lsrs	r2, r2, #8
 8001eac:	2307      	movs	r3, #7
 8001eae:	4013      	ands	r3, r2
 8001eb0:	4a02      	ldr	r2, [pc, #8]	; (8001ebc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001eb2:	5cd3      	ldrb	r3, [r2, r3]
 8001eb4:	40d8      	lsrs	r0, r3
}    
 8001eb6:	bd10      	pop	{r4, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	08003584 	.word	0x08003584

08001ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ec0:	b570      	push	{r4, r5, r6, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ec6:	6803      	ldr	r3, [r0, #0]
 8001ec8:	03db      	lsls	r3, r3, #15
 8001eca:	d535      	bpl.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ecc:	4b3c      	ldr	r3, [pc, #240]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	d448      	bmi.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	4a3a      	ldr	r2, [pc, #232]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001ed6:	69d1      	ldr	r1, [r2, #28]
 8001ed8:	2080      	movs	r0, #128	; 0x80
 8001eda:	0540      	lsls	r0, r0, #21
 8001edc:	4301      	orrs	r1, r0
 8001ede:	61d1      	str	r1, [r2, #28]
 8001ee0:	69d3      	ldr	r3, [r2, #28]
 8001ee2:	4003      	ands	r3, r0
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ee8:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eea:	4b36      	ldr	r3, [pc, #216]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	05db      	lsls	r3, r3, #23
 8001ef0:	d53b      	bpl.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ef2:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	22c0      	movs	r2, #192	; 0xc0
 8001ef8:	0092      	lsls	r2, r2, #2
 8001efa:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001efc:	d013      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8001efe:	6861      	ldr	r1, [r4, #4]
 8001f00:	400a      	ands	r2, r1
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d00f      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f06:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001f08:	6a18      	ldr	r0, [r3, #32]
 8001f0a:	4a2f      	ldr	r2, [pc, #188]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001f0c:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f0e:	6a1e      	ldr	r6, [r3, #32]
 8001f10:	2180      	movs	r1, #128	; 0x80
 8001f12:	0249      	lsls	r1, r1, #9
 8001f14:	4331      	orrs	r1, r6
 8001f16:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f18:	6a19      	ldr	r1, [r3, #32]
 8001f1a:	4e2c      	ldr	r6, [pc, #176]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001f1c:	4031      	ands	r1, r6
 8001f1e:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f20:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f22:	07c3      	lsls	r3, r0, #31
 8001f24:	d435      	bmi.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f26:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001f28:	6a13      	ldr	r3, [r2, #32]
 8001f2a:	4927      	ldr	r1, [pc, #156]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001f2c:	400b      	ands	r3, r1
 8001f2e:	6861      	ldr	r1, [r4, #4]
 8001f30:	430b      	orrs	r3, r1
 8001f32:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f34:	2d01      	cmp	r5, #1
 8001f36:	d03b      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	07db      	lsls	r3, r3, #31
 8001f3c:	d506      	bpl.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f3e:	4a20      	ldr	r2, [pc, #128]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001f40:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f42:	2103      	movs	r1, #3
 8001f44:	438b      	bics	r3, r1
 8001f46:	68a1      	ldr	r1, [r4, #8]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f4c:	6823      	ldr	r3, [r4, #0]
 8001f4e:	069b      	lsls	r3, r3, #26
 8001f50:	d533      	bpl.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f52:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001f54:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f56:	2110      	movs	r1, #16
 8001f58:	438b      	bics	r3, r1
 8001f5a:	68e1      	ldr	r1, [r4, #12]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001f60:	2000      	movs	r0, #0
}
 8001f62:	b002      	add	sp, #8
 8001f64:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001f66:	2500      	movs	r5, #0
 8001f68:	e7bf      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6a:	4a16      	ldr	r2, [pc, #88]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001f6c:	6811      	ldr	r1, [r2, #0]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	430b      	orrs	r3, r1
 8001f74:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001f76:	f7ff fa35 	bl	80013e4 <HAL_GetTick>
 8001f7a:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	05db      	lsls	r3, r3, #23
 8001f82:	d4b6      	bmi.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f84:	f7ff fa2e 	bl	80013e4 <HAL_GetTick>
 8001f88:	1b80      	subs	r0, r0, r6
 8001f8a:	2864      	cmp	r0, #100	; 0x64
 8001f8c:	d9f6      	bls.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8001f8e:	2003      	movs	r0, #3
 8001f90:	e7e7      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        tickstart = HAL_GetTick();
 8001f92:	f7ff fa27 	bl	80013e4 <HAL_GetTick>
 8001f96:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	079b      	lsls	r3, r3, #30
 8001f9e:	d4c2      	bmi.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7ff fa20 	bl	80013e4 <HAL_GetTick>
 8001fa4:	1b80      	subs	r0, r0, r6
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001fa8:	4298      	cmp	r0, r3
 8001faa:	d9f5      	bls.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
 8001fac:	2003      	movs	r0, #3
 8001fae:	e7d8      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb0:	69d3      	ldr	r3, [r2, #28]
 8001fb2:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001fb4:	400b      	ands	r3, r1
 8001fb6:	61d3      	str	r3, [r2, #28]
 8001fb8:	e7be      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8001fba:	2000      	movs	r0, #0
 8001fbc:	e7d1      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	fffffcff 	.word	0xfffffcff
 8001fcc:	fffeffff 	.word	0xfffeffff
 8001fd0:	00001388 	.word	0x00001388
 8001fd4:	efffffff 	.word	0xefffffff

08001fd8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001fd8:	b570      	push	{r4, r5, r6, lr}
 8001fda:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001fdc:	6802      	ldr	r2, [r0, #0]
 8001fde:	68d3      	ldr	r3, [r2, #12]
 8001fe0:	21a0      	movs	r1, #160	; 0xa0
 8001fe2:	438b      	bics	r3, r1
 8001fe4:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8001fe6:	f7ff f9fd 	bl	80013e4 <HAL_GetTick>
 8001fea:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001fec:	6823      	ldr	r3, [r4, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	069b      	lsls	r3, r3, #26
 8001ff2:	d408      	bmi.n	8002006 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001ff4:	f7ff f9f6 	bl	80013e4 <HAL_GetTick>
 8001ff8:	1b40      	subs	r0, r0, r5
 8001ffa:	23fa      	movs	r3, #250	; 0xfa
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4298      	cmp	r0, r3
 8002000:	d9f4      	bls.n	8001fec <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8002002:	2003      	movs	r0, #3
 8002004:	e000      	b.n	8002008 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8002006:	2000      	movs	r0, #0
}
 8002008:	bd70      	pop	{r4, r5, r6, pc}

0800200a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800200a:	b570      	push	{r4, r5, r6, lr}
 800200c:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800200e:	6803      	ldr	r3, [r0, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	0652      	lsls	r2, r2, #25
 8002014:	d501      	bpl.n	800201a <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002016:	2000      	movs	r0, #0
}
 8002018:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800201a:	2201      	movs	r2, #1
 800201c:	4252      	negs	r2, r2
 800201e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002020:	f7ff f9e0 	bl	80013e4 <HAL_GetTick>
 8002024:	0005      	movs	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002026:	6823      	ldr	r3, [r4, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	065b      	lsls	r3, r3, #25
 800202c:	d408      	bmi.n	8002040 <RTC_EnterInitMode+0x36>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800202e:	f7ff f9d9 	bl	80013e4 <HAL_GetTick>
 8002032:	1b40      	subs	r0, r0, r5
 8002034:	23fa      	movs	r3, #250	; 0xfa
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4298      	cmp	r0, r3
 800203a:	d9f4      	bls.n	8002026 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 800203c:	2003      	movs	r0, #3
 800203e:	e7eb      	b.n	8002018 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8002040:	2000      	movs	r0, #0
 8002042:	e7e9      	b.n	8002018 <RTC_EnterInitMode+0xe>

08002044 <HAL_RTC_Init>:
{
 8002044:	b570      	push	{r4, r5, r6, lr}
 8002046:	1e04      	subs	r4, r0, #0
  if (hrtc == NULL)
 8002048:	d057      	beq.n	80020fa <HAL_RTC_Init+0xb6>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800204a:	7f43      	ldrb	r3, [r0, #29]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d03c      	beq.n	80020ca <HAL_RTC_Init+0x86>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002050:	2302      	movs	r3, #2
 8002052:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002054:	6823      	ldr	r3, [r4, #0]
 8002056:	22ca      	movs	r2, #202	; 0xca
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	3a77      	subs	r2, #119	; 0x77
 800205e:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002060:	0020      	movs	r0, r4
 8002062:	f7ff ffd2 	bl	800200a <RTC_EnterInitMode>
 8002066:	1e05      	subs	r5, r0, #0
 8002068:	d133      	bne.n	80020d2 <HAL_RTC_Init+0x8e>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800206a:	6822      	ldr	r2, [r4, #0]
 800206c:	6893      	ldr	r3, [r2, #8]
 800206e:	4924      	ldr	r1, [pc, #144]	; (8002100 <HAL_RTC_Init+0xbc>)
 8002070:	400b      	ands	r3, r1
 8002072:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002074:	6821      	ldr	r1, [r4, #0]
 8002076:	688a      	ldr	r2, [r1, #8]
 8002078:	6863      	ldr	r3, [r4, #4]
 800207a:	6920      	ldr	r0, [r4, #16]
 800207c:	4303      	orrs	r3, r0
 800207e:	6960      	ldr	r0, [r4, #20]
 8002080:	4303      	orrs	r3, r0
 8002082:	4313      	orrs	r3, r2
 8002084:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	68e2      	ldr	r2, [r4, #12]
 800208a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800208c:	6821      	ldr	r1, [r4, #0]
 800208e:	690b      	ldr	r3, [r1, #16]
 8002090:	68a2      	ldr	r2, [r4, #8]
 8002092:	0412      	lsls	r2, r2, #16
 8002094:	4313      	orrs	r3, r2
 8002096:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002098:	6822      	ldr	r2, [r4, #0]
 800209a:	68d3      	ldr	r3, [r2, #12]
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	438b      	bics	r3, r1
 80020a0:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80020a2:	6823      	ldr	r3, [r4, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	069b      	lsls	r3, r3, #26
 80020a8:	d51b      	bpl.n	80020e2 <HAL_RTC_Init+0x9e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80020aa:	6822      	ldr	r2, [r4, #0]
 80020ac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80020ae:	4915      	ldr	r1, [pc, #84]	; (8002104 <HAL_RTC_Init+0xc0>)
 80020b0:	400b      	ands	r3, r1
 80020b2:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80020b4:	6822      	ldr	r2, [r4, #0]
 80020b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80020b8:	69a1      	ldr	r1, [r4, #24]
 80020ba:	430b      	orrs	r3, r1
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	22ff      	movs	r2, #255	; 0xff
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80020c4:	2301      	movs	r3, #1
 80020c6:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 80020c8:	e009      	b.n	80020de <HAL_RTC_Init+0x9a>
    hrtc->Lock = HAL_UNLOCKED;
 80020ca:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80020cc:	f7ff f870 	bl	80011b0 <HAL_RTC_MspInit>
 80020d0:	e7be      	b.n	8002050 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	22ff      	movs	r2, #255	; 0xff
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80020d8:	2304      	movs	r3, #4
 80020da:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80020dc:	2501      	movs	r5, #1
}
 80020de:	0028      	movs	r0, r5
 80020e0:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80020e2:	0020      	movs	r0, r4
 80020e4:	f7ff ff78 	bl	8001fd8 <HAL_RTC_WaitForSynchro>
 80020e8:	2800      	cmp	r0, #0
 80020ea:	d0de      	beq.n	80020aa <HAL_RTC_Init+0x66>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	22ff      	movs	r2, #255	; 0xff
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80020f2:	2304      	movs	r3, #4
 80020f4:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 80020f6:	2501      	movs	r5, #1
 80020f8:	e7f1      	b.n	80020de <HAL_RTC_Init+0x9a>
    return HAL_ERROR;
 80020fa:	2501      	movs	r5, #1
 80020fc:	e7ef      	b.n	80020de <HAL_RTC_Init+0x9a>
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	ff8fffbf 	.word	0xff8fffbf
 8002104:	fffbffff 	.word	0xfffbffff

08002108 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002108:	2300      	movs	r3, #0

  while (Value >= 10U)
 800210a:	e002      	b.n	8002112 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 800210c:	3301      	adds	r3, #1
    Value -= 10U;
 800210e:	380a      	subs	r0, #10
 8002110:	b2c0      	uxtb	r0, r0
  while (Value >= 10U)
 8002112:	2809      	cmp	r0, #9
 8002114:	d8fa      	bhi.n	800210c <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	b2db      	uxtb	r3, r3
 800211a:	4318      	orrs	r0, r3
}
 800211c:	4770      	bx	lr
	...

08002120 <HAL_RTC_SetTime>:
{
 8002120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002122:	0004      	movs	r4, r0
 8002124:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8002126:	7f03      	ldrb	r3, [r0, #28]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d100      	bne.n	800212e <HAL_RTC_SetTime+0xe>
 800212c:	e070      	b.n	8002210 <HAL_RTC_SetTime+0xf0>
 800212e:	2301      	movs	r3, #1
 8002130:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002132:	3301      	adds	r3, #1
 8002134:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 8002136:	2a00      	cmp	r2, #0
 8002138:	d141      	bne.n	80021be <HAL_RTC_SetTime+0x9e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800213a:	6803      	ldr	r3, [r0, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	065b      	lsls	r3, r3, #25
 8002140:	d401      	bmi.n	8002146 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8002142:	2300      	movs	r3, #0
 8002144:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002146:	7830      	ldrb	r0, [r6, #0]
 8002148:	f7ff ffde 	bl	8002108 <RTC_ByteToBcd2>
 800214c:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800214e:	7870      	ldrb	r0, [r6, #1]
 8002150:	f7ff ffda 	bl	8002108 <RTC_ByteToBcd2>
 8002154:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002156:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002158:	78b0      	ldrb	r0, [r6, #2]
 800215a:	f7ff ffd5 	bl	8002108 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800215e:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002160:	78f0      	ldrb	r0, [r6, #3]
 8002162:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002164:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002166:	6823      	ldr	r3, [r4, #0]
 8002168:	22ca      	movs	r2, #202	; 0xca
 800216a:	625a      	str	r2, [r3, #36]	; 0x24
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	3a77      	subs	r2, #119	; 0x77
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002172:	0020      	movs	r0, r4
 8002174:	f7ff ff49 	bl	800200a <RTC_EnterInitMode>
 8002178:	1e07      	subs	r7, r0, #0
 800217a:	d131      	bne.n	80021e0 <HAL_RTC_SetTime+0xc0>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	4825      	ldr	r0, [pc, #148]	; (8002214 <HAL_RTC_SetTime+0xf4>)
 8002180:	4005      	ands	r5, r0
 8002182:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002184:	6822      	ldr	r2, [r4, #0]
 8002186:	6893      	ldr	r3, [r2, #8]
 8002188:	4923      	ldr	r1, [pc, #140]	; (8002218 <HAL_RTC_SetTime+0xf8>)
 800218a:	400b      	ands	r3, r1
 800218c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800218e:	6821      	ldr	r1, [r4, #0]
 8002190:	688b      	ldr	r3, [r1, #8]
 8002192:	68f2      	ldr	r2, [r6, #12]
 8002194:	6930      	ldr	r0, [r6, #16]
 8002196:	4302      	orrs	r2, r0
 8002198:	4313      	orrs	r3, r2
 800219a:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800219c:	6822      	ldr	r2, [r4, #0]
 800219e:	68d3      	ldr	r3, [r2, #12]
 80021a0:	2180      	movs	r1, #128	; 0x80
 80021a2:	438b      	bics	r3, r1
 80021a4:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	069b      	lsls	r3, r3, #26
 80021ac:	d522      	bpl.n	80021f4 <HAL_RTC_SetTime+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	22ff      	movs	r2, #255	; 0xff
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80021b4:	2301      	movs	r3, #1
 80021b6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80021b8:	2300      	movs	r3, #0
 80021ba:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 80021bc:	e018      	b.n	80021f0 <HAL_RTC_SetTime+0xd0>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80021be:	6803      	ldr	r3, [r0, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	065b      	lsls	r3, r3, #25
 80021c4:	d401      	bmi.n	80021ca <HAL_RTC_SetTime+0xaa>
      sTime->TimeFormat = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80021ca:	7835      	ldrb	r5, [r6, #0]
 80021cc:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80021ce:	7870      	ldrb	r0, [r6, #1]
 80021d0:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80021d2:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 80021d4:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80021d6:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80021d8:	78f0      	ldrb	r0, [r6, #3]
 80021da:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80021dc:	4305      	orrs	r5, r0
 80021de:	e7c2      	b.n	8002166 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	22ff      	movs	r2, #255	; 0xff
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021e6:	2304      	movs	r3, #4
 80021e8:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80021ea:	2300      	movs	r3, #0
 80021ec:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80021ee:	2701      	movs	r7, #1
}
 80021f0:	0038      	movs	r0, r7
 80021f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021f4:	0020      	movs	r0, r4
 80021f6:	f7ff feef 	bl	8001fd8 <HAL_RTC_WaitForSynchro>
 80021fa:	2800      	cmp	r0, #0
 80021fc:	d0d7      	beq.n	80021ae <HAL_RTC_SetTime+0x8e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	22ff      	movs	r2, #255	; 0xff
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002204:	2304      	movs	r3, #4
 8002206:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002208:	2300      	movs	r3, #0
 800220a:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800220c:	2701      	movs	r7, #1
 800220e:	e7ef      	b.n	80021f0 <HAL_RTC_SetTime+0xd0>
  __HAL_LOCK(hrtc);
 8002210:	2702      	movs	r7, #2
 8002212:	e7ed      	b.n	80021f0 <HAL_RTC_SetTime+0xd0>
 8002214:	007f7f7f 	.word	0x007f7f7f
 8002218:	fffbffff 	.word	0xfffbffff

0800221c <HAL_RTC_SetDate>:
{
 800221c:	b570      	push	{r4, r5, r6, lr}
 800221e:	0004      	movs	r4, r0
 8002220:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8002222:	7f03      	ldrb	r3, [r0, #28]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d061      	beq.n	80022ec <HAL_RTC_SetDate+0xd0>
 8002228:	2301      	movs	r3, #1
 800222a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800222c:	3301      	adds	r3, #1
 800222e:	7743      	strb	r3, [r0, #29]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002230:	2a00      	cmp	r2, #0
 8002232:	d106      	bne.n	8002242 <HAL_RTC_SetDate+0x26>
 8002234:	784b      	ldrb	r3, [r1, #1]
 8002236:	06d9      	lsls	r1, r3, #27
 8002238:	d503      	bpl.n	8002242 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800223a:	2110      	movs	r1, #16
 800223c:	438b      	bics	r3, r1
 800223e:	330a      	adds	r3, #10
 8002240:	7073      	strb	r3, [r6, #1]
  if (Format == RTC_FORMAT_BIN)
 8002242:	2a00      	cmp	r2, #0
 8002244:	d12f      	bne.n	80022a6 <HAL_RTC_SetDate+0x8a>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002246:	78f0      	ldrb	r0, [r6, #3]
 8002248:	f7ff ff5e 	bl	8002108 <RTC_ByteToBcd2>
 800224c:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800224e:	7870      	ldrb	r0, [r6, #1]
 8002250:	f7ff ff5a 	bl	8002108 <RTC_ByteToBcd2>
 8002254:	0200      	lsls	r0, r0, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002256:	4305      	orrs	r5, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002258:	78b0      	ldrb	r0, [r6, #2]
 800225a:	f7ff ff55 	bl	8002108 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800225e:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay << 13U));
 8002260:	7830      	ldrb	r0, [r6, #0]
 8002262:	0340      	lsls	r0, r0, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002264:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002266:	6823      	ldr	r3, [r4, #0]
 8002268:	22ca      	movs	r2, #202	; 0xca
 800226a:	625a      	str	r2, [r3, #36]	; 0x24
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	3a77      	subs	r2, #119	; 0x77
 8002270:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002272:	0020      	movs	r0, r4
 8002274:	f7ff fec9 	bl	800200a <RTC_EnterInitMode>
 8002278:	1e06      	subs	r6, r0, #0
 800227a:	d11f      	bne.n	80022bc <HAL_RTC_SetDate+0xa0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	481c      	ldr	r0, [pc, #112]	; (80022f0 <HAL_RTC_SetDate+0xd4>)
 8002280:	4005      	ands	r5, r0
 8002282:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002284:	6822      	ldr	r2, [r4, #0]
 8002286:	68d3      	ldr	r3, [r2, #12]
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	438b      	bics	r3, r1
 800228c:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800228e:	6823      	ldr	r3, [r4, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	069b      	lsls	r3, r3, #26
 8002294:	d51c      	bpl.n	80022d0 <HAL_RTC_SetDate+0xb4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002296:	6823      	ldr	r3, [r4, #0]
 8002298:	22ff      	movs	r2, #255	; 0xff
 800229a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800229c:	2301      	movs	r3, #1
 800229e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80022a0:	2300      	movs	r3, #0
 80022a2:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 80022a4:	e012      	b.n	80022cc <HAL_RTC_SetDate+0xb0>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80022a6:	78f5      	ldrb	r5, [r6, #3]
 80022a8:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80022aa:	7870      	ldrb	r0, [r6, #1]
 80022ac:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80022ae:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 80022b0:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80022b2:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13U));
 80022b4:	7830      	ldrb	r0, [r6, #0]
 80022b6:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80022b8:	4305      	orrs	r5, r0
 80022ba:	e7d4      	b.n	8002266 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022bc:	6823      	ldr	r3, [r4, #0]
 80022be:	22ff      	movs	r2, #255	; 0xff
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80022c2:	2304      	movs	r3, #4
 80022c4:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80022c6:	2300      	movs	r3, #0
 80022c8:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80022ca:	2601      	movs	r6, #1
}
 80022cc:	0030      	movs	r0, r6
 80022ce:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80022d0:	0020      	movs	r0, r4
 80022d2:	f7ff fe81 	bl	8001fd8 <HAL_RTC_WaitForSynchro>
 80022d6:	2800      	cmp	r0, #0
 80022d8:	d0dd      	beq.n	8002296 <HAL_RTC_SetDate+0x7a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	22ff      	movs	r2, #255	; 0xff
 80022de:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80022e0:	2304      	movs	r3, #4
 80022e2:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80022e4:	2300      	movs	r3, #0
 80022e6:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80022e8:	2601      	movs	r6, #1
 80022ea:	e7ef      	b.n	80022cc <HAL_RTC_SetDate+0xb0>
  __HAL_LOCK(hrtc);
 80022ec:	2602      	movs	r6, #2
 80022ee:	e7ed      	b.n	80022cc <HAL_RTC_SetDate+0xb0>
 80022f0:	00ffff3f 	.word	0x00ffff3f

080022f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f6:	0006      	movs	r6, r0
 80022f8:	000c      	movs	r4, r1
 80022fa:	0017      	movs	r7, r2
 80022fc:	001d      	movs	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022fe:	6833      	ldr	r3, [r6, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	4023      	ands	r3, r4
 8002304:	1b1b      	subs	r3, r3, r4
 8002306:	425a      	negs	r2, r3
 8002308:	4153      	adcs	r3, r2
 800230a:	42bb      	cmp	r3, r7
 800230c:	d03b      	beq.n	8002386 <SPI_WaitFlagStateUntilTimeout+0x92>
  {
    if (Timeout != HAL_MAX_DELAY)
 800230e:	1c6b      	adds	r3, r5, #1
 8002310:	d0f5      	beq.n	80022fe <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002312:	f7ff f867 	bl	80013e4 <HAL_GetTick>
 8002316:	9b06      	ldr	r3, [sp, #24]
 8002318:	1ac0      	subs	r0, r0, r3
 800231a:	42a8      	cmp	r0, r5
 800231c:	d201      	bcs.n	8002322 <SPI_WaitFlagStateUntilTimeout+0x2e>
 800231e:	2d00      	cmp	r5, #0
 8002320:	d1ed      	bne.n	80022fe <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002322:	6832      	ldr	r2, [r6, #0]
 8002324:	6853      	ldr	r3, [r2, #4]
 8002326:	21e0      	movs	r1, #224	; 0xe0
 8002328:	438b      	bics	r3, r1
 800232a:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800232c:	2382      	movs	r3, #130	; 0x82
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	6872      	ldr	r2, [r6, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d00c      	beq.n	8002350 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	019b      	lsls	r3, r3, #6
 800233a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800233c:	429a      	cmp	r2, r3
 800233e:	d016      	beq.n	800236e <SPI_WaitFlagStateUntilTimeout+0x7a>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002340:	235d      	movs	r3, #93	; 0x5d
 8002342:	2201      	movs	r2, #1
 8002344:	54f2      	strb	r2, [r6, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002346:	3b01      	subs	r3, #1
 8002348:	2200      	movs	r2, #0
 800234a:	54f2      	strb	r2, [r6, r3]

        return HAL_TIMEOUT;
 800234c:	2003      	movs	r0, #3
 800234e:	e01b      	b.n	8002388 <SPI_WaitFlagStateUntilTimeout+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002350:	68b3      	ldr	r3, [r6, #8]
 8002352:	2280      	movs	r2, #128	; 0x80
 8002354:	0212      	lsls	r2, r2, #8
 8002356:	4293      	cmp	r3, r2
 8002358:	d003      	beq.n	8002362 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800235a:	2280      	movs	r2, #128	; 0x80
 800235c:	00d2      	lsls	r2, r2, #3
 800235e:	4293      	cmp	r3, r2
 8002360:	d1e9      	bne.n	8002336 <SPI_WaitFlagStateUntilTimeout+0x42>
          __HAL_SPI_DISABLE(hspi);
 8002362:	6832      	ldr	r2, [r6, #0]
 8002364:	6813      	ldr	r3, [r2, #0]
 8002366:	2140      	movs	r1, #64	; 0x40
 8002368:	438b      	bics	r3, r1
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	e7e3      	b.n	8002336 <SPI_WaitFlagStateUntilTimeout+0x42>
          SPI_RESET_CRC(hspi);
 800236e:	6832      	ldr	r2, [r6, #0]
 8002370:	6813      	ldr	r3, [r2, #0]
 8002372:	4906      	ldr	r1, [pc, #24]	; (800238c <SPI_WaitFlagStateUntilTimeout+0x98>)
 8002374:	400b      	ands	r3, r1
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	6832      	ldr	r2, [r6, #0]
 800237a:	6811      	ldr	r1, [r2, #0]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	019b      	lsls	r3, r3, #6
 8002380:	430b      	orrs	r3, r1
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	e7dc      	b.n	8002340 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8002386:	2000      	movs	r0, #0
}
 8002388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	ffffdfff 	.word	0xffffdfff

08002390 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002392:	0007      	movs	r7, r0
 8002394:	000c      	movs	r4, r1
 8002396:	0015      	movs	r5, r2
 8002398:	001e      	movs	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 800239a:	e001      	b.n	80023a0 <SPI_WaitFifoStateUntilTimeout+0x10>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 800239c:	1c73      	adds	r3, r6, #1
 800239e:	d10c      	bne.n	80023ba <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	6893      	ldr	r3, [r2, #8]
 80023a4:	4023      	ands	r3, r4
 80023a6:	42ab      	cmp	r3, r5
 80023a8:	d041      	beq.n	800242e <SPI_WaitFifoStateUntilTimeout+0x9e>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80023aa:	23c0      	movs	r3, #192	; 0xc0
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	429c      	cmp	r4, r3
 80023b0:	d1f4      	bne.n	800239c <SPI_WaitFifoStateUntilTimeout+0xc>
 80023b2:	2d00      	cmp	r5, #0
 80023b4:	d1f2      	bne.n	800239c <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80023b6:	7b13      	ldrb	r3, [r2, #12]
 80023b8:	e7f0      	b.n	800239c <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80023ba:	f7ff f813 	bl	80013e4 <HAL_GetTick>
 80023be:	9b06      	ldr	r3, [sp, #24]
 80023c0:	1ac0      	subs	r0, r0, r3
 80023c2:	42b0      	cmp	r0, r6
 80023c4:	d201      	bcs.n	80023ca <SPI_WaitFifoStateUntilTimeout+0x3a>
 80023c6:	2e00      	cmp	r6, #0
 80023c8:	d1ea      	bne.n	80023a0 <SPI_WaitFifoStateUntilTimeout+0x10>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	6853      	ldr	r3, [r2, #4]
 80023ce:	21e0      	movs	r1, #224	; 0xe0
 80023d0:	438b      	bics	r3, r1
 80023d2:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023d4:	2382      	movs	r3, #130	; 0x82
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d00c      	beq.n	80023f8 <SPI_WaitFifoStateUntilTimeout+0x68>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	019b      	lsls	r3, r3, #6
 80023e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d016      	beq.n	8002416 <SPI_WaitFifoStateUntilTimeout+0x86>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023e8:	235d      	movs	r3, #93	; 0x5d
 80023ea:	2201      	movs	r2, #1
 80023ec:	54fa      	strb	r2, [r7, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023ee:	3b01      	subs	r3, #1
 80023f0:	2200      	movs	r2, #0
 80023f2:	54fa      	strb	r2, [r7, r3]

        return HAL_TIMEOUT;
 80023f4:	2003      	movs	r0, #3
 80023f6:	e01b      	b.n	8002430 <SPI_WaitFifoStateUntilTimeout+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2280      	movs	r2, #128	; 0x80
 80023fc:	0212      	lsls	r2, r2, #8
 80023fe:	4293      	cmp	r3, r2
 8002400:	d003      	beq.n	800240a <SPI_WaitFifoStateUntilTimeout+0x7a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002402:	2280      	movs	r2, #128	; 0x80
 8002404:	00d2      	lsls	r2, r2, #3
 8002406:	4293      	cmp	r3, r2
 8002408:	d1e9      	bne.n	80023de <SPI_WaitFifoStateUntilTimeout+0x4e>
          __HAL_SPI_DISABLE(hspi);
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	6813      	ldr	r3, [r2, #0]
 800240e:	2140      	movs	r1, #64	; 0x40
 8002410:	438b      	bics	r3, r1
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	e7e3      	b.n	80023de <SPI_WaitFifoStateUntilTimeout+0x4e>
          SPI_RESET_CRC(hspi);
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	6813      	ldr	r3, [r2, #0]
 800241a:	4906      	ldr	r1, [pc, #24]	; (8002434 <SPI_WaitFifoStateUntilTimeout+0xa4>)
 800241c:	400b      	ands	r3, r1
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	6811      	ldr	r1, [r2, #0]
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	019b      	lsls	r3, r3, #6
 8002428:	430b      	orrs	r3, r1
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	e7dc      	b.n	80023e8 <SPI_WaitFifoStateUntilTimeout+0x58>
      }
    }
  }

  return HAL_OK;
 800242e:	2000      	movs	r0, #0
}
 8002430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	ffffdfff 	.word	0xffffdfff

08002438 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002438:	b570      	push	{r4, r5, r6, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	0004      	movs	r4, r0
 800243e:	000d      	movs	r5, r1
 8002440:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002442:	21c0      	movs	r1, #192	; 0xc0
 8002444:	9200      	str	r2, [sp, #0]
 8002446:	002b      	movs	r3, r5
 8002448:	2200      	movs	r2, #0
 800244a:	0149      	lsls	r1, r1, #5
 800244c:	f7ff ffa0 	bl	8002390 <SPI_WaitFifoStateUntilTimeout>
 8002450:	2800      	cmp	r0, #0
 8002452:	d118      	bne.n	8002486 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002454:	9600      	str	r6, [sp, #0]
 8002456:	002b      	movs	r3, r5
 8002458:	2200      	movs	r2, #0
 800245a:	2180      	movs	r1, #128	; 0x80
 800245c:	0020      	movs	r0, r4
 800245e:	f7ff ff49 	bl	80022f4 <SPI_WaitFlagStateUntilTimeout>
 8002462:	2800      	cmp	r0, #0
 8002464:	d116      	bne.n	8002494 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002466:	21c0      	movs	r1, #192	; 0xc0
 8002468:	9600      	str	r6, [sp, #0]
 800246a:	002b      	movs	r3, r5
 800246c:	2200      	movs	r2, #0
 800246e:	00c9      	lsls	r1, r1, #3
 8002470:	0020      	movs	r0, r4
 8002472:	f7ff ff8d 	bl	8002390 <SPI_WaitFifoStateUntilTimeout>
 8002476:	2800      	cmp	r0, #0
 8002478:	d00a      	beq.n	8002490 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800247a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800247c:	2220      	movs	r2, #32
 800247e:	4313      	orrs	r3, r2
 8002480:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002482:	2003      	movs	r0, #3
 8002484:	e004      	b.n	8002490 <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002486:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002488:	2220      	movs	r2, #32
 800248a:	4313      	orrs	r3, r2
 800248c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800248e:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8002490:	b002      	add	sp, #8
 8002492:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002494:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002496:	2220      	movs	r2, #32
 8002498:	4313      	orrs	r3, r2
 800249a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800249c:	2003      	movs	r0, #3
 800249e:	e7f7      	b.n	8002490 <SPI_EndRxTxTransaction+0x58>

080024a0 <HAL_SPI_Init>:
{
 80024a0:	b510      	push	{r4, lr}
 80024a2:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 80024a4:	d05e      	beq.n	8002564 <HAL_SPI_Init+0xc4>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80024aa:	335d      	adds	r3, #93	; 0x5d
 80024ac:	5cc3      	ldrb	r3, [r0, r3]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d04c      	beq.n	800254c <HAL_SPI_Init+0xac>
  hspi->State = HAL_SPI_STATE_BUSY;
 80024b2:	235d      	movs	r3, #93	; 0x5d
 80024b4:	2202      	movs	r2, #2
 80024b6:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 80024b8:	6822      	ldr	r2, [r4, #0]
 80024ba:	6813      	ldr	r3, [r2, #0]
 80024bc:	2140      	movs	r1, #64	; 0x40
 80024be:	438b      	bics	r3, r1
 80024c0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024c2:	68e3      	ldr	r3, [r4, #12]
 80024c4:	22e0      	movs	r2, #224	; 0xe0
 80024c6:	00d2      	lsls	r2, r2, #3
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d945      	bls.n	8002558 <HAL_SPI_Init+0xb8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80024cc:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024ce:	21f0      	movs	r1, #240	; 0xf0
 80024d0:	0109      	lsls	r1, r1, #4
 80024d2:	428b      	cmp	r3, r1
 80024d4:	d005      	beq.n	80024e2 <HAL_SPI_Init+0x42>
 80024d6:	21e0      	movs	r1, #224	; 0xe0
 80024d8:	00c9      	lsls	r1, r1, #3
 80024da:	428b      	cmp	r3, r1
 80024dc:	d001      	beq.n	80024e2 <HAL_SPI_Init+0x42>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024de:	2100      	movs	r1, #0
 80024e0:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80024e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80024e4:	2900      	cmp	r1, #0
 80024e6:	d105      	bne.n	80024f4 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024e8:	21e0      	movs	r1, #224	; 0xe0
 80024ea:	00c9      	lsls	r1, r1, #3
 80024ec:	428b      	cmp	r3, r1
 80024ee:	d936      	bls.n	800255e <HAL_SPI_Init+0xbe>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80024f0:	2302      	movs	r3, #2
 80024f2:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80024f4:	6863      	ldr	r3, [r4, #4]
 80024f6:	68a1      	ldr	r1, [r4, #8]
 80024f8:	430b      	orrs	r3, r1
 80024fa:	6921      	ldr	r1, [r4, #16]
 80024fc:	430b      	orrs	r3, r1
 80024fe:	6961      	ldr	r1, [r4, #20]
 8002500:	430b      	orrs	r3, r1
 8002502:	2180      	movs	r1, #128	; 0x80
 8002504:	0089      	lsls	r1, r1, #2
 8002506:	69a0      	ldr	r0, [r4, #24]
 8002508:	4001      	ands	r1, r0
 800250a:	430b      	orrs	r3, r1
 800250c:	69e1      	ldr	r1, [r4, #28]
 800250e:	430b      	orrs	r3, r1
 8002510:	6a21      	ldr	r1, [r4, #32]
 8002512:	430b      	orrs	r3, r1
 8002514:	6821      	ldr	r1, [r4, #0]
 8002516:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002518:	4303      	orrs	r3, r0
 800251a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800251c:	8b61      	ldrh	r1, [r4, #26]
 800251e:	2304      	movs	r3, #4
 8002520:	400b      	ands	r3, r1
 8002522:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002524:	430b      	orrs	r3, r1
 8002526:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002528:	430b      	orrs	r3, r1
 800252a:	68e1      	ldr	r1, [r4, #12]
 800252c:	430b      	orrs	r3, r1
 800252e:	6821      	ldr	r1, [r4, #0]
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002534:	6822      	ldr	r2, [r4, #0]
 8002536:	69d3      	ldr	r3, [r2, #28]
 8002538:	490b      	ldr	r1, [pc, #44]	; (8002568 <HAL_SPI_Init+0xc8>)
 800253a:	400b      	ands	r3, r1
 800253c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800253e:	2300      	movs	r3, #0
 8002540:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002542:	335d      	adds	r3, #93	; 0x5d
 8002544:	2201      	movs	r2, #1
 8002546:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8002548:	2000      	movs	r0, #0
}
 800254a:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800254c:	335c      	adds	r3, #92	; 0x5c
 800254e:	2200      	movs	r2, #0
 8002550:	54c2      	strb	r2, [r0, r3]
    HAL_SPI_MspInit(hspi);
 8002552:	f7fe fe3d 	bl	80011d0 <HAL_SPI_MspInit>
 8002556:	e7ac      	b.n	80024b2 <HAL_SPI_Init+0x12>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	0152      	lsls	r2, r2, #5
 800255c:	e7b7      	b.n	80024ce <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800255e:	2301      	movs	r3, #1
 8002560:	6323      	str	r3, [r4, #48]	; 0x30
 8002562:	e7c7      	b.n	80024f4 <HAL_SPI_Init+0x54>
    return HAL_ERROR;
 8002564:	2001      	movs	r0, #1
 8002566:	e7f0      	b.n	800254a <HAL_SPI_Init+0xaa>
 8002568:	fffff7ff 	.word	0xfffff7ff

0800256c <HAL_SPI_Transmit>:
{
 800256c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256e:	b085      	sub	sp, #20
 8002570:	0004      	movs	r4, r0
 8002572:	9101      	str	r1, [sp, #4]
 8002574:	0016      	movs	r6, r2
 8002576:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8002578:	235c      	movs	r3, #92	; 0x5c
 800257a:	5cc3      	ldrb	r3, [r0, r3]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d100      	bne.n	8002582 <HAL_SPI_Transmit+0x16>
 8002580:	e0e2      	b.n	8002748 <HAL_SPI_Transmit+0x1dc>
 8002582:	235c      	movs	r3, #92	; 0x5c
 8002584:	2201      	movs	r2, #1
 8002586:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8002588:	f7fe ff2c 	bl	80013e4 <HAL_GetTick>
 800258c:	0005      	movs	r5, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800258e:	235d      	movs	r3, #93	; 0x5d
 8002590:	5ce3      	ldrb	r3, [r4, r3]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d008      	beq.n	80025a8 <HAL_SPI_Transmit+0x3c>
    errorcode = HAL_BUSY;
 8002596:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002598:	235d      	movs	r3, #93	; 0x5d
 800259a:	2201      	movs	r2, #1
 800259c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 800259e:	3b01      	subs	r3, #1
 80025a0:	2200      	movs	r2, #0
 80025a2:	54e2      	strb	r2, [r4, r3]
}
 80025a4:	b005      	add	sp, #20
 80025a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 80025a8:	9901      	ldr	r1, [sp, #4]
 80025aa:	2900      	cmp	r1, #0
 80025ac:	d100      	bne.n	80025b0 <HAL_SPI_Transmit+0x44>
 80025ae:	e0bd      	b.n	800272c <HAL_SPI_Transmit+0x1c0>
 80025b0:	2e00      	cmp	r6, #0
 80025b2:	d100      	bne.n	80025b6 <HAL_SPI_Transmit+0x4a>
 80025b4:	e0bc      	b.n	8002730 <HAL_SPI_Transmit+0x1c4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025b6:	335c      	adds	r3, #92	; 0x5c
 80025b8:	2203      	movs	r2, #3
 80025ba:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025bc:	2300      	movs	r3, #0
 80025be:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025c0:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80025c2:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80025c4:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025c6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80025c8:	3241      	adds	r2, #65	; 0x41
 80025ca:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 80025cc:	3202      	adds	r2, #2
 80025ce:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 80025d0:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80025d2:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	68a2      	ldr	r2, [r4, #8]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d01d      	beq.n	800261a <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025de:	6823      	ldr	r3, [r4, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	0652      	lsls	r2, r2, #25
 80025e4:	d403      	bmi.n	80025ee <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	2140      	movs	r1, #64	; 0x40
 80025ea:	430a      	orrs	r2, r1
 80025ec:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025ee:	23e0      	movs	r3, #224	; 0xe0
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	68e2      	ldr	r2, [r4, #12]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d935      	bls.n	8002664 <HAL_SPI_Transmit+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025f8:	6863      	ldr	r3, [r4, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_SPI_Transmit+0x96>
 80025fe:	2e01      	cmp	r6, #1
 8002600:	d11d      	bne.n	800263e <HAL_SPI_Transmit+0xd2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002606:	8812      	ldrh	r2, [r2, #0]
 8002608:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800260a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800260c:	3302      	adds	r3, #2
 800260e:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8002610:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002612:	3b01      	subs	r3, #1
 8002614:	b29b      	uxth	r3, r3
 8002616:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002618:	e011      	b.n	800263e <HAL_SPI_Transmit+0xd2>
    SPI_1LINE_TX(hspi);
 800261a:	6822      	ldr	r2, [r4, #0]
 800261c:	6811      	ldr	r1, [r2, #0]
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	01db      	lsls	r3, r3, #7
 8002622:	430b      	orrs	r3, r1
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e7da      	b.n	80025de <HAL_SPI_Transmit+0x72>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002628:	f7fe fedc 	bl	80013e4 <HAL_GetTick>
 800262c:	1b40      	subs	r0, r0, r5
 800262e:	42b8      	cmp	r0, r7
 8002630:	d302      	bcc.n	8002638 <HAL_SPI_Transmit+0xcc>
 8002632:	1c7b      	adds	r3, r7, #1
 8002634:	d000      	beq.n	8002638 <HAL_SPI_Transmit+0xcc>
 8002636:	e07d      	b.n	8002734 <HAL_SPI_Transmit+0x1c8>
 8002638:	2f00      	cmp	r7, #0
 800263a:	d100      	bne.n	800263e <HAL_SPI_Transmit+0xd2>
 800263c:	e07c      	b.n	8002738 <HAL_SPI_Transmit+0x1cc>
    while (hspi->TxXferCount > 0U)
 800263e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d05a      	beq.n	80026fc <HAL_SPI_Transmit+0x190>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	0792      	lsls	r2, r2, #30
 800264c:	d5ec      	bpl.n	8002628 <HAL_SPI_Transmit+0xbc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800264e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002650:	8812      	ldrh	r2, [r2, #0]
 8002652:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002654:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002656:	3302      	adds	r3, #2
 8002658:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800265a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800265c:	3b01      	subs	r3, #1
 800265e:	b29b      	uxth	r3, r3
 8002660:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002662:	e7ec      	b.n	800263e <HAL_SPI_Transmit+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002664:	6863      	ldr	r3, [r4, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_SPI_Transmit+0x102>
 800266a:	2e01      	cmp	r6, #1
 800266c:	d12f      	bne.n	80026ce <HAL_SPI_Transmit+0x162>
      if (hspi->TxXferCount > 1U)
 800266e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d90b      	bls.n	800268e <HAL_SPI_Transmit+0x122>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800267a:	8812      	ldrh	r2, [r2, #0]
 800267c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800267e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002680:	3302      	adds	r3, #2
 8002682:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002684:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002686:	3b02      	subs	r3, #2
 8002688:	b29b      	uxth	r3, r3
 800268a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800268c:	e01f      	b.n	80026ce <HAL_SPI_Transmit+0x162>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800268e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	6822      	ldr	r2, [r4, #0]
 8002694:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr ++;
 8002696:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002698:	3301      	adds	r3, #1
 800269a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800269c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80026a4:	e013      	b.n	80026ce <HAL_SPI_Transmit+0x162>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80026ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026ae:	3301      	adds	r3, #1
 80026b0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80026b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80026ba:	e008      	b.n	80026ce <HAL_SPI_Transmit+0x162>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026bc:	f7fe fe92 	bl	80013e4 <HAL_GetTick>
 80026c0:	1b40      	subs	r0, r0, r5
 80026c2:	42b8      	cmp	r0, r7
 80026c4:	d301      	bcc.n	80026ca <HAL_SPI_Transmit+0x15e>
 80026c6:	1c7b      	adds	r3, r7, #1
 80026c8:	d138      	bne.n	800273c <HAL_SPI_Transmit+0x1d0>
 80026ca:	2f00      	cmp	r7, #0
 80026cc:	d038      	beq.n	8002740 <HAL_SPI_Transmit+0x1d4>
    while (hspi->TxXferCount > 0U)
 80026ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d012      	beq.n	80026fc <HAL_SPI_Transmit+0x190>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026d6:	6822      	ldr	r2, [r4, #0]
 80026d8:	6893      	ldr	r3, [r2, #8]
 80026da:	079b      	lsls	r3, r3, #30
 80026dc:	d5ee      	bpl.n	80026bc <HAL_SPI_Transmit+0x150>
        if (hspi->TxXferCount > 1U)
 80026de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d9df      	bls.n	80026a6 <HAL_SPI_Transmit+0x13a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80026ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026ee:	3302      	adds	r3, #2
 80026f0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80026f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80026f4:	3b02      	subs	r3, #2
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80026fa:	e7e8      	b.n	80026ce <HAL_SPI_Transmit+0x162>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026fc:	002a      	movs	r2, r5
 80026fe:	0039      	movs	r1, r7
 8002700:	0020      	movs	r0, r4
 8002702:	f7ff fe99 	bl	8002438 <SPI_EndRxTxTransaction>
 8002706:	2800      	cmp	r0, #0
 8002708:	d001      	beq.n	800270e <HAL_SPI_Transmit+0x1a2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800270a:	2320      	movs	r3, #32
 800270c:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800270e:	68a3      	ldr	r3, [r4, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d106      	bne.n	8002722 <HAL_SPI_Transmit+0x1b6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002714:	9303      	str	r3, [sp, #12]
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	9203      	str	r2, [sp, #12]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	9303      	str	r3, [sp, #12]
 8002720:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002722:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10d      	bne.n	8002744 <HAL_SPI_Transmit+0x1d8>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002728:	2000      	movs	r0, #0
 800272a:	e735      	b.n	8002598 <HAL_SPI_Transmit+0x2c>
    errorcode = HAL_ERROR;
 800272c:	2001      	movs	r0, #1
 800272e:	e733      	b.n	8002598 <HAL_SPI_Transmit+0x2c>
 8002730:	2001      	movs	r0, #1
 8002732:	e731      	b.n	8002598 <HAL_SPI_Transmit+0x2c>
          errorcode = HAL_TIMEOUT;
 8002734:	2003      	movs	r0, #3
 8002736:	e72f      	b.n	8002598 <HAL_SPI_Transmit+0x2c>
 8002738:	2003      	movs	r0, #3
 800273a:	e72d      	b.n	8002598 <HAL_SPI_Transmit+0x2c>
          errorcode = HAL_TIMEOUT;
 800273c:	2003      	movs	r0, #3
 800273e:	e72b      	b.n	8002598 <HAL_SPI_Transmit+0x2c>
 8002740:	2003      	movs	r0, #3
 8002742:	e729      	b.n	8002598 <HAL_SPI_Transmit+0x2c>
    errorcode = HAL_ERROR;
 8002744:	2001      	movs	r0, #1
 8002746:	e727      	b.n	8002598 <HAL_SPI_Transmit+0x2c>
  __HAL_LOCK(hspi);
 8002748:	2002      	movs	r0, #2
 800274a:	e72b      	b.n	80025a4 <HAL_SPI_Transmit+0x38>

0800274c <HAL_SPI_TransmitReceive>:
{
 800274c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800274e:	b083      	sub	sp, #12
 8002750:	0004      	movs	r4, r0
 8002752:	000e      	movs	r6, r1
 8002754:	9201      	str	r2, [sp, #4]
 8002756:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8002758:	235c      	movs	r3, #92	; 0x5c
 800275a:	5cc3      	ldrb	r3, [r0, r3]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d100      	bne.n	8002762 <HAL_SPI_TransmitReceive+0x16>
 8002760:	e157      	b.n	8002a12 <HAL_SPI_TransmitReceive+0x2c6>
 8002762:	235c      	movs	r3, #92	; 0x5c
 8002764:	2201      	movs	r2, #1
 8002766:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8002768:	f7fe fe3c 	bl	80013e4 <HAL_GetTick>
 800276c:	0007      	movs	r7, r0
  tmp_state           = hspi->State;
 800276e:	235d      	movs	r3, #93	; 0x5d
 8002770:	5ce3      	ldrb	r3, [r4, r3]
 8002772:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8002774:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002776:	2b01      	cmp	r3, #1
 8002778:	d014      	beq.n	80027a4 <HAL_SPI_TransmitReceive+0x58>
 800277a:	2182      	movs	r1, #130	; 0x82
 800277c:	0049      	lsls	r1, r1, #1
 800277e:	428a      	cmp	r2, r1
 8002780:	d008      	beq.n	8002794 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8002782:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002784:	235d      	movs	r3, #93	; 0x5d
 8002786:	2201      	movs	r2, #1
 8002788:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 800278a:	3b01      	subs	r3, #1
 800278c:	2200      	movs	r2, #0
 800278e:	54e2      	strb	r2, [r4, r3]
}
 8002790:	b003      	add	sp, #12
 8002792:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002794:	68a2      	ldr	r2, [r4, #8]
 8002796:	2a00      	cmp	r2, #0
 8002798:	d000      	beq.n	800279c <HAL_SPI_TransmitReceive+0x50>
 800279a:	e12c      	b.n	80029f6 <HAL_SPI_TransmitReceive+0x2aa>
 800279c:	2b04      	cmp	r3, #4
 800279e:	d001      	beq.n	80027a4 <HAL_SPI_TransmitReceive+0x58>
    errorcode = HAL_BUSY;
 80027a0:	2002      	movs	r0, #2
 80027a2:	e7ef      	b.n	8002784 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027a4:	2e00      	cmp	r6, #0
 80027a6:	d100      	bne.n	80027aa <HAL_SPI_TransmitReceive+0x5e>
 80027a8:	e127      	b.n	80029fa <HAL_SPI_TransmitReceive+0x2ae>
 80027aa:	9b01      	ldr	r3, [sp, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d100      	bne.n	80027b2 <HAL_SPI_TransmitReceive+0x66>
 80027b0:	e125      	b.n	80029fe <HAL_SPI_TransmitReceive+0x2b2>
 80027b2:	2d00      	cmp	r5, #0
 80027b4:	d100      	bne.n	80027b8 <HAL_SPI_TransmitReceive+0x6c>
 80027b6:	e124      	b.n	8002a02 <HAL_SPI_TransmitReceive+0x2b6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027b8:	235d      	movs	r3, #93	; 0x5d
 80027ba:	5ce3      	ldrb	r3, [r4, r3]
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d002      	beq.n	80027c6 <HAL_SPI_TransmitReceive+0x7a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027c0:	235d      	movs	r3, #93	; 0x5d
 80027c2:	2205      	movs	r2, #5
 80027c4:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027ca:	9a01      	ldr	r2, [sp, #4]
 80027cc:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80027ce:	2246      	movs	r2, #70	; 0x46
 80027d0:	52a5      	strh	r5, [r4, r2]
  hspi->RxXferSize  = Size;
 80027d2:	3a02      	subs	r2, #2
 80027d4:	52a5      	strh	r5, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027d6:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80027d8:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80027da:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 80027dc:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80027de:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80027e0:	23e0      	movs	r3, #224	; 0xe0
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	68e2      	ldr	r2, [r4, #12]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d801      	bhi.n	80027ee <HAL_SPI_TransmitReceive+0xa2>
 80027ea:	2d01      	cmp	r5, #1
 80027ec:	d923      	bls.n	8002836 <HAL_SPI_TransmitReceive+0xea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027ee:	6822      	ldr	r2, [r4, #0]
 80027f0:	6853      	ldr	r3, [r2, #4]
 80027f2:	4989      	ldr	r1, [pc, #548]	; (8002a18 <HAL_SPI_TransmitReceive+0x2cc>)
 80027f4:	400b      	ands	r3, r1
 80027f6:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	0652      	lsls	r2, r2, #25
 80027fe:	d403      	bmi.n	8002808 <HAL_SPI_TransmitReceive+0xbc>
    __HAL_SPI_ENABLE(hspi);
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	2140      	movs	r1, #64	; 0x40
 8002804:	430a      	orrs	r2, r1
 8002806:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002808:	23e0      	movs	r3, #224	; 0xe0
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	68e2      	ldr	r2, [r4, #12]
 800280e:	429a      	cmp	r2, r3
 8002810:	d956      	bls.n	80028c0 <HAL_SPI_TransmitReceive+0x174>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002812:	6863      	ldr	r3, [r4, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_SPI_TransmitReceive+0xd0>
 8002818:	2d01      	cmp	r5, #1
 800281a:	d10a      	bne.n	8002832 <HAL_SPI_TransmitReceive+0xe6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002820:	8812      	ldrh	r2, [r2, #0]
 8002822:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002824:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002826:	3302      	adds	r3, #2
 8002828:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800282a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800282c:	3b01      	subs	r3, #1
 800282e:	b29b      	uxth	r3, r3
 8002830:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002832:	2501      	movs	r5, #1
 8002834:	e024      	b.n	8002880 <HAL_SPI_TransmitReceive+0x134>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002836:	6822      	ldr	r2, [r4, #0]
 8002838:	6851      	ldr	r1, [r2, #4]
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	015b      	lsls	r3, r3, #5
 800283e:	430b      	orrs	r3, r1
 8002840:	6053      	str	r3, [r2, #4]
 8002842:	e7d9      	b.n	80027f8 <HAL_SPI_TransmitReceive+0xac>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002844:	6823      	ldr	r3, [r4, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	07d2      	lsls	r2, r2, #31
 800284a:	d510      	bpl.n	800286e <HAL_SPI_TransmitReceive+0x122>
 800284c:	2246      	movs	r2, #70	; 0x46
 800284e:	5aa2      	ldrh	r2, [r4, r2]
 8002850:	b292      	uxth	r2, r2
 8002852:	2a00      	cmp	r2, #0
 8002854:	d00b      	beq.n	800286e <HAL_SPI_TransmitReceive+0x122>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800285a:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800285c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800285e:	3302      	adds	r3, #2
 8002860:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002862:	2246      	movs	r2, #70	; 0x46
 8002864:	5aa3      	ldrh	r3, [r4, r2]
 8002866:	3b01      	subs	r3, #1
 8002868:	b29b      	uxth	r3, r3
 800286a:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 800286c:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800286e:	f7fe fdb9 	bl	80013e4 <HAL_GetTick>
 8002872:	1bc0      	subs	r0, r0, r7
 8002874:	9b08      	ldr	r3, [sp, #32]
 8002876:	4298      	cmp	r0, r3
 8002878:	d302      	bcc.n	8002880 <HAL_SPI_TransmitReceive+0x134>
 800287a:	3301      	adds	r3, #1
 800287c:	d000      	beq.n	8002880 <HAL_SPI_TransmitReceive+0x134>
 800287e:	e0c2      	b.n	8002a06 <HAL_SPI_TransmitReceive+0x2ba>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002880:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d105      	bne.n	8002894 <HAL_SPI_TransmitReceive+0x148>
 8002888:	3346      	adds	r3, #70	; 0x46
 800288a:	5ae3      	ldrh	r3, [r4, r3]
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d100      	bne.n	8002894 <HAL_SPI_TransmitReceive+0x148>
 8002892:	e0a4      	b.n	80029de <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002894:	6823      	ldr	r3, [r4, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	0792      	lsls	r2, r2, #30
 800289a:	d5d3      	bpl.n	8002844 <HAL_SPI_TransmitReceive+0xf8>
 800289c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800289e:	b292      	uxth	r2, r2
 80028a0:	2a00      	cmp	r2, #0
 80028a2:	d0cf      	beq.n	8002844 <HAL_SPI_TransmitReceive+0xf8>
 80028a4:	2d01      	cmp	r5, #1
 80028a6:	d1cd      	bne.n	8002844 <HAL_SPI_TransmitReceive+0xf8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80028aa:	8812      	ldrh	r2, [r2, #0]
 80028ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028b0:	3302      	adds	r3, #2
 80028b2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80028b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80028bc:	2500      	movs	r5, #0
 80028be:	e7c1      	b.n	8002844 <HAL_SPI_TransmitReceive+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028c0:	6863      	ldr	r3, [r4, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_SPI_TransmitReceive+0x17e>
 80028c6:	2d01      	cmp	r5, #1
 80028c8:	d10e      	bne.n	80028e8 <HAL_SPI_TransmitReceive+0x19c>
      if (hspi->TxXferCount > 1U)
 80028ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d90c      	bls.n	80028ec <HAL_SPI_TransmitReceive+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80028d6:	8812      	ldrh	r2, [r2, #0]
 80028d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028dc:	3302      	adds	r3, #2
 80028de:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80028e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028e2:	3b02      	subs	r3, #2
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80028e8:	2501      	movs	r5, #1
 80028ea:	e046      	b.n	800297a <HAL_SPI_TransmitReceive+0x22e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	6822      	ldr	r2, [r4, #0]
 80028f2:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80028f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028f6:	3301      	adds	r3, #1
 80028f8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80028fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29b      	uxth	r3, r3
 8002900:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002902:	e7f1      	b.n	80028e8 <HAL_SPI_TransmitReceive+0x19c>
        if (hspi->TxXferCount > 1U)
 8002904:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002906:	b292      	uxth	r2, r2
 8002908:	2a01      	cmp	r2, #1
 800290a:	d90b      	bls.n	8002924 <HAL_SPI_TransmitReceive+0x1d8>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800290c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800290e:	8812      	ldrh	r2, [r2, #0]
 8002910:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002912:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002914:	3302      	adds	r3, #2
 8002916:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002918:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800291a:	3b02      	subs	r3, #2
 800291c:	b29b      	uxth	r3, r3
 800291e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002920:	2500      	movs	r5, #0
 8002922:	e03d      	b.n	80029a0 <HAL_SPI_TransmitReceive+0x254>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002924:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002926:	7812      	ldrb	r2, [r2, #0]
 8002928:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 800292a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800292c:	3301      	adds	r3, #1
 800292e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002930:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002932:	3b01      	subs	r3, #1
 8002934:	b29b      	uxth	r3, r3
 8002936:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002938:	2500      	movs	r5, #0
 800293a:	e031      	b.n	80029a0 <HAL_SPI_TransmitReceive+0x254>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800293c:	6822      	ldr	r2, [r4, #0]
 800293e:	6851      	ldr	r1, [r2, #4]
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	015b      	lsls	r3, r3, #5
 8002944:	430b      	orrs	r3, r1
 8002946:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8002948:	2501      	movs	r5, #1
 800294a:	e00b      	b.n	8002964 <HAL_SPI_TransmitReceive+0x218>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800294c:	7b1b      	ldrb	r3, [r3, #12]
 800294e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002950:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8002952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002954:	3301      	adds	r3, #1
 8002956:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8002958:	2246      	movs	r2, #70	; 0x46
 800295a:	5aa3      	ldrh	r3, [r4, r2]
 800295c:	3b01      	subs	r3, #1
 800295e:	b29b      	uxth	r3, r3
 8002960:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 8002962:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002964:	f7fe fd3e 	bl	80013e4 <HAL_GetTick>
 8002968:	1bc0      	subs	r0, r0, r7
 800296a:	9b08      	ldr	r3, [sp, #32]
 800296c:	4298      	cmp	r0, r3
 800296e:	d301      	bcc.n	8002974 <HAL_SPI_TransmitReceive+0x228>
 8002970:	3301      	adds	r3, #1
 8002972:	d14a      	bne.n	8002a0a <HAL_SPI_TransmitReceive+0x2be>
 8002974:	9b08      	ldr	r3, [sp, #32]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d049      	beq.n	8002a0e <HAL_SPI_TransmitReceive+0x2c2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800297a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d104      	bne.n	800298c <HAL_SPI_TransmitReceive+0x240>
 8002982:	3346      	adds	r3, #70	; 0x46
 8002984:	5ae3      	ldrh	r3, [r4, r3]
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d028      	beq.n	80029de <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	0792      	lsls	r2, r2, #30
 8002992:	d505      	bpl.n	80029a0 <HAL_SPI_TransmitReceive+0x254>
 8002994:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002996:	b292      	uxth	r2, r2
 8002998:	2a00      	cmp	r2, #0
 800299a:	d001      	beq.n	80029a0 <HAL_SPI_TransmitReceive+0x254>
 800299c:	2d01      	cmp	r5, #1
 800299e:	d0b1      	beq.n	8002904 <HAL_SPI_TransmitReceive+0x1b8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	07d2      	lsls	r2, r2, #31
 80029a6:	d5dd      	bpl.n	8002964 <HAL_SPI_TransmitReceive+0x218>
 80029a8:	2246      	movs	r2, #70	; 0x46
 80029aa:	5aa2      	ldrh	r2, [r4, r2]
 80029ac:	b292      	uxth	r2, r2
 80029ae:	2a00      	cmp	r2, #0
 80029b0:	d0d8      	beq.n	8002964 <HAL_SPI_TransmitReceive+0x218>
        if (hspi->RxXferCount > 1U)
 80029b2:	2246      	movs	r2, #70	; 0x46
 80029b4:	5aa2      	ldrh	r2, [r4, r2]
 80029b6:	b292      	uxth	r2, r2
 80029b8:	2a01      	cmp	r2, #1
 80029ba:	d9c7      	bls.n	800294c <HAL_SPI_TransmitReceive+0x200>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80029c0:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80029c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029c4:	3302      	adds	r3, #2
 80029c6:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80029c8:	2246      	movs	r2, #70	; 0x46
 80029ca:	5aa3      	ldrh	r3, [r4, r2]
 80029cc:	3b02      	subs	r3, #2
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	52a3      	strh	r3, [r4, r2]
          if (hspi->RxXferCount <= 1U)
 80029d2:	5aa3      	ldrh	r3, [r4, r2]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d9b0      	bls.n	800293c <HAL_SPI_TransmitReceive+0x1f0>
        txallowed = 1U;
 80029da:	2501      	movs	r5, #1
 80029dc:	e7c2      	b.n	8002964 <HAL_SPI_TransmitReceive+0x218>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029de:	003a      	movs	r2, r7
 80029e0:	9908      	ldr	r1, [sp, #32]
 80029e2:	0020      	movs	r0, r4
 80029e4:	f7ff fd28 	bl	8002438 <SPI_EndRxTxTransaction>
 80029e8:	2800      	cmp	r0, #0
 80029ea:	d100      	bne.n	80029ee <HAL_SPI_TransmitReceive+0x2a2>
 80029ec:	e6ca      	b.n	8002784 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029ee:	2320      	movs	r3, #32
 80029f0:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80029f2:	2001      	movs	r0, #1
 80029f4:	e6c6      	b.n	8002784 <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_BUSY;
 80029f6:	2002      	movs	r0, #2
 80029f8:	e6c4      	b.n	8002784 <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_ERROR;
 80029fa:	2001      	movs	r0, #1
 80029fc:	e6c2      	b.n	8002784 <HAL_SPI_TransmitReceive+0x38>
 80029fe:	2001      	movs	r0, #1
 8002a00:	e6c0      	b.n	8002784 <HAL_SPI_TransmitReceive+0x38>
 8002a02:	2001      	movs	r0, #1
 8002a04:	e6be      	b.n	8002784 <HAL_SPI_TransmitReceive+0x38>
        errorcode = HAL_TIMEOUT;
 8002a06:	2003      	movs	r0, #3
 8002a08:	e6bc      	b.n	8002784 <HAL_SPI_TransmitReceive+0x38>
        errorcode = HAL_TIMEOUT;
 8002a0a:	2003      	movs	r0, #3
 8002a0c:	e6ba      	b.n	8002784 <HAL_SPI_TransmitReceive+0x38>
 8002a0e:	2003      	movs	r0, #3
 8002a10:	e6b8      	b.n	8002784 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8002a12:	2002      	movs	r0, #2
 8002a14:	e6bc      	b.n	8002790 <HAL_SPI_TransmitReceive+0x44>
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	ffffefff 	.word	0xffffefff

08002a1c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a1c:	6802      	ldr	r2, [r0, #0]
 8002a1e:	6813      	ldr	r3, [r2, #0]
 8002a20:	4906      	ldr	r1, [pc, #24]	; (8002a3c <UART_EndRxTransfer+0x20>)
 8002a22:	400b      	ands	r3, r1
 8002a24:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a26:	6802      	ldr	r2, [r0, #0]
 8002a28:	6893      	ldr	r3, [r2, #8]
 8002a2a:	3123      	adds	r1, #35	; 0x23
 8002a2c:	31ff      	adds	r1, #255	; 0xff
 8002a2e:	438b      	bics	r3, r1
 8002a30:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a32:	2320      	movs	r3, #32
 8002a34:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	6603      	str	r3, [r0, #96]	; 0x60
}
 8002a3a:	4770      	bx	lr
 8002a3c:	fffffedf 	.word	0xfffffedf

08002a40 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a40:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002a42:	2b21      	cmp	r3, #33	; 0x21
 8002a44:	d000      	beq.n	8002a48 <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002a46:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8002a48:	3331      	adds	r3, #49	; 0x31
 8002a4a:	5ac3      	ldrh	r3, [r0, r3]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00c      	beq.n	8002a6c <UART_TxISR_8BIT+0x2c>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002a52:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	6802      	ldr	r2, [r0, #0]
 8002a58:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr++;
 8002a5a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8002a60:	2252      	movs	r2, #82	; 0x52
 8002a62:	5a83      	ldrh	r3, [r0, r2]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	5283      	strh	r3, [r0, r2]
}
 8002a6a:	e7ec      	b.n	8002a46 <UART_TxISR_8BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002a6c:	6802      	ldr	r2, [r0, #0]
 8002a6e:	6813      	ldr	r3, [r2, #0]
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	438b      	bics	r3, r1
 8002a74:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a76:	6802      	ldr	r2, [r0, #0]
 8002a78:	6813      	ldr	r3, [r2, #0]
 8002a7a:	3940      	subs	r1, #64	; 0x40
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	e7e1      	b.n	8002a46 <UART_TxISR_8BIT+0x6>

08002a82 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a82:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002a84:	2b21      	cmp	r3, #33	; 0x21
 8002a86:	d000      	beq.n	8002a8a <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002a88:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8002a8a:	3331      	adds	r3, #49	; 0x31
 8002a8c:	5ac3      	ldrh	r3, [r0, r3]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00e      	beq.n	8002ab2 <UART_TxISR_16BIT+0x30>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002a94:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	05db      	lsls	r3, r3, #23
 8002a9a:	0ddb      	lsrs	r3, r3, #23
 8002a9c:	6802      	ldr	r2, [r0, #0]
 8002a9e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8002aa0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8002aa6:	2252      	movs	r2, #82	; 0x52
 8002aa8:	5a83      	ldrh	r3, [r0, r2]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	5283      	strh	r3, [r0, r2]
}
 8002ab0:	e7ea      	b.n	8002a88 <UART_TxISR_16BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002ab2:	6802      	ldr	r2, [r0, #0]
 8002ab4:	6813      	ldr	r3, [r2, #0]
 8002ab6:	2180      	movs	r1, #128	; 0x80
 8002ab8:	438b      	bics	r3, r1
 8002aba:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002abc:	6802      	ldr	r2, [r0, #0]
 8002abe:	6813      	ldr	r3, [r2, #0]
 8002ac0:	3940      	subs	r1, #64	; 0x40
 8002ac2:	430b      	orrs	r3, r1
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e7df      	b.n	8002a88 <UART_TxISR_16BIT+0x6>

08002ac8 <HAL_UART_DeInit>:
{
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002acc:	d016      	beq.n	8002afc <HAL_UART_DeInit+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8002ace:	2324      	movs	r3, #36	; 0x24
 8002ad0:	6743      	str	r3, [r0, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002ad2:	6802      	ldr	r2, [r0, #0]
 8002ad4:	6813      	ldr	r3, [r2, #0]
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	438b      	bics	r3, r1
 8002ada:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 8002adc:	6803      	ldr	r3, [r0, #0]
 8002ade:	2500      	movs	r5, #0
 8002ae0:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002ae2:	6803      	ldr	r3, [r0, #0]
 8002ae4:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002ae6:	6803      	ldr	r3, [r0, #0]
 8002ae8:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8002aea:	f7fe fbdf 	bl	80012ac <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aee:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8002af0:	6765      	str	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8002af2:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002af4:	2370      	movs	r3, #112	; 0x70
 8002af6:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8002af8:	2000      	movs	r0, #0
}
 8002afa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002afc:	2001      	movs	r0, #1
 8002afe:	e7fc      	b.n	8002afa <HAL_UART_DeInit+0x32>

08002b00 <HAL_UART_Transmit_IT>:
{
 8002b00:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8002b02:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	d136      	bne.n	8002b76 <HAL_UART_Transmit_IT+0x76>
    if ((pData == NULL) || (Size == 0U))
 8002b08:	2900      	cmp	r1, #0
 8002b0a:	d036      	beq.n	8002b7a <HAL_UART_Transmit_IT+0x7a>
 8002b0c:	2a00      	cmp	r2, #0
 8002b0e:	d036      	beq.n	8002b7e <HAL_UART_Transmit_IT+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b10:	6883      	ldr	r3, [r0, #8]
 8002b12:	2480      	movs	r4, #128	; 0x80
 8002b14:	0164      	lsls	r4, r4, #5
 8002b16:	42a3      	cmp	r3, r4
 8002b18:	d020      	beq.n	8002b5c <HAL_UART_Transmit_IT+0x5c>
    __HAL_LOCK(huart);
 8002b1a:	2470      	movs	r4, #112	; 0x70
 8002b1c:	5d04      	ldrb	r4, [r0, r4]
 8002b1e:	2c01      	cmp	r4, #1
 8002b20:	d02f      	beq.n	8002b82 <HAL_UART_Transmit_IT+0x82>
 8002b22:	2470      	movs	r4, #112	; 0x70
 8002b24:	2501      	movs	r5, #1
 8002b26:	5505      	strb	r5, [r0, r4]
    huart->pTxBuffPtr  = pData;
 8002b28:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002b2a:	2150      	movs	r1, #80	; 0x50
 8002b2c:	5242      	strh	r2, [r0, r1]
    huart->TxXferCount = Size;
 8002b2e:	3102      	adds	r1, #2
 8002b30:	5242      	strh	r2, [r0, r1]
    huart->TxISR       = NULL;
 8002b32:	2200      	movs	r2, #0
 8002b34:	6642      	str	r2, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b36:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b38:	3221      	adds	r2, #33	; 0x21
 8002b3a:	6742      	str	r2, [r0, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b3c:	2280      	movs	r2, #128	; 0x80
 8002b3e:	0152      	lsls	r2, r2, #5
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d012      	beq.n	8002b6a <HAL_UART_Transmit_IT+0x6a>
      huart->TxISR = UART_TxISR_8BIT;
 8002b44:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <HAL_UART_Transmit_IT+0x88>)
 8002b46:	6643      	str	r3, [r0, #100]	; 0x64
    __HAL_UNLOCK(huart);
 8002b48:	2370      	movs	r3, #112	; 0x70
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	54c2      	strb	r2, [r0, r3]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002b4e:	6802      	ldr	r2, [r0, #0]
 8002b50:	6813      	ldr	r3, [r2, #0]
 8002b52:	2180      	movs	r1, #128	; 0x80
 8002b54:	430b      	orrs	r3, r1
 8002b56:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8002b58:	2000      	movs	r0, #0
 8002b5a:	e00d      	b.n	8002b78 <HAL_UART_Transmit_IT+0x78>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b5c:	6904      	ldr	r4, [r0, #16]
 8002b5e:	2c00      	cmp	r4, #0
 8002b60:	d1db      	bne.n	8002b1a <HAL_UART_Transmit_IT+0x1a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b62:	07cc      	lsls	r4, r1, #31
 8002b64:	d5d9      	bpl.n	8002b1a <HAL_UART_Transmit_IT+0x1a>
        return  HAL_ERROR;
 8002b66:	2001      	movs	r0, #1
 8002b68:	e006      	b.n	8002b78 <HAL_UART_Transmit_IT+0x78>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b6a:	6903      	ldr	r3, [r0, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1e9      	bne.n	8002b44 <HAL_UART_Transmit_IT+0x44>
      huart->TxISR = UART_TxISR_16BIT;
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_UART_Transmit_IT+0x8c>)
 8002b72:	6643      	str	r3, [r0, #100]	; 0x64
 8002b74:	e7e8      	b.n	8002b48 <HAL_UART_Transmit_IT+0x48>
    return HAL_BUSY;
 8002b76:	2002      	movs	r0, #2
}
 8002b78:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	e7fc      	b.n	8002b78 <HAL_UART_Transmit_IT+0x78>
 8002b7e:	2001      	movs	r0, #1
 8002b80:	e7fa      	b.n	8002b78 <HAL_UART_Transmit_IT+0x78>
    __HAL_LOCK(huart);
 8002b82:	2002      	movs	r0, #2
 8002b84:	e7f8      	b.n	8002b78 <HAL_UART_Transmit_IT+0x78>
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	08002a41 	.word	0x08002a41
 8002b8c:	08002a83 	.word	0x08002a83

08002b90 <HAL_UART_Receive_IT>:
{
 8002b90:	b530      	push	{r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b92:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d15c      	bne.n	8002c52 <HAL_UART_Receive_IT+0xc2>
    if ((pData == NULL) || (Size == 0U))
 8002b98:	2900      	cmp	r1, #0
 8002b9a:	d05c      	beq.n	8002c56 <HAL_UART_Receive_IT+0xc6>
 8002b9c:	2a00      	cmp	r2, #0
 8002b9e:	d05c      	beq.n	8002c5a <HAL_UART_Receive_IT+0xca>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba0:	6883      	ldr	r3, [r0, #8]
 8002ba2:	2480      	movs	r4, #128	; 0x80
 8002ba4:	0164      	lsls	r4, r4, #5
 8002ba6:	42a3      	cmp	r3, r4
 8002ba8:	d01a      	beq.n	8002be0 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 8002baa:	2470      	movs	r4, #112	; 0x70
 8002bac:	5d04      	ldrb	r4, [r0, r4]
 8002bae:	2c01      	cmp	r4, #1
 8002bb0:	d055      	beq.n	8002c5e <HAL_UART_Receive_IT+0xce>
 8002bb2:	2470      	movs	r4, #112	; 0x70
 8002bb4:	2501      	movs	r5, #1
 8002bb6:	5505      	strb	r5, [r0, r4]
    huart->pRxBuffPtr  = pData;
 8002bb8:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002bba:	2158      	movs	r1, #88	; 0x58
 8002bbc:	5242      	strh	r2, [r0, r1]
    huart->RxXferCount = Size;
 8002bbe:	3102      	adds	r1, #2
 8002bc0:	5242      	strh	r2, [r0, r1]
    huart->RxISR       = NULL;
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	6602      	str	r2, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8002bc6:	2280      	movs	r2, #128	; 0x80
 8002bc8:	0152      	lsls	r2, r2, #5
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00f      	beq.n	8002bee <HAL_UART_Receive_IT+0x5e>
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d11c      	bne.n	8002c0c <HAL_UART_Receive_IT+0x7c>
 8002bd2:	6903      	ldr	r3, [r0, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d115      	bne.n	8002c04 <HAL_UART_Receive_IT+0x74>
 8002bd8:	335c      	adds	r3, #92	; 0x5c
 8002bda:	22ff      	movs	r2, #255	; 0xff
 8002bdc:	52c2      	strh	r2, [r0, r3]
 8002bde:	e018      	b.n	8002c12 <HAL_UART_Receive_IT+0x82>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be0:	6904      	ldr	r4, [r0, #16]
 8002be2:	2c00      	cmp	r4, #0
 8002be4:	d1e1      	bne.n	8002baa <HAL_UART_Receive_IT+0x1a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002be6:	07cc      	lsls	r4, r1, #31
 8002be8:	d5df      	bpl.n	8002baa <HAL_UART_Receive_IT+0x1a>
        return  HAL_ERROR;
 8002bea:	2001      	movs	r0, #1
 8002bec:	e032      	b.n	8002c54 <HAL_UART_Receive_IT+0xc4>
    UART_MASK_COMPUTATION(huart);
 8002bee:	6903      	ldr	r3, [r0, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d103      	bne.n	8002bfc <HAL_UART_Receive_IT+0x6c>
 8002bf4:	335c      	adds	r3, #92	; 0x5c
 8002bf6:	4a1b      	ldr	r2, [pc, #108]	; (8002c64 <HAL_UART_Receive_IT+0xd4>)
 8002bf8:	52c2      	strh	r2, [r0, r3]
 8002bfa:	e00a      	b.n	8002c12 <HAL_UART_Receive_IT+0x82>
 8002bfc:	235c      	movs	r3, #92	; 0x5c
 8002bfe:	22ff      	movs	r2, #255	; 0xff
 8002c00:	52c2      	strh	r2, [r0, r3]
 8002c02:	e006      	b.n	8002c12 <HAL_UART_Receive_IT+0x82>
 8002c04:	235c      	movs	r3, #92	; 0x5c
 8002c06:	227f      	movs	r2, #127	; 0x7f
 8002c08:	52c2      	strh	r2, [r0, r3]
 8002c0a:	e002      	b.n	8002c12 <HAL_UART_Receive_IT+0x82>
 8002c0c:	235c      	movs	r3, #92	; 0x5c
 8002c0e:	2200      	movs	r2, #0
 8002c10:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c16:	3322      	adds	r3, #34	; 0x22
 8002c18:	6783      	str	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c1a:	6802      	ldr	r2, [r0, #0]
 8002c1c:	6893      	ldr	r3, [r2, #8]
 8002c1e:	2101      	movs	r1, #1
 8002c20:	430b      	orrs	r3, r1
 8002c22:	6093      	str	r3, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c24:	2380      	movs	r3, #128	; 0x80
 8002c26:	015b      	lsls	r3, r3, #5
 8002c28:	6882      	ldr	r2, [r0, #8]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d00b      	beq.n	8002c46 <HAL_UART_Receive_IT+0xb6>
      huart->RxISR = UART_RxISR_8BIT;
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <HAL_UART_Receive_IT+0xd8>)
 8002c30:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_UNLOCK(huart);
 8002c32:	2370      	movs	r3, #112	; 0x70
 8002c34:	2200      	movs	r2, #0
 8002c36:	54c2      	strb	r2, [r0, r3]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002c38:	6802      	ldr	r2, [r0, #0]
 8002c3a:	6811      	ldr	r1, [r2, #0]
 8002c3c:	33b0      	adds	r3, #176	; 0xb0
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8002c42:	2000      	movs	r0, #0
 8002c44:	e006      	b.n	8002c54 <HAL_UART_Receive_IT+0xc4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c46:	6903      	ldr	r3, [r0, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f0      	bne.n	8002c2e <HAL_UART_Receive_IT+0x9e>
      huart->RxISR = UART_RxISR_16BIT;
 8002c4c:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <HAL_UART_Receive_IT+0xdc>)
 8002c4e:	6603      	str	r3, [r0, #96]	; 0x60
 8002c50:	e7ef      	b.n	8002c32 <HAL_UART_Receive_IT+0xa2>
    return HAL_BUSY;
 8002c52:	2002      	movs	r0, #2
}
 8002c54:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8002c56:	2001      	movs	r0, #1
 8002c58:	e7fc      	b.n	8002c54 <HAL_UART_Receive_IT+0xc4>
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	e7fa      	b.n	8002c54 <HAL_UART_Receive_IT+0xc4>
    __HAL_LOCK(huart);
 8002c5e:	2002      	movs	r0, #2
 8002c60:	e7f8      	b.n	8002c54 <HAL_UART_Receive_IT+0xc4>
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	000001ff 	.word	0x000001ff
 8002c68:	08002c8d 	.word	0x08002c8d
 8002c6c:	08002cf1 	.word	0x08002cf1

08002c70 <HAL_UART_TxCpltCallback>:
}
 8002c70:	4770      	bx	lr

08002c72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c72:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c74:	6802      	ldr	r2, [r0, #0]
 8002c76:	6813      	ldr	r3, [r2, #0]
 8002c78:	2140      	movs	r1, #64	; 0x40
 8002c7a:	438b      	bics	r3, r1
 8002c7c:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c7e:	2320      	movs	r3, #32
 8002c80:	6743      	str	r3, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	6643      	str	r3, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c86:	f7ff fff3 	bl	8002c70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c8a:	bd10      	pop	{r4, pc}

08002c8c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002c8c:	b510      	push	{r4, lr}
  uint16_t uhMask = huart->Mask;
 8002c8e:	235c      	movs	r3, #92	; 0x5c
 8002c90:	5ac3      	ldrh	r3, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c92:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8002c94:	2a22      	cmp	r2, #34	; 0x22
 8002c96:	d005      	beq.n	8002ca4 <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c98:	6802      	ldr	r2, [r0, #0]
 8002c9a:	6993      	ldr	r3, [r2, #24]
 8002c9c:	2108      	movs	r1, #8
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	6193      	str	r3, [r2, #24]
  }
}
 8002ca2:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002ca4:	6802      	ldr	r2, [r0, #0]
 8002ca6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	4013      	ands	r3, r2
 8002cac:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002cae:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8002cb0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002cb6:	225a      	movs	r2, #90	; 0x5a
 8002cb8:	5a83      	ldrh	r3, [r0, r2]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8002cc0:	5a83      	ldrh	r3, [r0, r2]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1ec      	bne.n	8002ca2 <UART_RxISR_8BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cc8:	6802      	ldr	r2, [r0, #0]
 8002cca:	6813      	ldr	r3, [r2, #0]
 8002ccc:	4907      	ldr	r1, [pc, #28]	; (8002cec <UART_RxISR_8BIT+0x60>)
 8002cce:	400b      	ands	r3, r1
 8002cd0:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd2:	6802      	ldr	r2, [r0, #0]
 8002cd4:	6893      	ldr	r3, [r2, #8]
 8002cd6:	3123      	adds	r1, #35	; 0x23
 8002cd8:	31ff      	adds	r1, #255	; 0xff
 8002cda:	438b      	bics	r3, r1
 8002cdc:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002cde:	2320      	movs	r3, #32
 8002ce0:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8002ce6:	f7fd fe0f 	bl	8000908 <HAL_UART_RxCpltCallback>
 8002cea:	e7da      	b.n	8002ca2 <UART_RxISR_8BIT+0x16>
 8002cec:	fffffedf 	.word	0xfffffedf

08002cf0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002cf0:	b510      	push	{r4, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002cf2:	235c      	movs	r3, #92	; 0x5c
 8002cf4:	5ac2      	ldrh	r2, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cf6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002cf8:	2b22      	cmp	r3, #34	; 0x22
 8002cfa:	d005      	beq.n	8002d08 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002cfc:	6802      	ldr	r2, [r0, #0]
 8002cfe:	6993      	ldr	r3, [r2, #24]
 8002d00:	2108      	movs	r1, #8
 8002d02:	430b      	orrs	r3, r1
 8002d04:	6193      	str	r3, [r2, #24]
  }
}
 8002d06:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d08:	6803      	ldr	r3, [r0, #0]
 8002d0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002d10:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 8002d12:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002d14:	3302      	adds	r3, #2
 8002d16:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002d18:	225a      	movs	r2, #90	; 0x5a
 8002d1a:	5a83      	ldrh	r3, [r0, r2]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8002d22:	5a83      	ldrh	r3, [r0, r2]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1ed      	bne.n	8002d06 <UART_RxISR_16BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d2a:	6802      	ldr	r2, [r0, #0]
 8002d2c:	6813      	ldr	r3, [r2, #0]
 8002d2e:	4908      	ldr	r1, [pc, #32]	; (8002d50 <UART_RxISR_16BIT+0x60>)
 8002d30:	400b      	ands	r3, r1
 8002d32:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d34:	6802      	ldr	r2, [r0, #0]
 8002d36:	6893      	ldr	r3, [r2, #8]
 8002d38:	3123      	adds	r1, #35	; 0x23
 8002d3a:	31ff      	adds	r1, #255	; 0xff
 8002d3c:	438b      	bics	r3, r1
 8002d3e:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002d40:	2320      	movs	r3, #32
 8002d42:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8002d48:	f7fd fdde 	bl	8000908 <HAL_UART_RxCpltCallback>
 8002d4c:	e7db      	b.n	8002d06 <UART_RxISR_16BIT+0x16>
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	fffffedf 	.word	0xfffffedf

08002d54 <HAL_UART_IRQHandler>:
{
 8002d54:	b570      	push	{r4, r5, r6, lr}
 8002d56:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d58:	6801      	ldr	r1, [r0, #0]
 8002d5a:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d5c:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d5e:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d60:	4a4d      	ldr	r2, [pc, #308]	; (8002e98 <HAL_UART_IRQHandler+0x144>)
 8002d62:	401a      	ands	r2, r3
  if (errorflags == 0U)
 8002d64:	d10a      	bne.n	8002d7c <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d66:	069e      	lsls	r6, r3, #26
 8002d68:	d508      	bpl.n	8002d7c <HAL_UART_IRQHandler+0x28>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d6a:	0686      	lsls	r6, r0, #26
 8002d6c:	d506      	bpl.n	8002d7c <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 8002d6e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d100      	bne.n	8002d76 <HAL_UART_IRQHandler+0x22>
 8002d74:	e08b      	b.n	8002e8e <HAL_UART_IRQHandler+0x13a>
        huart->RxISR(huart);
 8002d76:	0020      	movs	r0, r4
 8002d78:	4798      	blx	r3
 8002d7a:	e088      	b.n	8002e8e <HAL_UART_IRQHandler+0x13a>
  if ((errorflags != 0U)
 8002d7c:	2a00      	cmp	r2, #0
 8002d7e:	d078      	beq.n	8002e72 <HAL_UART_IRQHandler+0x11e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d80:	2201      	movs	r2, #1
 8002d82:	402a      	ands	r2, r5
 8002d84:	d103      	bne.n	8002d8e <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002d86:	2590      	movs	r5, #144	; 0x90
 8002d88:	006d      	lsls	r5, r5, #1
 8002d8a:	4228      	tst	r0, r5
 8002d8c:	d071      	beq.n	8002e72 <HAL_UART_IRQHandler+0x11e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d8e:	07dd      	lsls	r5, r3, #31
 8002d90:	d506      	bpl.n	8002da0 <HAL_UART_IRQHandler+0x4c>
 8002d92:	05c5      	lsls	r5, r0, #23
 8002d94:	d504      	bpl.n	8002da0 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d96:	2501      	movs	r5, #1
 8002d98:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d9a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002d9c:	4329      	orrs	r1, r5
 8002d9e:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002da0:	0799      	lsls	r1, r3, #30
 8002da2:	d508      	bpl.n	8002db6 <HAL_UART_IRQHandler+0x62>
 8002da4:	2a00      	cmp	r2, #0
 8002da6:	d006      	beq.n	8002db6 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002da8:	6821      	ldr	r1, [r4, #0]
 8002daa:	2502      	movs	r5, #2
 8002dac:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dae:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002db0:	3502      	adds	r5, #2
 8002db2:	4329      	orrs	r1, r5
 8002db4:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002db6:	0759      	lsls	r1, r3, #29
 8002db8:	d508      	bpl.n	8002dcc <HAL_UART_IRQHandler+0x78>
 8002dba:	2a00      	cmp	r2, #0
 8002dbc:	d006      	beq.n	8002dcc <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002dbe:	6821      	ldr	r1, [r4, #0]
 8002dc0:	2504      	movs	r5, #4
 8002dc2:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dc4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002dc6:	3d02      	subs	r5, #2
 8002dc8:	4329      	orrs	r1, r5
 8002dca:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002dcc:	0719      	lsls	r1, r3, #28
 8002dce:	d509      	bpl.n	8002de4 <HAL_UART_IRQHandler+0x90>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002dd0:	0681      	lsls	r1, r0, #26
 8002dd2:	d401      	bmi.n	8002dd8 <HAL_UART_IRQHandler+0x84>
 8002dd4:	2a00      	cmp	r2, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_UART_IRQHandler+0x90>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dd8:	6822      	ldr	r2, [r4, #0]
 8002dda:	2108      	movs	r1, #8
 8002ddc:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dde:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002de0:	430a      	orrs	r2, r1
 8002de2:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002de4:	051a      	lsls	r2, r3, #20
 8002de6:	d509      	bpl.n	8002dfc <HAL_UART_IRQHandler+0xa8>
 8002de8:	0142      	lsls	r2, r0, #5
 8002dea:	d507      	bpl.n	8002dfc <HAL_UART_IRQHandler+0xa8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dec:	6822      	ldr	r2, [r4, #0]
 8002dee:	2180      	movs	r1, #128	; 0x80
 8002df0:	0109      	lsls	r1, r1, #4
 8002df2:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002df4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002df6:	2120      	movs	r1, #32
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dfc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002dfe:	2a00      	cmp	r2, #0
 8002e00:	d045      	beq.n	8002e8e <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e02:	069b      	lsls	r3, r3, #26
 8002e04:	d506      	bpl.n	8002e14 <HAL_UART_IRQHandler+0xc0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e06:	0683      	lsls	r3, r0, #26
 8002e08:	d504      	bpl.n	8002e14 <HAL_UART_IRQHandler+0xc0>
        if (huart->RxISR != NULL)
 8002e0a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_UART_IRQHandler+0xc0>
          huart->RxISR(huart);
 8002e10:	0020      	movs	r0, r4
 8002e12:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8002e14:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	065b      	lsls	r3, r3, #25
 8002e1c:	d402      	bmi.n	8002e24 <HAL_UART_IRQHandler+0xd0>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e1e:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e20:	4213      	tst	r3, r2
 8002e22:	d020      	beq.n	8002e66 <HAL_UART_IRQHandler+0x112>
        UART_EndRxTransfer(huart);
 8002e24:	0020      	movs	r0, r4
 8002e26:	f7ff fdf9 	bl	8002a1c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2a:	6823      	ldr	r3, [r4, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	0652      	lsls	r2, r2, #25
 8002e30:	d515      	bpl.n	8002e5e <HAL_UART_IRQHandler+0x10a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	2140      	movs	r1, #64	; 0x40
 8002e36:	438a      	bics	r2, r1
 8002e38:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002e3a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <HAL_UART_IRQHandler+0x102>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e40:	4a16      	ldr	r2, [pc, #88]	; (8002e9c <HAL_UART_IRQHandler+0x148>)
 8002e42:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e44:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002e46:	f7fe fb8e 	bl	8001566 <HAL_DMA_Abort_IT>
 8002e4a:	2800      	cmp	r0, #0
 8002e4c:	d01f      	beq.n	8002e8e <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e4e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002e50:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e52:	4798      	blx	r3
 8002e54:	e01b      	b.n	8002e8e <HAL_UART_IRQHandler+0x13a>
            HAL_UART_ErrorCallback(huart);
 8002e56:	0020      	movs	r0, r4
 8002e58:	f7fd fdea 	bl	8000a30 <HAL_UART_ErrorCallback>
 8002e5c:	e017      	b.n	8002e8e <HAL_UART_IRQHandler+0x13a>
          HAL_UART_ErrorCallback(huart);
 8002e5e:	0020      	movs	r0, r4
 8002e60:	f7fd fde6 	bl	8000a30 <HAL_UART_ErrorCallback>
 8002e64:	e013      	b.n	8002e8e <HAL_UART_IRQHandler+0x13a>
        HAL_UART_ErrorCallback(huart);
 8002e66:	0020      	movs	r0, r4
 8002e68:	f7fd fde2 	bl	8000a30 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002e70:	e00d      	b.n	8002e8e <HAL_UART_IRQHandler+0x13a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e72:	061a      	lsls	r2, r3, #24
 8002e74:	d507      	bpl.n	8002e86 <HAL_UART_IRQHandler+0x132>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e76:	0602      	lsls	r2, r0, #24
 8002e78:	d505      	bpl.n	8002e86 <HAL_UART_IRQHandler+0x132>
    if (huart->TxISR != NULL)
 8002e7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d006      	beq.n	8002e8e <HAL_UART_IRQHandler+0x13a>
      huart->TxISR(huart);
 8002e80:	0020      	movs	r0, r4
 8002e82:	4798      	blx	r3
 8002e84:	e003      	b.n	8002e8e <HAL_UART_IRQHandler+0x13a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e86:	065b      	lsls	r3, r3, #25
 8002e88:	d501      	bpl.n	8002e8e <HAL_UART_IRQHandler+0x13a>
 8002e8a:	0643      	lsls	r3, r0, #25
 8002e8c:	d400      	bmi.n	8002e90 <HAL_UART_IRQHandler+0x13c>
}
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}
    UART_EndTransmit_IT(huart);
 8002e90:	0020      	movs	r0, r4
 8002e92:	f7ff feee 	bl	8002c72 <UART_EndTransmit_IT>
    return;
 8002e96:	e7fa      	b.n	8002e8e <HAL_UART_IRQHandler+0x13a>
 8002e98:	0000080f 	.word	0x0000080f
 8002e9c:	08002ea1 	.word	0x08002ea1

08002ea0 <UART_DMAAbortOnError>:
{
 8002ea0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ea2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	225a      	movs	r2, #90	; 0x5a
 8002ea8:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8002eaa:	3a08      	subs	r2, #8
 8002eac:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8002eae:	f7fd fdbf 	bl	8000a30 <HAL_UART_ErrorCallback>
}
 8002eb2:	bd10      	pop	{r4, pc}

08002eb4 <HAL_MultiProcessor_EnterMuteMode>:
  __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 8002eb4:	6802      	ldr	r2, [r0, #0]
 8002eb6:	6993      	ldr	r3, [r2, #24]
 8002eb8:	2104      	movs	r1, #4
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	6193      	str	r3, [r2, #24]
}
 8002ebe:	4770      	bx	lr

08002ec0 <UART_SetConfig>:
{
 8002ec0:	b510      	push	{r4, lr}
 8002ec2:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ec4:	6883      	ldr	r3, [r0, #8]
 8002ec6:	6902      	ldr	r2, [r0, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	6942      	ldr	r2, [r0, #20]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	69c2      	ldr	r2, [r0, #28]
 8002ed0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ed2:	6801      	ldr	r1, [r0, #0]
 8002ed4:	680a      	ldr	r2, [r1, #0]
 8002ed6:	4864      	ldr	r0, [pc, #400]	; (8003068 <UART_SetConfig+0x1a8>)
 8002ed8:	4002      	ands	r2, r0
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ede:	6822      	ldr	r2, [r4, #0]
 8002ee0:	6853      	ldr	r3, [r2, #4]
 8002ee2:	4962      	ldr	r1, [pc, #392]	; (800306c <UART_SetConfig+0x1ac>)
 8002ee4:	400b      	ands	r3, r1
 8002ee6:	68e1      	ldr	r1, [r4, #12]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8002eec:	6a22      	ldr	r2, [r4, #32]
 8002eee:	69a3      	ldr	r3, [r4, #24]
 8002ef0:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ef2:	6821      	ldr	r1, [r4, #0]
 8002ef4:	688b      	ldr	r3, [r1, #8]
 8002ef6:	485e      	ldr	r0, [pc, #376]	; (8003070 <UART_SetConfig+0x1b0>)
 8002ef8:	4003      	ands	r3, r0
 8002efa:	4313      	orrs	r3, r2
 8002efc:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002efe:	4b5d      	ldr	r3, [pc, #372]	; (8003074 <UART_SetConfig+0x1b4>)
 8002f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f02:	2303      	movs	r3, #3
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d024      	beq.n	8002f54 <UART_SetConfig+0x94>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <UART_SetConfig+0x5a>
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d022      	beq.n	8002f58 <UART_SetConfig+0x98>
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d022      	beq.n	8002f5c <UART_SetConfig+0x9c>
 8002f16:	2310      	movs	r3, #16
 8002f18:	e000      	b.n	8002f1c <UART_SetConfig+0x5c>
 8002f1a:	2300      	movs	r3, #0
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f1c:	2280      	movs	r2, #128	; 0x80
 8002f1e:	0212      	lsls	r2, r2, #8
 8002f20:	69e1      	ldr	r1, [r4, #28]
 8002f22:	4291      	cmp	r1, r2
 8002f24:	d01c      	beq.n	8002f60 <UART_SetConfig+0xa0>
    switch (clocksource)
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d100      	bne.n	8002f2c <UART_SetConfig+0x6c>
 8002f2a:	e07e      	b.n	800302a <UART_SetConfig+0x16a>
 8002f2c:	d965      	bls.n	8002ffa <UART_SetConfig+0x13a>
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d100      	bne.n	8002f34 <UART_SetConfig+0x74>
 8002f32:	e086      	b.n	8003042 <UART_SetConfig+0x182>
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d000      	beq.n	8002f3a <UART_SetConfig+0x7a>
 8002f38:	e08f      	b.n	800305a <UART_SetConfig+0x19a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002f3a:	6863      	ldr	r3, [r4, #4]
 8002f3c:	0858      	lsrs	r0, r3, #1
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	469c      	mov	ip, r3
 8002f44:	4460      	add	r0, ip
 8002f46:	6861      	ldr	r1, [r4, #4]
 8002f48:	f7fd f8de 	bl	8000108 <__udivsi3>
 8002f4c:	0403      	lsls	r3, r0, #16
 8002f4e:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f50:	2000      	movs	r0, #0
        break;
 8002f52:	e05f      	b.n	8003014 <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f54:	2304      	movs	r3, #4
 8002f56:	e7e1      	b.n	8002f1c <UART_SetConfig+0x5c>
 8002f58:	2308      	movs	r3, #8
 8002f5a:	e7df      	b.n	8002f1c <UART_SetConfig+0x5c>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e7dd      	b.n	8002f1c <UART_SetConfig+0x5c>
    switch (clocksource)
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d02e      	beq.n	8002fc2 <UART_SetConfig+0x102>
 8002f64:	d910      	bls.n	8002f88 <UART_SetConfig+0xc8>
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d037      	beq.n	8002fda <UART_SetConfig+0x11a>
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d142      	bne.n	8002ff4 <UART_SetConfig+0x134>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002f6e:	6863      	ldr	r3, [r4, #4]
 8002f70:	0858      	lsrs	r0, r3, #1
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	025b      	lsls	r3, r3, #9
 8002f76:	469c      	mov	ip, r3
 8002f78:	4460      	add	r0, ip
 8002f7a:	6861      	ldr	r1, [r4, #4]
 8002f7c:	f7fd f8c4 	bl	8000108 <__udivsi3>
 8002f80:	0403      	lsls	r3, r0, #16
 8002f82:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f84:	2000      	movs	r0, #0
        break;
 8002f86:	e00d      	b.n	8002fa4 <UART_SetConfig+0xe4>
    switch (clocksource)
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d133      	bne.n	8002ff4 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f8c:	f7fe ff88 	bl	8001ea0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f90:	0040      	lsls	r0, r0, #1
 8002f92:	6863      	ldr	r3, [r4, #4]
 8002f94:	085b      	lsrs	r3, r3, #1
 8002f96:	18c0      	adds	r0, r0, r3
 8002f98:	6861      	ldr	r1, [r4, #4]
 8002f9a:	f7fd f8b5 	bl	8000108 <__udivsi3>
 8002f9e:	0403      	lsls	r3, r0, #16
 8002fa0:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fa2:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fa4:	4934      	ldr	r1, [pc, #208]	; (8003078 <UART_SetConfig+0x1b8>)
 8002fa6:	001a      	movs	r2, r3
 8002fa8:	3a10      	subs	r2, #16
 8002faa:	428a      	cmp	r2, r1
 8002fac:	d858      	bhi.n	8003060 <UART_SetConfig+0x1a0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fae:	220f      	movs	r2, #15
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	4391      	bics	r1, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fb4:	085b      	lsrs	r3, r3, #1
 8002fb6:	3a08      	subs	r2, #8
 8002fb8:	4013      	ands	r3, r2
 8002fba:	430b      	orrs	r3, r1
      huart->Instance->BRR = brrtemp;
 8002fbc:	6822      	ldr	r2, [r4, #0]
 8002fbe:	60d3      	str	r3, [r2, #12]
 8002fc0:	e02f      	b.n	8003022 <UART_SetConfig+0x162>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002fc2:	6863      	ldr	r3, [r4, #4]
 8002fc4:	0858      	lsrs	r0, r3, #1
 8002fc6:	4b2d      	ldr	r3, [pc, #180]	; (800307c <UART_SetConfig+0x1bc>)
 8002fc8:	469c      	mov	ip, r3
 8002fca:	4460      	add	r0, ip
 8002fcc:	6861      	ldr	r1, [r4, #4]
 8002fce:	f7fd f89b 	bl	8000108 <__udivsi3>
 8002fd2:	0403      	lsls	r3, r0, #16
 8002fd4:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fd6:	2000      	movs	r0, #0
        break;
 8002fd8:	e7e4      	b.n	8002fa4 <UART_SetConfig+0xe4>
        pclk = HAL_RCC_GetSysClockFreq();
 8002fda:	f7fe fe8b 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fde:	0040      	lsls	r0, r0, #1
 8002fe0:	6863      	ldr	r3, [r4, #4]
 8002fe2:	085b      	lsrs	r3, r3, #1
 8002fe4:	18c0      	adds	r0, r0, r3
 8002fe6:	6861      	ldr	r1, [r4, #4]
 8002fe8:	f7fd f88e 	bl	8000108 <__udivsi3>
 8002fec:	0403      	lsls	r3, r0, #16
 8002fee:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ff0:	2000      	movs	r0, #0
        break;
 8002ff2:	e7d7      	b.n	8002fa4 <UART_SetConfig+0xe4>
        ret = HAL_ERROR;
 8002ff4:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e7d4      	b.n	8002fa4 <UART_SetConfig+0xe4>
    switch (clocksource)
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d12d      	bne.n	800305a <UART_SetConfig+0x19a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ffe:	f7fe ff4f 	bl	8001ea0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003002:	6863      	ldr	r3, [r4, #4]
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	1818      	adds	r0, r3, r0
 8003008:	6861      	ldr	r1, [r4, #4]
 800300a:	f7fd f87d 	bl	8000108 <__udivsi3>
 800300e:	0403      	lsls	r3, r0, #16
 8003010:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8003012:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003014:	4918      	ldr	r1, [pc, #96]	; (8003078 <UART_SetConfig+0x1b8>)
 8003016:	001a      	movs	r2, r3
 8003018:	3a10      	subs	r2, #16
 800301a:	428a      	cmp	r2, r1
 800301c:	d822      	bhi.n	8003064 <UART_SetConfig+0x1a4>
      huart->Instance->BRR = usartdiv;
 800301e:	6822      	ldr	r2, [r4, #0]
 8003020:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8003022:	2300      	movs	r3, #0
 8003024:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003026:	6663      	str	r3, [r4, #100]	; 0x64
}
 8003028:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800302a:	6863      	ldr	r3, [r4, #4]
 800302c:	0858      	lsrs	r0, r3, #1
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <UART_SetConfig+0x1c0>)
 8003030:	469c      	mov	ip, r3
 8003032:	4460      	add	r0, ip
 8003034:	6861      	ldr	r1, [r4, #4]
 8003036:	f7fd f867 	bl	8000108 <__udivsi3>
 800303a:	0403      	lsls	r3, r0, #16
 800303c:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800303e:	2000      	movs	r0, #0
        break;
 8003040:	e7e8      	b.n	8003014 <UART_SetConfig+0x154>
        pclk = HAL_RCC_GetSysClockFreq();
 8003042:	f7fe fe57 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003046:	6863      	ldr	r3, [r4, #4]
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	1818      	adds	r0, r3, r0
 800304c:	6861      	ldr	r1, [r4, #4]
 800304e:	f7fd f85b 	bl	8000108 <__udivsi3>
 8003052:	0403      	lsls	r3, r0, #16
 8003054:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8003056:	2000      	movs	r0, #0
        break;
 8003058:	e7dc      	b.n	8003014 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 800305a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800305c:	2300      	movs	r3, #0
 800305e:	e7d9      	b.n	8003014 <UART_SetConfig+0x154>
      ret = HAL_ERROR;
 8003060:	2001      	movs	r0, #1
 8003062:	e7de      	b.n	8003022 <UART_SetConfig+0x162>
      ret = HAL_ERROR;
 8003064:	2001      	movs	r0, #1
 8003066:	e7dc      	b.n	8003022 <UART_SetConfig+0x162>
 8003068:	ffff69f3 	.word	0xffff69f3
 800306c:	ffffcfff 	.word	0xffffcfff
 8003070:	fffff4ff 	.word	0xfffff4ff
 8003074:	40021000 	.word	0x40021000
 8003078:	0000ffef 	.word	0x0000ffef
 800307c:	00f42400 	.word	0x00f42400
 8003080:	007a1200 	.word	0x007a1200

08003084 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003084:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003086:	07db      	lsls	r3, r3, #31
 8003088:	d506      	bpl.n	8003098 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800308a:	6802      	ldr	r2, [r0, #0]
 800308c:	6853      	ldr	r3, [r2, #4]
 800308e:	492c      	ldr	r1, [pc, #176]	; (8003140 <UART_AdvFeatureConfig+0xbc>)
 8003090:	400b      	ands	r3, r1
 8003092:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003094:	430b      	orrs	r3, r1
 8003096:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003098:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800309a:	079b      	lsls	r3, r3, #30
 800309c:	d506      	bpl.n	80030ac <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800309e:	6802      	ldr	r2, [r0, #0]
 80030a0:	6853      	ldr	r3, [r2, #4]
 80030a2:	4928      	ldr	r1, [pc, #160]	; (8003144 <UART_AdvFeatureConfig+0xc0>)
 80030a4:	400b      	ands	r3, r1
 80030a6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80030a8:	430b      	orrs	r3, r1
 80030aa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030ae:	075b      	lsls	r3, r3, #29
 80030b0:	d506      	bpl.n	80030c0 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030b2:	6802      	ldr	r2, [r0, #0]
 80030b4:	6853      	ldr	r3, [r2, #4]
 80030b6:	4924      	ldr	r1, [pc, #144]	; (8003148 <UART_AdvFeatureConfig+0xc4>)
 80030b8:	400b      	ands	r3, r1
 80030ba:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80030bc:	430b      	orrs	r3, r1
 80030be:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030c2:	071b      	lsls	r3, r3, #28
 80030c4:	d506      	bpl.n	80030d4 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030c6:	6802      	ldr	r2, [r0, #0]
 80030c8:	6853      	ldr	r3, [r2, #4]
 80030ca:	4920      	ldr	r1, [pc, #128]	; (800314c <UART_AdvFeatureConfig+0xc8>)
 80030cc:	400b      	ands	r3, r1
 80030ce:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80030d0:	430b      	orrs	r3, r1
 80030d2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030d6:	06db      	lsls	r3, r3, #27
 80030d8:	d506      	bpl.n	80030e8 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030da:	6802      	ldr	r2, [r0, #0]
 80030dc:	6893      	ldr	r3, [r2, #8]
 80030de:	491c      	ldr	r1, [pc, #112]	; (8003150 <UART_AdvFeatureConfig+0xcc>)
 80030e0:	400b      	ands	r3, r1
 80030e2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80030e4:	430b      	orrs	r3, r1
 80030e6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030ea:	069b      	lsls	r3, r3, #26
 80030ec:	d506      	bpl.n	80030fc <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030ee:	6802      	ldr	r2, [r0, #0]
 80030f0:	6893      	ldr	r3, [r2, #8]
 80030f2:	4918      	ldr	r1, [pc, #96]	; (8003154 <UART_AdvFeatureConfig+0xd0>)
 80030f4:	400b      	ands	r3, r1
 80030f6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80030f8:	430b      	orrs	r3, r1
 80030fa:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030fe:	065b      	lsls	r3, r3, #25
 8003100:	d50b      	bpl.n	800311a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003102:	6802      	ldr	r2, [r0, #0]
 8003104:	6853      	ldr	r3, [r2, #4]
 8003106:	4914      	ldr	r1, [pc, #80]	; (8003158 <UART_AdvFeatureConfig+0xd4>)
 8003108:	400b      	ands	r3, r1
 800310a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800310c:	430b      	orrs	r3, r1
 800310e:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	035b      	lsls	r3, r3, #13
 8003114:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003116:	429a      	cmp	r2, r3
 8003118:	d00a      	beq.n	8003130 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800311a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800311c:	061b      	lsls	r3, r3, #24
 800311e:	d506      	bpl.n	800312e <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003120:	6802      	ldr	r2, [r0, #0]
 8003122:	6853      	ldr	r3, [r2, #4]
 8003124:	490d      	ldr	r1, [pc, #52]	; (800315c <UART_AdvFeatureConfig+0xd8>)
 8003126:	400b      	ands	r3, r1
 8003128:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800312a:	430b      	orrs	r3, r1
 800312c:	6053      	str	r3, [r2, #4]
}
 800312e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003130:	6802      	ldr	r2, [r0, #0]
 8003132:	6853      	ldr	r3, [r2, #4]
 8003134:	490a      	ldr	r1, [pc, #40]	; (8003160 <UART_AdvFeatureConfig+0xdc>)
 8003136:	400b      	ands	r3, r1
 8003138:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800313a:	430b      	orrs	r3, r1
 800313c:	6053      	str	r3, [r2, #4]
 800313e:	e7ec      	b.n	800311a <UART_AdvFeatureConfig+0x96>
 8003140:	fffdffff 	.word	0xfffdffff
 8003144:	fffeffff 	.word	0xfffeffff
 8003148:	fffbffff 	.word	0xfffbffff
 800314c:	ffff7fff 	.word	0xffff7fff
 8003150:	ffffefff 	.word	0xffffefff
 8003154:	ffffdfff 	.word	0xffffdfff
 8003158:	ffefffff 	.word	0xffefffff
 800315c:	fff7ffff 	.word	0xfff7ffff
 8003160:	ff9fffff 	.word	0xff9fffff

08003164 <UART_WaitOnFlagUntilTimeout>:
{
 8003164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003166:	46c6      	mov	lr, r8
 8003168:	b500      	push	{lr}
 800316a:	0005      	movs	r5, r0
 800316c:	000c      	movs	r4, r1
 800316e:	0017      	movs	r7, r2
 8003170:	4698      	mov	r8, r3
 8003172:	9e06      	ldr	r6, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003174:	682b      	ldr	r3, [r5, #0]
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	4023      	ands	r3, r4
 800317a:	1b1b      	subs	r3, r3, r4
 800317c:	425a      	negs	r2, r3
 800317e:	4153      	adcs	r3, r2
 8003180:	42bb      	cmp	r3, r7
 8003182:	d13a      	bne.n	80031fa <UART_WaitOnFlagUntilTimeout+0x96>
    if (Timeout != HAL_MAX_DELAY)
 8003184:	1c73      	adds	r3, r6, #1
 8003186:	d0f5      	beq.n	8003174 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003188:	f7fe f92c 	bl	80013e4 <HAL_GetTick>
 800318c:	4643      	mov	r3, r8
 800318e:	1ac0      	subs	r0, r0, r3
 8003190:	42b0      	cmp	r0, r6
 8003192:	d81f      	bhi.n	80031d4 <UART_WaitOnFlagUntilTimeout+0x70>
 8003194:	2e00      	cmp	r6, #0
 8003196:	d01d      	beq.n	80031d4 <UART_WaitOnFlagUntilTimeout+0x70>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003198:	682b      	ldr	r3, [r5, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	0752      	lsls	r2, r2, #29
 800319e:	d5e9      	bpl.n	8003174 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031a0:	69da      	ldr	r2, [r3, #28]
 80031a2:	0512      	lsls	r2, r2, #20
 80031a4:	d5e6      	bpl.n	8003174 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031a6:	2280      	movs	r2, #128	; 0x80
 80031a8:	0112      	lsls	r2, r2, #4
 80031aa:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ac:	682a      	ldr	r2, [r5, #0]
 80031ae:	6813      	ldr	r3, [r2, #0]
 80031b0:	4914      	ldr	r1, [pc, #80]	; (8003204 <UART_WaitOnFlagUntilTimeout+0xa0>)
 80031b2:	400b      	ands	r3, r1
 80031b4:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b6:	682a      	ldr	r2, [r5, #0]
 80031b8:	6893      	ldr	r3, [r2, #8]
 80031ba:	31a3      	adds	r1, #163	; 0xa3
 80031bc:	31ff      	adds	r1, #255	; 0xff
 80031be:	438b      	bics	r3, r1
 80031c0:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 80031c2:	2320      	movs	r3, #32
 80031c4:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80031c6:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031c8:	67eb      	str	r3, [r5, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80031ca:	3350      	adds	r3, #80	; 0x50
 80031cc:	2200      	movs	r2, #0
 80031ce:	54ea      	strb	r2, [r5, r3]
          return HAL_TIMEOUT;
 80031d0:	2003      	movs	r0, #3
 80031d2:	e013      	b.n	80031fc <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031d4:	682a      	ldr	r2, [r5, #0]
 80031d6:	6813      	ldr	r3, [r2, #0]
 80031d8:	490a      	ldr	r1, [pc, #40]	; (8003204 <UART_WaitOnFlagUntilTimeout+0xa0>)
 80031da:	400b      	ands	r3, r1
 80031dc:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031de:	682a      	ldr	r2, [r5, #0]
 80031e0:	6893      	ldr	r3, [r2, #8]
 80031e2:	31a3      	adds	r1, #163	; 0xa3
 80031e4:	31ff      	adds	r1, #255	; 0xff
 80031e6:	438b      	bics	r3, r1
 80031e8:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80031ea:	2320      	movs	r3, #32
 80031ec:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80031ee:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80031f0:	3350      	adds	r3, #80	; 0x50
 80031f2:	2200      	movs	r2, #0
 80031f4:	54ea      	strb	r2, [r5, r3]
        return HAL_TIMEOUT;
 80031f6:	2003      	movs	r0, #3
 80031f8:	e000      	b.n	80031fc <UART_WaitOnFlagUntilTimeout+0x98>
  return HAL_OK;
 80031fa:	2000      	movs	r0, #0
}
 80031fc:	bc04      	pop	{r2}
 80031fe:	4690      	mov	r8, r2
 8003200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	fffffe5f 	.word	0xfffffe5f

08003208 <UART_CheckIdleState>:
{
 8003208:	b530      	push	{r4, r5, lr}
 800320a:	b083      	sub	sp, #12
 800320c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320e:	2300      	movs	r3, #0
 8003210:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003212:	f7fe f8e7 	bl	80013e4 <HAL_GetTick>
 8003216:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	071b      	lsls	r3, r3, #28
 800321e:	d40c      	bmi.n	800323a <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	075b      	lsls	r3, r3, #29
 8003226:	d415      	bmi.n	8003254 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8003228:	2320      	movs	r3, #32
 800322a:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800322c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800322e:	3350      	adds	r3, #80	; 0x50
 8003230:	2200      	movs	r2, #0
 8003232:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8003234:	2000      	movs	r0, #0
}
 8003236:	b003      	add	sp, #12
 8003238:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <UART_CheckIdleState+0x68>)
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	0003      	movs	r3, r0
 8003242:	2200      	movs	r2, #0
 8003244:	0389      	lsls	r1, r1, #14
 8003246:	0020      	movs	r0, r4
 8003248:	f7ff ff8c 	bl	8003164 <UART_WaitOnFlagUntilTimeout>
 800324c:	2800      	cmp	r0, #0
 800324e:	d0e7      	beq.n	8003220 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8003250:	2003      	movs	r0, #3
 8003252:	e7f0      	b.n	8003236 <UART_CheckIdleState+0x2e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003254:	2180      	movs	r1, #128	; 0x80
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <UART_CheckIdleState+0x68>)
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	002b      	movs	r3, r5
 800325c:	2200      	movs	r2, #0
 800325e:	03c9      	lsls	r1, r1, #15
 8003260:	0020      	movs	r0, r4
 8003262:	f7ff ff7f 	bl	8003164 <UART_WaitOnFlagUntilTimeout>
 8003266:	2800      	cmp	r0, #0
 8003268:	d0de      	beq.n	8003228 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 800326a:	2003      	movs	r0, #3
 800326c:	e7e3      	b.n	8003236 <UART_CheckIdleState+0x2e>
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	01ffffff 	.word	0x01ffffff

08003274 <HAL_UART_Init>:
{
 8003274:	b510      	push	{r4, lr}
 8003276:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003278:	d02e      	beq.n	80032d8 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800327a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800327c:	2b00      	cmp	r3, #0
 800327e:	d021      	beq.n	80032c4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003280:	2324      	movs	r3, #36	; 0x24
 8003282:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003284:	6822      	ldr	r2, [r4, #0]
 8003286:	6813      	ldr	r3, [r2, #0]
 8003288:	2101      	movs	r1, #1
 800328a:	438b      	bics	r3, r1
 800328c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800328e:	0020      	movs	r0, r4
 8003290:	f7ff fe16 	bl	8002ec0 <UART_SetConfig>
 8003294:	2801      	cmp	r0, #1
 8003296:	d014      	beq.n	80032c2 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800329a:	2b00      	cmp	r3, #0
 800329c:	d118      	bne.n	80032d0 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800329e:	6822      	ldr	r2, [r4, #0]
 80032a0:	6853      	ldr	r3, [r2, #4]
 80032a2:	490e      	ldr	r1, [pc, #56]	; (80032dc <HAL_UART_Init+0x68>)
 80032a4:	400b      	ands	r3, r1
 80032a6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80032a8:	6822      	ldr	r2, [r4, #0]
 80032aa:	6893      	ldr	r3, [r2, #8]
 80032ac:	2108      	movs	r1, #8
 80032ae:	438b      	bics	r3, r1
 80032b0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80032b2:	6822      	ldr	r2, [r4, #0]
 80032b4:	6813      	ldr	r3, [r2, #0]
 80032b6:	3907      	subs	r1, #7
 80032b8:	430b      	orrs	r3, r1
 80032ba:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80032bc:	0020      	movs	r0, r4
 80032be:	f7ff ffa3 	bl	8003208 <UART_CheckIdleState>
}
 80032c2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80032c4:	3370      	adds	r3, #112	; 0x70
 80032c6:	2200      	movs	r2, #0
 80032c8:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80032ca:	f7fd ffb3 	bl	8001234 <HAL_UART_MspInit>
 80032ce:	e7d7      	b.n	8003280 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80032d0:	0020      	movs	r0, r4
 80032d2:	f7ff fed7 	bl	8003084 <UART_AdvFeatureConfig>
 80032d6:	e7e2      	b.n	800329e <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80032d8:	2001      	movs	r0, #1
 80032da:	e7f2      	b.n	80032c2 <HAL_UART_Init+0x4e>
 80032dc:	fffff7ff 	.word	0xfffff7ff

080032e0 <HAL_MultiProcessor_Init>:
{
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	0004      	movs	r4, r0
 80032e4:	000d      	movs	r5, r1
 80032e6:	0016      	movs	r6, r2
  if (huart == NULL)
 80032e8:	2800      	cmp	r0, #0
 80032ea:	d040      	beq.n	800336e <HAL_MultiProcessor_Init+0x8e>
  if (huart->gState == HAL_UART_STATE_RESET)
 80032ec:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d02b      	beq.n	800334a <HAL_MultiProcessor_Init+0x6a>
  huart->gState = HAL_UART_STATE_BUSY;
 80032f2:	2324      	movs	r3, #36	; 0x24
 80032f4:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80032f6:	6822      	ldr	r2, [r4, #0]
 80032f8:	6813      	ldr	r3, [r2, #0]
 80032fa:	2101      	movs	r1, #1
 80032fc:	438b      	bics	r3, r1
 80032fe:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003300:	0020      	movs	r0, r4
 8003302:	f7ff fddd 	bl	8002ec0 <UART_SetConfig>
 8003306:	2801      	cmp	r0, #1
 8003308:	d01e      	beq.n	8003348 <HAL_MultiProcessor_Init+0x68>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800330a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800330c:	2b00      	cmp	r3, #0
 800330e:	d122      	bne.n	8003356 <HAL_MultiProcessor_Init+0x76>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003310:	6822      	ldr	r2, [r4, #0]
 8003312:	6853      	ldr	r3, [r2, #4]
 8003314:	4917      	ldr	r1, [pc, #92]	; (8003374 <HAL_MultiProcessor_Init+0x94>)
 8003316:	400b      	ands	r3, r1
 8003318:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800331a:	6822      	ldr	r2, [r4, #0]
 800331c:	6893      	ldr	r3, [r2, #8]
 800331e:	2108      	movs	r1, #8
 8003320:	438b      	bics	r3, r1
 8003322:	6093      	str	r3, [r2, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8003324:	2380      	movs	r3, #128	; 0x80
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	429e      	cmp	r6, r3
 800332a:	d018      	beq.n	800335e <HAL_MultiProcessor_Init+0x7e>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4910      	ldr	r1, [pc, #64]	; (8003374 <HAL_MultiProcessor_Init+0x94>)
 8003332:	400a      	ands	r2, r1
 8003334:	4332      	orrs	r2, r6
 8003336:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8003338:	6822      	ldr	r2, [r4, #0]
 800333a:	6813      	ldr	r3, [r2, #0]
 800333c:	2101      	movs	r1, #1
 800333e:	430b      	orrs	r3, r1
 8003340:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003342:	0020      	movs	r0, r4
 8003344:	f7ff ff60 	bl	8003208 <UART_CheckIdleState>
}
 8003348:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800334a:	3370      	adds	r3, #112	; 0x70
 800334c:	2200      	movs	r2, #0
 800334e:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8003350:	f7fd ff70 	bl	8001234 <HAL_UART_MspInit>
 8003354:	e7cd      	b.n	80032f2 <HAL_MultiProcessor_Init+0x12>
    UART_AdvFeatureConfig(huart);
 8003356:	0020      	movs	r0, r4
 8003358:	f7ff fe94 	bl	8003084 <UART_AdvFeatureConfig>
 800335c:	e7d8      	b.n	8003310 <HAL_MultiProcessor_Init+0x30>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 800335e:	6822      	ldr	r2, [r4, #0]
 8003360:	6853      	ldr	r3, [r2, #4]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	062d      	lsls	r5, r5, #24
 8003368:	431d      	orrs	r5, r3
 800336a:	6055      	str	r5, [r2, #4]
 800336c:	e7de      	b.n	800332c <HAL_MultiProcessor_Init+0x4c>
    return HAL_ERROR;
 800336e:	2001      	movs	r0, #1
 8003370:	e7ea      	b.n	8003348 <HAL_MultiProcessor_Init+0x68>
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	fffff7ff 	.word	0xfffff7ff

08003378 <HAL_MultiProcessor_EnableMuteMode>:
{
 8003378:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 800337a:	2370      	movs	r3, #112	; 0x70
 800337c:	5cc3      	ldrb	r3, [r0, r3]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d00f      	beq.n	80033a2 <HAL_MultiProcessor_EnableMuteMode+0x2a>
 8003382:	2370      	movs	r3, #112	; 0x70
 8003384:	2201      	movs	r2, #1
 8003386:	54c2      	strb	r2, [r0, r3]
  huart->gState = HAL_UART_STATE_BUSY;
 8003388:	3b4c      	subs	r3, #76	; 0x4c
 800338a:	6743      	str	r3, [r0, #116]	; 0x74
  SET_BIT(huart->Instance->CR1, USART_CR1_MME);
 800338c:	6802      	ldr	r2, [r0, #0]
 800338e:	6811      	ldr	r1, [r2, #0]
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	019b      	lsls	r3, r3, #6
 8003394:	430b      	orrs	r3, r1
 8003396:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003398:	2320      	movs	r3, #32
 800339a:	6743      	str	r3, [r0, #116]	; 0x74
  return (UART_CheckIdleState(huart));
 800339c:	f7ff ff34 	bl	8003208 <UART_CheckIdleState>
}
 80033a0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80033a2:	2002      	movs	r0, #2
 80033a4:	e7fc      	b.n	80033a0 <HAL_MultiProcessor_EnableMuteMode+0x28>
	...

080033a8 <__libc_init_array>:
 80033a8:	b570      	push	{r4, r5, r6, lr}
 80033aa:	2600      	movs	r6, #0
 80033ac:	4d0c      	ldr	r5, [pc, #48]	; (80033e0 <__libc_init_array+0x38>)
 80033ae:	4c0d      	ldr	r4, [pc, #52]	; (80033e4 <__libc_init_array+0x3c>)
 80033b0:	1b64      	subs	r4, r4, r5
 80033b2:	10a4      	asrs	r4, r4, #2
 80033b4:	42a6      	cmp	r6, r4
 80033b6:	d109      	bne.n	80033cc <__libc_init_array+0x24>
 80033b8:	2600      	movs	r6, #0
 80033ba:	f000 f821 	bl	8003400 <_init>
 80033be:	4d0a      	ldr	r5, [pc, #40]	; (80033e8 <__libc_init_array+0x40>)
 80033c0:	4c0a      	ldr	r4, [pc, #40]	; (80033ec <__libc_init_array+0x44>)
 80033c2:	1b64      	subs	r4, r4, r5
 80033c4:	10a4      	asrs	r4, r4, #2
 80033c6:	42a6      	cmp	r6, r4
 80033c8:	d105      	bne.n	80033d6 <__libc_init_array+0x2e>
 80033ca:	bd70      	pop	{r4, r5, r6, pc}
 80033cc:	00b3      	lsls	r3, r6, #2
 80033ce:	58eb      	ldr	r3, [r5, r3]
 80033d0:	4798      	blx	r3
 80033d2:	3601      	adds	r6, #1
 80033d4:	e7ee      	b.n	80033b4 <__libc_init_array+0xc>
 80033d6:	00b3      	lsls	r3, r6, #2
 80033d8:	58eb      	ldr	r3, [r5, r3]
 80033da:	4798      	blx	r3
 80033dc:	3601      	adds	r6, #1
 80033de:	e7f2      	b.n	80033c6 <__libc_init_array+0x1e>
 80033e0:	08003590 	.word	0x08003590
 80033e4:	08003590 	.word	0x08003590
 80033e8:	08003590 	.word	0x08003590
 80033ec:	08003594 	.word	0x08003594

080033f0 <memset>:
 80033f0:	0003      	movs	r3, r0
 80033f2:	1812      	adds	r2, r2, r0
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d100      	bne.n	80033fa <memset+0xa>
 80033f8:	4770      	bx	lr
 80033fa:	7019      	strb	r1, [r3, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	e7f9      	b.n	80033f4 <memset+0x4>

08003400 <_init>:
 8003400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003406:	bc08      	pop	{r3}
 8003408:	469e      	mov	lr, r3
 800340a:	4770      	bx	lr

0800340c <_fini>:
 800340c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003412:	bc08      	pop	{r3}
 8003414:	469e      	mov	lr, r3
 8003416:	4770      	bx	lr
